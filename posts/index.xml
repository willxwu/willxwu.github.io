<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 归去来兮</title><link>https://willxwu.github.io/posts/</link><description>Recent content in Posts on 归去来兮</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 19 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>K8S集群部署</title><link>https://willxwu.github.io/posts/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/posts/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid><description>一、VirtualBox虚拟机搭建 通过Oracle VM VirtualBox，Vagrant搭建三台虚拟机。
准备工作 1、准备软件 CentOS虚拟系统：CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box
虚拟软件(VirtualBox)：VirtualBox-6.1.34-150636-Win.exe
Vagrant安装虚拟机软件：vagrant_2.2.19_i686.msi。
2、软件安装 先安装VirtualBox、然后安装Vagrant。
3、修改配置 虚拟机、配置存放位置如下：
虚拟系统安装 1、创建配置文件 新建Vagrantfile文件，批量创建3台虚拟机，内容如下：该文件是放在个人用户名文件夹下的。
Vagrant.configure(&amp;#34;2&amp;#34;) do |config| (1..3).each do |i| config.vm.define &amp;#34;k8s-node#{i}&amp;#34; do |node| # 设置虚拟机的Box node.vm.box = &amp;#34;centos/7&amp;#34; config.vm.box_url = &amp;#34;https://mirrors.ustc.edu.cn/centos-cloud/centos/7/vagrant/x86_64/images/CentOS-7.box&amp;#34; # 设置虚拟机的主机名 node.vm.hostname=&amp;#34;k8s-node#{i}&amp;#34; # 设置虚拟机的IP node.vm.network &amp;#34;private_network&amp;#34;, ip: &amp;#34;192.168.56.#{99+i}&amp;#34;, netmask: &amp;#34;255.255.255.0&amp;#34; # 设置主机与虚拟机的共享目录 # node.vm.synced_folder &amp;#34;~/Documents/vagrant/share&amp;#34;, &amp;#34;/home/vagrant/share&amp;#34; # VirtaulBox相关配置 node.vm.provider &amp;#34;virtualbox&amp;#34; do |v| # 设置虚拟机的名称 v.name = &amp;#34;k8s-node#{i}&amp;#34; # 设置虚拟机的内存大小 v.memory = 4096 # 设置虚拟机的CPU个数 v.cpus = 4 end end end end 注意一个细节，如果不修改配置文件和存放路径，可能一直卡在文件复制过程中，检查是否复制了全部个人目录下数据。如果是请修改Vagrantfile文件：</description></item><item><title>JAVA8-Lambda表达式用法</title><link>https://willxwu.github.io/posts/java8/1java8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/posts/java8/1java8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%94%A8%E6%B3%95/</guid><description>用户范例 package com.example.study.java8.InterfaceFunction; /** * lambda表达式用法 */ public class LambdaUsage { public static void main(String[] args) { Runnable runnable1 = ()-&amp;gt; System.out.println(&amp;#34;hello&amp;#34;); Runnable runnable2 = new Runnable() { @Override public void run() { System.out.println(&amp;#34;hello&amp;#34;); } }; process(runnable1); process(runnable2); process(()-&amp;gt; System.out.println(&amp;#34;hello&amp;#34;)); } public static void process(Runnable runnable){ runnable.run(); } } 学习目标 一、Predicate：诊断，返回boolean类型
@FunctionalInterface
public interface Predicate {
/** * Evaluates this predicate on the given argument. * * @param t the input argument * @return {@code true} if the input argument matches the predicate, * otherwise {@code false} */ boolean test(T t); 二、Consumer：消费者，没有返回类型</description></item><item><title>JAVA8-Lambda表达式</title><link>https://willxwu.github.io/posts/java8/0ava8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/posts/java8/0ava8-lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>一、lambda语法 参数列表 lambda body部分
(o1,o2)-&amp;gt;o1.getWeight().compareTo(o2.getWeight());
二、 合法lamdba表达式 1、s -&amp;gt; s.length(); 或者 (String s) -&amp;gt; s.length();
2、apple -&amp;gt; apple.getColor().equals(&amp;ldquo;great&amp;rdquo;); 或者 (Apple apple) -&amp;gt; apple.getColor().equals(&amp;ldquo;great&amp;rdquo;);
3、(int x, int y) -&amp;gt; {
System.out.println(x);
System.out.println(y);
};
4、() -&amp;gt; 12;
5、()-{};
6、()-&amp;gt;“hello” 或者 ()-&amp;gt;{return &amp;ldquo;hello&amp;rdquo;}
三、语法总结 语法一、（参数列表） -&amp;gt; 表达式
语法二、（参数列表） -&amp;gt; {语句;}
有效lambda表达式 1、() -&amp;gt; {}
2、() -&amp;gt; &amp;ldquo;hello&amp;rdquo; 或者 ()-&amp;gt;{reurn &amp;ldquo;hello&amp;rdquo;}
3、(String str) -&amp;gt; {return &amp;ldquo;hello&amp;rdquo;} 或者 (String str) -&amp;gt; &amp;ldquo;hello&amp;rdquo;;
无效lambda表达式 (integer i)-&amp;gt;{return &amp;ldquo;错误示范&amp;rdquo;+i}</description></item></channel></rss>