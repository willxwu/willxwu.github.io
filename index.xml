<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>willxwu</title>
    <link>https://willxwu.github.io/</link>
    <description>Recent content on willxwu</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://willxwu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 数组</title>
      <link>https://willxwu.github.io/posts/shuzu/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://willxwu.github.io/posts/shuzu/</guid>
      <description>数组 数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。
数组定义格式：
数据类型[] 数组名(变量名) = new 数据类型[元素个数或数组长度]; 实例：
public class ArrayDemo01 { public static void main(String[] args) { int[] x = new int[100]; } } 注意：数组定长，一但定义长度为100，在使用时大小就是100了。不变量。
数组特点：定长、引用类型。
JVM java程序运行时，操作系统会给jvm虚拟机分配一块内存。JVM又会将这块内存，进行划分管理。
JVM内存划分：JVM对自己的内存进行了划分，分成5个区域。
1、寄存器：内存和CPU之间。 2、本地方法栈：JVM调用操作系统中的功能。 3、方法和数据共享：运行时其class文件，进入的地方。 4、方法栈：所有的方法运行的时候，进入的内存。 5、堆：存储的是容器和对象。 开发人员主要关心：方法和数据共享、方法栈、堆。
数组内存划分  首先，运行class文件，所以先进入方法区。 运行main方法，在方法栈中运行，但是main用不了那么多，所以方法栈中会分配一块给main方法是用。 执行数组，一个容器，所以JVM在堆内存，开空间，存储数组容器。 JVM会将该地址，给定义的数组变量arr（相当于arr引用了这个地址），所以数组是引用类型。 每次运行，JVM分配的地址是不同的。 当main方法运行完了，arr变量就没了，然后new int[3]也就没了 ，JVM垃圾回收机制，会自动帮我们回收，不用我们去处理了。  堆空间太大，怎么找到这个容器呢，所以每个数组，在内存中，都有自己的内存地址，也就是数组元素的首地址，第一个数据的地址。
注意：arr引用类型，保存的数据，实际上是内存中的地址。</description>
    </item>
    
    <item>
      <title>Java 流程控制语</title>
      <link>https://willxwu.github.io/posts/liucheng/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://willxwu.github.io/posts/liucheng/</guid>
      <description>JAVA流程控制语句是编程的基础知识，主要是为了更好的组织代码的执行流程，下面将详细介绍java流程控制语句。
一、选择结构if if条件语句分为三种格式。
  if语句
如果满足某种条件就执行。
if语句格式：
if（条件）{ 语句的执行体 } 条件：结果必须是布尔类型 1==1 true || false 执行体：当id条件为true的时候，执行大括号中的语句，否则什么都不做。
例如：
/** * if语句例子 */ public class IfDemo { public static void main(String[] args) { // TODO Auto-generated method stub  int i = 5; if(i==5) { System.out.println(&amp;#34;if中的条件是true&amp;#34;); i++; } System.out.println(&amp;#34;i=&amp;#34;+i); } } 注意：if()括号后面没有分号&amp;rdquo;;&amp;quot;
  if&amp;hellip;else语句
如果满足某种条件，就执行某种处理，否则就执行另一种处理。
if &amp;hellip; else语法格式：
if(条件){ if的执行体 }else{ else的执行体 } 当if中的条件为true时，执行if的执行体，为false时，执行else的执行体。
例如：
** * if ... else 语句 * */ public class IfElseDemo { public static void main(String[] args) { int i = 13; if(i%2==0) { System.</description>
    </item>
    
    <item>
      <title>Scanner和Random类</title>
      <link>https://willxwu.github.io/posts/scan-random/</link>
      <pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://willxwu.github.io/posts/scan-random/</guid>
      <description>Java的两个引用输入类型Scanner、Random类，Scanner用于接收键盘输入，Random用户产生随机数。引用类型也就是Sun公司为我们写好的类，我们直接使用就可以了。
1、引用数据类型的使用 1. 导入包：知道用的这个类，在jdk的那个目录那个文件下。 2. 创建对象：格式， 类 对象 = new 类型(); 3. 如何使用: 对象.类的方法()  引用数据类型的使用与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式，如下：
数据类型 变量名 = new 数据类型(); 每种引用数据类型都有其方法，我们可以调用该类型实例的方法。
变量名.方法名(); 2、Scanner类 Scanner类是引用数据类型的一种，我们可以使用该类来完成用户键盘录入，获取到录入的数据。
  导包
import java.util.Scanner;   创建对象实例
Scanner sc = new Scanner(System.in);   调用方法
//用来接收控制台录入的数字 int i = sc.nextInt(); //用来接收控制台录入的字符串 String s = sc.next();   Scanner使用Demo：
package java_learn_code; //导入包，指明类所在的的文件见，关键字import import java.util.Scanner; /** * 引用数据类型,使用步骤：1、导入包 。2、创建对象 3、通过对象调用方法 * @author Jole * Scanner的使用，所在目录java文件见-util文件夹 */ public class ScannerDemo { public static void main(String[] args) { System.</description>
    </item>
    
    <item>
      <title>Java 语法</title>
      <link>https://willxwu.github.io/posts/javayufa/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://willxwu.github.io/posts/javayufa/</guid>
      <description>1、jdk安装   安装目录:C:\Program Files\Java\jdk1.8.0_151
  JDK安装过程中提示安装JRE：C:\Program Files\Java\jre1.8.0_151
  验证是否安装成功：进入安装目录：cd C:\Program Files\Java\jdk1.8.0_151\bin，执行程序:java/javac，看到一堆关于java的帮助就是成功了。
  注意：安装目录不要出现中文。
2、JDK目录结构   bin：要存放的是java工具中常用命令如：java，javac等。
  db：安装java db的路径。
  include:一些平台特定的头文件。
  jre：运行java程序所需的jre环境。
  lib:JDK工具命令的实际存放位置。
例如：bin中javac命令，实际是lib中tools.jar\sun\tools\javac中的Main.class文件，而bin中的javac命令只是包装了这个类。 实际上bin中的大部分命令都是包装了tool.jar中的工具类。
  src.zip:主要存放java核心类库的源代码。
  其他文件:主要是一些说明性的文档。
  3、java运行过程  源文件：程序员编写的Java源文件，扩展名.java 编译：通过编译器编译源文件(.java文件)编译成字节码文件，扩展名.class 运行：使用解释器来运行字节码文件。  4、环境变量配置   变量名-变量值：
JAVA_HOME：C:\Program Files\Java\jdk1.8.0_151 Path：%JAVA_HOME%\bin\; CLASSPATH：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar   验证环境变量是否配置成功：
Win+R：打开运行程序输入cmd：打开dos窗口 javac/java：出现Java帮助信息。 javac -version：出现javac版本信息。 java -version：出现java版本信息。 出现上述信息，表示环境变量配置成功。   变量值说明：</description>
    </item>
    
    <item>
      <title>Html 学习记录</title>
      <link>https://willxwu.github.io/posts/html/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://willxwu.github.io/posts/html/</guid>
      <description>HTML 知识点总结 1、HTML基本格式 &amp;lt;html&amp;gt;	&amp;lt;head&amp;gt;	&amp;lt;title&amp;gt;HTML入门&amp;lt;/title&amp;gt;	&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; html：根标签，只有一个（网页所有内容都应该写在根标签里面）
head：子标签，用来设置头部内容
body：子标签，网页主体,所有要显示的内容放这里面
title：
  网页的标题标签，也就是网页显示名字。
  搜索引擎检索页面时，会首先检索titlte中的内容。
  元素：一个完整的标签&amp;lt;&amp;gt;&amp;lt;/&amp;gt;
  标签&amp;lt;&amp;gt;
  2、HTML后缀名   将编写好的文件保存为.html网页格式文件
  显示文件格式名
  3、HTML注释 &amp;lt;！-- 这是一个注释的格式，可以直接换行 继续写注释。 --&amp;gt;   注释中的内容，不会显示在页面。
  可以写注释来对代码进行描述，便于后期的维护。要养成良好的编写注释习惯。
  4、标签属性 &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;HTML入门&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello &amp;lt;font color=&amp;#34;red&amp;#34;&amp;gt;World&amp;lt;/font&amp;gt; ！&amp;lt;/h1&amp;gt; &amp;lt;!--这是一个注释，不会显示在网页中。 --&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   属性只能在开始标签中设置
  属性名 =&amp;quot;属性值&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>