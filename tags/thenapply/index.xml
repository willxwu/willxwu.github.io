<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>thenApply on Come Back</title><link>https://willxwu.github.io/tags/thenapply/</link><description>Recent content in thenApply on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/thenapply/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-CompletableFuture常用API API thenApply、handle、thenRun、thenAccept、thenCompose、thenCombine、thenAcceptBoth</title><link>https://willxwu.github.io/post/java8/21_java8-completablefuture%E5%B8%B8%E7%94%A8api/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/21_java8-completablefuture%E5%B8%B8%E7%94%A8api/</guid><description>JAVA8-CompletableFuture常用API：thenApply、handle、thenRun、thenAccept、thenCompose、thenCombine、thenAcceptBoth 1、thenApply package com.example.study.java8.completableFutures.api; import java.util.Optional; import java.util.concurrent.CompletableFuture; /** * CompletableFuture常用API: thenApply、handle */ public class CompletableFutureAtion1 { public static void main(String[] args) throws InterruptedException { //API-- 1、thenApply //模拟其它 异步 逻辑操作然后返回结果1 CompletableFuture.supplyAsync(() -&amp;gt; 1) .thenApply(i -&amp;gt; Integer.sum(i, 10)) //thenApply 将结果加10 .whenComplete((v, t) -&amp;gt; Optional.ofNullable(v).ifPresent(System.out::println)); //同步执行打印结果 // .whenCompleteAsync() //异步操作，可以将结果在进行其它逻辑异步操作 //whenComplete VS whenCompleteAsync //为了防止主线程结束后，守护线程被关闭，模拟修改10000毫秒 Thread.sleep(10000); } } 输出结果：
11 对比 whenComplete VS whenCompleteAsync：whenCompleteAsync异步操作，可以将结果在进行其它逻辑异步操作。
2、handle package com.example.study.java8.completableFutures.api; import java.util.Optional; import java.util.concurrent.CompletableFuture; /** * CompletableFuture常用API: thenApply、handle */ public class CompletableFutureAtion1 { public static void main(String[] args) throws InterruptedException { //API- 2、handle CompletableFuture.</description></item></channel></rss>