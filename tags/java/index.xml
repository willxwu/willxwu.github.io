<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>java on 朱言蹊</title><link>https://yanxizhu.com/tags/java/</link><description>Recent content in java on 朱言蹊</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 16 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://yanxizhu.com/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>JDK8新特性</title><link>https://yanxizhu.com/posts/jdk8/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/jdk8/</guid><description>一、lambda 多线程实现 /** * lambda多线程实现 */ @Test public void runnT(){ new Thread( ()-&amp;gt;{ System.out.println(&amp;#34;lambda实现多线程啦&amp;#34;); } ).start(); } 2、集合遍历 public List&amp;lt;User&amp;gt; createList(){ List&amp;lt;User&amp;gt; users = new ArrayList&amp;lt;User&amp;gt;(); User user1 = new User(); user1.setId(UUID.randomUUID().toString()); user1.setName(&amp;#34;李亦非&amp;#34;); user1.setAge(20); user1.setSex(Sex.WOMAN); User user2 = new User(); user2.setId(UUID.randomUUID().toString()); user2.setName(&amp;#34;张三&amp;#34;); user2.setAge(20); user2.setSex(Sex.MAN); User user3 = new User(); user3.setId(UUID.randomUUID().toString()); user3.setName(&amp;#34;刘三姐&amp;#34;); user3.setAge(25); user3.setSex(Sex.WOMAN); users.add(user1); users.add(user2); users.add(user3); return users; } @Test public void lambTest(){ List&amp;lt;User&amp;gt; users = createList(); Stream&amp;lt;User&amp;gt; userStream = users.</description></item><item><title>模块化开发</title><link>https://yanxizhu.com/posts/model/</link><pubDate>Sat, 19 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/model/</guid><description>1、新建父工程 新建maven项目，选择为pom类型的父工程。
2、在父工程基础上分别新建entity、dao、server子工程模块。 新建maven mondel模块，选择jar类型的子工程。
3、在父工程上新建子工程web模块， 新建maven model模块，选择war类型web子项目。
4、有模块依赖引用时，先将父模块和需要的模块一起instal打包发布到本地仓库。然后在
需要的子模块中引入子模块坐标。
5、注意依赖范围对依赖传递造成的影响.
6、最后将web项目package打成war就可以了。里面就包含了各模块发布到本地的jar包了。
注意：在同一个工作空间，各模块项目打开时看到引入的子模块是一个工程文件夹，关闭子 模块后就会看到变成jar了。
注意jar冲突的解决办法，见上一篇。</description></item><item><title>maven</title><link>https://yanxizhu.com/posts/maven/</link><pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/maven/</guid><description>使用maven的好处： 大型项目的好处，建立一个父项目，各组或部门可以模块开发，不用拉取整个项目进行开发。
创建maven项目说明： maven项目结构： Maven常用命令： 1、一键构建项目命令:
mvn tomcat:run
注意：该命令使用的是tomcat插件进行运行的，不需要单独安装配置tomcat。
2、清理编译好后的文件（target文件夹及里面所有的文件）：
mvn clean
3、编译并运行了main里面的代码（只编译main主文件里面的java代码，test里面的java代码不编译不编译）：
mvn compile
4、编译并运行了test里面的代码(只编译test里面的java代码，main里面的java代码不编译)：
mvn test
5、打包，并将包放到tager文件夹下面。打成war或jar名称由POM文件里面的这3个标签值决定： 例如打包成这个名字:HelloWorld-0.0.2-SNAPASHOT.war HelloWorld&amp;ndash;打成包的名字 0.0.2-SNAPASHOT&amp;ndash;版本 war&amp;ndash;什么类型的包
mvn package
6、把项目发布到本地仓库
mvn install
同时运行了mvn compile、mvn test、mvn package、mvn install、mvn deploy命令。
7、jar或war包发布到私服上
mvn deploy
maven生命周期有三种： 1、clean生命周期：clean 2、default生命周期：compile、test、package、install、deploy命令 3、site生命周期:site(生成项目的文档说明)
不同的生命周期，命令可以同时运行。
maven依赖范围： complie
provided:编译（complie）时需要、测试时也需要、运行时不需要，打包时不需要
runtime：例如：数据库驱动包
test：编译时不需要，测试时需要、运行时不需要
maven添加插件： 常见问题： 出现该提示表示jdk安装有问题，重新安装即可。
maven整体模型也就是上面说的内容： 版本冲突解决原则：
1、路径近者原则（比如2个坐标中有不同版本的相同的jar包，自己在加入要使用的版本的这个名称的坐标）
2、第一声明有限原则（比如2个坐标，谁排在pom.xml文件的前面就用谁的）
3、排除原则.（将名字和组织加入到exclusion中） 4、版本锁定 谁先传递锁定的版本，就用这个。 可以同时锁定多个版本
锁定版本里面使用${sprint.verion}注意上面锁定了，坐标里面的version就没有了，可以去除，就算不去除也没有了。</description></item><item><title>JAVA反射</title><link>https://yanxizhu.com/posts/class/</link><pubDate>Thu, 17 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/class/</guid><description>获取反射对象的3种方法。通过反射创建对象、通过反射获取有参、无参、公有、私有构造方法。通过反射获取公有、私有成员变量并修改之。通过反射获取成员方法，并调用。通过反射泛型擦除，存值。通过读取配置文件运行反射方法。
package learn.javase.mycalss; import java.lang.reflect.Constructor; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.util.ArrayList; import java.util.List; /** * 一、获取class的三种方式 * * 二、获取公有构造方法 * 注意： * 1、被反射的类必须是有空参数的构造器 * 2、构造方法必须是public的才能反射获取 * * 三、获取所有构造方法 * * @author Jole * */ public class ClassDemo { public static void main(String[] args) throws Exception{ // 方式1、.getClass() Person p = new Person(); Class c = p.getClass(); System.out.println(c); //方式2、类名.class Class c3 = Person.class; System.out.println(c3); //方式3、Class.forName(类全名); Class c2 = Class.</description></item><item><title>Socket编程TCP协议实现多线程文件上传</title><link>https://yanxizhu.com/posts/tcp/</link><pubDate>Wed, 16 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/tcp/</guid><description>通过Java Socket编程，实现多线程文件上传。主要涉及ServerScoket服务端、Socket客户端、IO流操作、多线线程。
客户端：
package learn.javase.Update; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.Socket; /** * 利用TCP的Socket\ServerSocket客户端向服务器上传文件 * 客户端 * @author Jole * */ public class UpClent { public static void main(String[] args) throws IOException{ Socket socket = new Socket(&amp;#34;127.0.0.1&amp;#34;,8888); OutputStream out = socket.getOutputStream(); //读取本地文件，并通过out输出流，发送给服务端 File file = new File(&amp;#34;J:&amp;#34;+File.separator+&amp;#34;wxhandbook-master.zip&amp;#34;); FileInputStream in = new FileInputStream(file); byte[] data = new byte[1024]; int len =0; while((len=in.read(data))!=-1) { out.write(data, 0, len); } socket.</description></item><item><title>Socket编程UDP实现聊天</title><link>https://yanxizhu.com/posts/udp/</link><pubDate>Tue, 15 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/udp/</guid><description>通过Socket网络编程，UDP实现简单聊天。主要涉及DatagramSocket进行数据传输、DatagramPacket进行数据包封装，2个类。
发送端:
package learn.javase.chat; import java.net.DatagramPacket; import java.net.DatagramSocket; import java.net.InetAddress; import java.util.Scanner; /** * 控制台输入；实现聊天。 * 发送方 * @author Jole * */ public class UdpSend { public static void main(String[] args) throws Exception{ Scanner scan = new Scanner(System.in); InetAddress ia = InetAddress.getByName(&amp;#34;192.168.1.4&amp;#34;); DatagramSocket socket = new DatagramSocket(); while(true) { String chatInfo = scan.nextLine(); byte[] info = chatInfo.getBytes(); DatagramPacket pack = new DatagramPacket(info, info.length, ia, 6000); socket.send(pack); } } } 接收端：</description></item><item><title>dbcp数据库连接池</title><link>https://yanxizhu.com/posts/dbcp/</link><pubDate>Mon, 14 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/dbcp/</guid><description>使用dbcp连接池，进行数据库的CRUD，涉及jar包：commons-dbcp2-2.8.0.jar（连接池包）、commons-pool2-2.9.0.jar（dbcp依赖该包）、commons-logging-1.2.jar（接口日志包）、mysql-connector-java-5.1.37-bin.jar（数据库连接驱动）、commons-dbutils-1.7.jar（基本CRUD操作）
DbcpUtils数据库连接池配置：
package learn.javase.dbcppool; import org.apache.commons.dbcp2.BasicDataSource; /** * 利用DBCP链接数据库 * @author Jole * */ public class DbcpUtils { private static BasicDataSource dataSource = new BasicDataSource(); static { //必配参数 dataSource.setDriverClassName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); dataSource.setUrl(&amp;#34;jdbc:mysql://localhost:3306/test&amp;#34;); dataSource.setUsername(&amp;#34;root&amp;#34;); dataSource.setPassword(&amp;#34;11111&amp;#34;); //可配参数 dataSource.setInitialSize(10); dataSource.setMaxIdle(8); dataSource.setMinIdle(2); } public static BasicDataSource getConnecton() { return dataSource; } } 利用DbcpUtils进行数据库的CRUD操作：
package learn.javase.dbcppool; import java.sql.SQLException; import java.util.List; import org.apache.commons.dbutils.QueryRunner; import org.apache.commons.dbutils.handlers.ArrayListHandler; /** * 利用DBCP数据库连接池增加、查询 * @author Jole * */ public class DbcpUtilsDemo { private static QueryRunner qr = new QueryRunner(DbcpUtils.</description></item><item><title>commons-dbutils</title><link>https://yanxizhu.com/posts/commons-dbutils/</link><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/commons-dbutils/</guid><description>&lt;p>通过读取properties获取链接数据库信息，利用apache开源数据库操作工具包DBUtils进行数据库CRUD操作。&lt;/p></description></item><item><title>原生JDBC操作</title><link>https://yanxizhu.com/posts/jdbc/</link><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/jdbc/</guid><description>利用JAVA原生JDBC进行数据库的CRUD操作。简单记录一下。
package learn.javase.jdbc; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.SQLException; import java.util.Scanner; import java.sql.PreparedStatement; import java.sql.Connection; /** * jdbc使用 * @author Jole * */ public class MyDriver { public static void main(String[] args) throws ClassNotFoundException, SQLException{ //1.注册驱动 Class.forName(&amp;#34;com.mysql.jdbc.Driver&amp;#34;); //2.获取数据库连接对象 String url = &amp;#34;jdbc:mysql://localhost:3306/test&amp;#34;; String user = &amp;#34;root&amp;#34;; String password = &amp;#34;111111&amp;#34;; Connection conn = DriverManager.getConnection(url, user, password); // System.out.println(conn); //3.获取连接平台的执行对象 // Statement st = conn.createStatement(); //4.执行sql,返回行数 //executeUpdate():增删改 //String sql = &amp;#34;insert into user(user_id,user_name,user_password) values(&amp;#39;1320442338427273213&amp;#39;,&amp;#39;zss&amp;#39;,&amp;#39;12&amp;#39;)&amp;#34;; //int n = st.</description></item><item><title>Map循环方式</title><link>https://yanxizhu.com/posts/map/</link><pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/map/</guid><description>Map集合的2种循环方式。一种是通过map.entrySet()。
另一种是map.keySet()。 所有的集合都可以通过迭代器Iterator，进行遍历。
package learn.javase; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry; import java.util.Set; /** * 重要 * 遍历map的两种方式map.entrySet() map.keySet() * @author Jole * */ public class MapDemo { public static void main(String[] args) { Map&amp;lt;Integer ,String &amp;gt; map = new HashMap(); map.put(1, &amp;#34;111&amp;#34;); map.put(2, &amp;#34;2222&amp;#34;); //方式一 entrySet() Set&amp;lt;Map.Entry &amp;lt;Integer, String&amp;gt;&amp;gt; sets = map.entrySet(); //获取值1，通过for for(Map.Entry &amp;lt;Integer, String&amp;gt; entry : sets) { System.out.println(&amp;#34;ssss:&amp;#34;+entry); System.out.println(&amp;#34;key:&amp;#34;+entry.getKey()+&amp;#34;value:&amp;#34;+entry.getValue()); } //获取值2，通过iterator Iterator &amp;lt;Map.</description></item><item><title>nexus私服搭建</title><link>https://yanxizhu.com/posts/nexus/</link><pubDate>Fri, 11 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/nexus/</guid><description>&lt;p>第一步骤：下载nexus私服软件nexus-2.12.0-01-bundle&lt;/p>
&lt;p>第二不：安装&lt;/p>
&lt;p>进入nexus解压目录进入到bin目录:&lt;/p>
&lt;p>1、安装:执行nexus.bat install&lt;/p>
&lt;p>2、启动:nexus.bat start&lt;/p>
&lt;p>第三步：查看访问路径&lt;/p>
&lt;p>进入config目录，打开nexus.properties即可看到端口号，项目命令nexus。&lt;/p>
&lt;p>第四步：浏览器打开http://127.0.0.1:8081/nexus/&lt;/p>
&lt;p>默认登录账号:admin/admin123&lt;/p></description></item><item><title>JAVA异常</title><link>https://yanxizhu.com/posts/exception/</link><pubDate>Thu, 10 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/exception/</guid><description>异常 Throwable Throwable类是所有错误跟异常类的超类.
Exception Exception异常类及其子类都是继承自Throwable类，用来表示java中可能出现的异常，并且合理的处理这些异常。
RuntimeException RuntimeException类是运行异常类，继承自Exception类，它以及它的子类只能在运行过程中存在，当出现时，只能修改源代码，此异常无法处理。
特点：
　方法中抛出运行时期异常,方法定义中无需throws声明,调用者也无需处理此异常
　运行时期异常一旦发生,需要程序人员修改源代码
Error Error类是与Exception的平级的类，用来表示Java中存在的严重错误，只能通过修改代码来解决问题。
区别 Exception与Error区别：
Exception是指程序在编译或者运行时出现的某种异常问题，我们可以对异常进行某种处理，如果不处理异常的话，程序将会停止运行。
Error是指程序在运行时出现的严重问题，无法处理，程序将会停止运行，Error通常都是系统级别的问题，都是虚拟机jvm所在系统发生的，只能通过修改源代码解决问题。
异常的产生 运行或编译时产生异常。 创建异常类的对象。 声明异常类。 将异常类对象传给调用者（main()方法）处理。 调用者无法处理，再将异常类对象传给jvm虚拟机。 jvm虚拟机将异常类的信息（名称、详细信息、异常所处的位置）打印在屏幕上，并且停止程序的运行。 抛出异常throw 在java中，提供了一个throw关键字，用来抛出一个指定的异常。
使用方法：
1.创建一个异常对象。封装一些提示信息
2.将这个异常告知调用者
使用格式：throw new 异常类名（参数）；
声明异常throws 声明异常格式：
修饰符 返回值类型 方法名称 （参数）throws 异常1名称，异常2名称{
}
捕获异常try&amp;hellip;catch&amp;hellip;finally
捕获异常：Java中对异常有针对性的语句进行捕获，可以对出现的异常进行指定方式的处理
语句格式：
ry { //需要被检测的语句。 }catch(异常类 变量) { //参数。 //异常的处理语句。 }finally { //一定会被执行的语句。 } try：该代码块中编写可能产生异常的代码。
catch：用来进行某种异常的捕获，实现对捕获到的异常进行处理。
finally：有一些特定的代码无论异常是否发生，都需要执行。另外，因为异常会引发程序跳转，导致有些语句执行不到。而finally就是解决这个问题的，在finally代码块中存放的代码都是一定会被执行的。
捕获异常的组合方式 try catch finally组合：检测异常，并传递给catch处理，并在finally中进行资源释放。 try catch组合: 对代码进行异常检测，并对检测的异常传递给catch处理。对异常进行捕获处理。 一个try 多个catch组合: 对代码进行异常检测，并对检测的异常传递给catch处理。对每种异常信息进行不同的捕获处理。注意:这种异常处理方式，要求多个catch中的异常不能相同，并且若catch中的多个异常之间有子父类异常的关系，那么子类异常要求在上面的catch处理，父类异常在下面的catch处理。 try finally 组合: 对代码进行异常检测，检测到异常后因为没有catch，所以一样会被默认jvm抛出。异常是没有捕获处理的。但是功能所开启资源需要进行关闭，所有finally。只为关闭资源。 package learn.</description></item><item><title>JAVA IO流操作</title><link>https://yanxizhu.com/posts/io/</link><pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/io/</guid><description>将自己看作为程序，将数据输出到文件中，称之为输出。 从文件读取数据到程序，称为输出。
JAVA流操作主要分为字节流、字符流。
字节流鼻祖：InputStream\OutpuStream
字符流鼻祖:Reader\Writer
File 1、File常用方法 package learn.javase; import java.io.File; /** * File常用操作 * @author Jole * */ public class FileDemo01 { public static void main(String[] args) { File file = new File(&amp;#34;H://&amp;#34;); //此抽象路径名表示的文件或目录的名称；如果路径名的名称序列为空，则返回空字符串 System.out.println(file.getName()); //返回文件大小 System.out.println(file.length()); //返回绝对路径 System.out.println(file.getAbsolutePath()); //绝对路径名 System.out.println(file.getAbsoluteFile()); //父目录 System.out.println(file.getParentFile()); //是否存在 System.out.println(file.exists()); //是否是目录 System.out.println(file.isDirectory()); //返回路径下的文件或文件夹 System.out.println(file.list()); for(String path : file.list()) { //获取路径 System.out.println(path); } //可用的文件系统根 System.out.println(&amp;#34;listRoots:&amp;#34;+file.listRoots()); for(File f : file.</description></item><item><title>JAVA多线程</title><link>https://yanxizhu.com/posts/thread/</link><pubDate>Tue, 08 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/thread/</guid><description>进程：CPU为每个应用程序分配的独立空间，一个进程可能有多个线程。进程为线程中的摸个执行任务程序，多个进程之间可以进行共享数据。而JAVA的线程则是由JVM进程分配的，main方法所在线程，则成为主线程。
〇、线程状态 正常情况线程执行步骤：新建-》运行-》死亡
当CPU资源不够时，CUP分配给各个线程的资源可能不同(貌似有点像是线程在抢资源，实际是CPU分配资源给每个线程)。 因此就会出现线程的阻塞、休眠、等待3个状态。其中阻塞状态，当cpu资源够时，阻塞状态的线程可能恢复到运行状态，而休眠、等待的线程也可能进入运行状态。休眠、等待状态可能转换成阻塞状态，但是阻塞状态不会变成休眠、等待状态。
一、多线程的实现 0、线程常用方法 package learn.javase.threads; /** * 继承Thread创建线程，设置线程名称、获取线程名称 * @author Jole * */ public class ThreadDemo01 { public static void main(String[] args) { MyThreadsDemo mt = new MyThreadsDemo(); mt.setName(&amp;#34;Hi&amp;#34;); mt.start(); //获取当前线程 Thread t = Thread.currentThread(); System.out.println(t.getName()); } } 线程实现方式主测试类：
package learn.javase.threads; public class MyThreadsDemo extends Thread{ public MyThreadsDemo() { super(&amp;#34;Google&amp;#34;); } public void run() { for(int i=0;i&amp;lt;5;i++) { try { Thread.sleep(1000); System.out.println(i); }catch(Exception e) { System.</description></item><item><title>Scanner、Random类</title><link>https://yanxizhu.com/posts/two/</link><pubDate>Mon, 07 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/two/</guid><description>Java的两个引用输入类型Scanner、Random类，Scanner用于接收键盘输入，Random用户产生随机数。引用类型也就是Sun公司为我们写好的类，我们直接使用就可以了。
1、引用数据类型的使用 1. 导入包：知道用的这个类，在jdk的那个目录那个文件下。
2. 创建对象：格式， 类 对象 = new 类型();
3. 如何使用: 对象.类的方法()
引用数据类型的使用与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式，如下：
数据类型 变量名 = new 数据类型(); 每种引用数据类型都有其方法，我们可以调用该类型实例的方法。
变量名.方法名(); 2、Scanner类 Scanner类是引用数据类型的一种，我们可以使用该类来完成用户键盘录入，获取到录入的数据。
导包
import java.util.Scanner; 创建对象实例
Scanner sc = new Scanner(System.in); 调用方法
//用来接收控制台录入的数字 int i = sc.nextInt(); //用来接收控制台录入的字符串 String s = sc.next(); Scanner使用Demo：
package java_learn_code; //导入包，指明类所在的的文件见，关键字import import java.util.Scanner; /** * 引用数据类型,使用步骤：1、导入包 。2、创建对象 3、通过对象调用方法 * @author Jole * Scanner的使用，所在目录java文件见-util文件夹 */ public class ScannerDemo { public static void main(String[] args) { System.</description></item><item><title>JAVA数组</title><link>https://yanxizhu.com/posts/array/</link><pubDate>Sun, 06 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/array/</guid><description>JAVA数组重点掌握知识，以后肯定会用到的，可以了解一下底层原理。数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。
数组 数组定义格式：
数据类型[] 数组名(变量名) = new 数据类型[元素个数或数组长度]; 实例：
public class ArrayDemo01 { public static void main(String[] args) { int[] x = new int[100]; } } 注意：数组定长，一但定义长度为100，在使用时大小就是100了。不变量。
数组特点：定长、引用类型。
JVM java程序运行时，操作系统会给jvm虚拟机分配一块内存。JVM又会将这块内存，进行划分管理。
JVM内存划分：JVM对自己的内存进行了划分，分成5个区域。
1、寄存器：内存和CPU之间。 2、本地方法栈：JVM调用操作系统中的功能。 3、方法和数据共享：运行时其class文件，进入的地方。 4、方法栈：所有的方法运行的时候，进入的内存。 5、堆：存储的是容器和对象。 开发人员主要关心：方法和数据共享、方法栈、堆。
数组内存划分 首先，运行class文件，所以先进入方法区。 运行main方法，在方法栈中运行，但是main用不了那么多，所以方法栈中会分配一块给main方法是用。 执行数组，一个容器，所以JVM在堆内存，开空间，存储数组容器。 JVM会将该地址，给定义的数组变量arr（相当于arr引用了这个地址），所以数组是引用类型。 每次运行，JVM分配的地址是不同的。 当main方法运行完了，arr变量就没了，然后new int[3]也就没了 ，JVM垃圾回收机制，会自动帮我们回收，不用我们去处理了。 堆空间太大，怎么找到这个容器呢，所以每个数组，在内存中，都有自己的内存地址，也就是数组元素的首地址，第一个数据的地址。
注意：arr引用类型，保存的数据，实际上是内存中的地址。
数组元素的访问 数组是一个容器，存储到数组中的每个元素，都有自己的自动编号/下标（专业名词：索引）。
访问数组存储的元素，必须依赖索引。
访问公式：数组名[索引]
public class ArrayDemo02 { public static void main(String[] args) { int[] arr = new int[3]; System.out.println(arr[0]); System.</description></item><item><title>JAVA流程控制语句</title><link>https://yanxizhu.com/posts/javase2/</link><pubDate>Sat, 05 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/javase2/</guid><description>JAVA流程控制语句JAVA中非常重要的基础知识点务必完全理解掌握，总结记录一下之前学习笔记。JAVA流程控制语句是编程的基础知识，主要是为了更好的组织代码的执行流程，下面将详细介绍java流程控制语句。
一、选择结构if if条件语句分为三种格式。
if语句
如果满足某种条件就执行。
if语句格式：
if（条件）{ 语句的执行体 } 条件：结果必须是布尔类型 1==1 true || false 执行体：当id条件为true的时候，执行大括号中的语句，否则什么都不做。
例如：
/** * if语句例子 */ public class IfDemo { public static void main(String[] args) { // TODO Auto-generated method stub int i = 5; if(i==5) { System.out.println(&amp;#34;if中的条件是true&amp;#34;); i++; } System.out.println(&amp;#34;i=&amp;#34;+i); } } 注意：if()括号后面没有分号&amp;quot;;&amp;quot;
if&amp;hellip;else语句
如果满足某种条件，就执行某种处理，否则就执行另一种处理。
if &amp;hellip; else语法格式：
if(条件){ if的执行体 }else{ else的执行体 } 当if中的条件为true时，执行if的执行体，为false时，执行else的执行体。
例如：
** * if ... else 语句 * */ public class IfElseDemo { public static void main(String[] args) { int i = 13; if(i%2==0) { System.</description></item><item><title>JAVA基础语法</title><link>https://yanxizhu.com/posts/javase1/</link><pubDate>Fri, 04 Apr 2014 00:00:00 +0000</pubDate><guid>https://yanxizhu.com/posts/javase1/</guid><description>总结一下JAVA基础知识如：注释、关键字、标识符、数据类型、变量、数据类型转换等基础语法。初学者可参考看看。
1、程序注释 单行注释：
//xxxxxx 多行注释：
/* xxxxxx */ 文档注释：
/** xxxxxx */ 2、关键字 关键字：是被Java语言赋予特殊含义，具有专门用途的单词。所有的Java关键词，都是小写。关键词比较多，不用刻意去背，以后用多了自己就记住了。
3、标识符 Java中除了关键字以外基本上都是标识符。我们自己定义的词，比如自己定义的HelloWorld。
标志符命名规则：
标志符组成：字母、数字、下划线、美元符号
字母：a~z、A~Z
数字：0-9 下划线：_ 美元符号：$
注意：不能数字开头，不能是关键字，严格区分大小写，不限制长度起名时，尽量达到见名知意。
4、数据类型 数据类型分为基本数据类型和引用数据类型。
A、基本数据类型：4类8种（4类展开后共8种基本类型），基本数据类型是JAVA中内置的类型。
第一类：整型
字节
byte 1个字节 二进制位数：8 -128～127
短整型
short 2个字节 二进制位数：16
包装类：java.lang.Short 最小值：Short.MIN_VALUE=-32768 （-2的15此方）
最大值：Short.MAX_VALUE=32767 （2的15次方-1）
整型
int 4个字节 二进制位数：32
包装类：java.lang.Integer
最小值：Integer.MIN_VALUE= -2147483648 （-2的31次方）
最大值：Integer.MAX_VALUE= 2147483647 （2的31次方-1）
长整型
long 8个字节 二进制位数：64
包装类：java.</description></item></channel></rss>