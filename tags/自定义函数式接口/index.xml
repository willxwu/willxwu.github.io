<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>自定义函数式接口, on Come Back</title><link>https://willxwu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</link><description>Recent content in 自定义函数式接口, on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Fri, 29 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-Lambda方法推导详细解析</title><link>https://willxwu.github.io/post/java8/29_lambda%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/29_lambda%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</guid><description>Lambda方法推导详细解析 什么情况下可以进行方法推导? 类的方法（静态方法）
对象的方法
构造方法
自定义函数式接口
范例： package com.example.study.java8.InterfaceFunction; import java.util.Arrays; import java.util.Comparator; import java.util.List; import java.util.function.BiFunction; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Supplier; /** * 方法推导 * 什么情况下可以进行方法推导： * 1、类的方法（静态方法） * 2、对象的方法 * 3、构造方法 */ public class MethodReferenceUsageDemoOne { public static void main(String[] args) { //方法推导，范例一：类的方法 //原始写法 Consumer&amp;lt;String&amp;gt; consumer = s-&amp;gt; System.out.println(s); genericityConsumer(consumer, &amp;#34;hello&amp;#34;); //1、进化一 genericityConsumer(s-&amp;gt;System.out.println(s), &amp;#34;world&amp;#34;); //2、进化二 genericityConsumer(System.out::println, &amp;#34;nice&amp;#34;); System.out.println(&amp;#34;===========================&amp;#34;); //方法推导，范例二：类的方法 List&amp;lt;Apple&amp;gt; list = Arrays.asList(new Apple(&amp;#34;red&amp;#34;, 10) , new Apple(&amp;#34;red&amp;#34;, 60) , new Apple(&amp;#34;blue&amp;#34;, 40) , new Apple(&amp;#34;black&amp;#34;, 30) , new Apple(&amp;#34;green&amp;#34;, 80) , new Apple(&amp;#34;blue&amp;#34;, 90) , new Apple(&amp;#34;green&amp;#34;, 60) , new Apple(&amp;#34;green&amp;#34;, 50) , new Apple(&amp;#34;red&amp;#34;, 20)); System.</description></item></channel></rss>