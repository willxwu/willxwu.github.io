<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>duration on Come Back</title><link>https://willxwu.github.io/tags/duration/</link><description>Recent content in duration on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Tue, 26 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/duration/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-CompletableFuture基本用法</title><link>https://willxwu.github.io/post/java8/26_completablefuture%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/26_completablefuture%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid><description>JAVA8-CompletableFuture基本用法 针对&amp;lt;实现一个异步基于事件回调的Future程序&amp;gt; 用CompletableFuture进行改进。
代码示例：
package com.example.study.java8.completableFutures; import java.util.Optional; import java.util.Random; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; /** * CompletableFuture 基本用法 */ public class CompletableFutureInAction1 { private final static Random RANDOM = new Random(System.currentTimeMillis()); public static void main(String[] args) throws ExecutionException, InterruptedException { //实际开发中，一般不直接new，而是使用工厂创建 // CompletableFuture&amp;lt;Void&amp;gt; voidCompletableFuture = CompletableFuture.runAsync(); CompletableFuture&amp;lt;Double&amp;gt; completableFuture = new CompletableFuture&amp;lt;&amp;gt;(); new Thread(()-&amp;gt;{ double value = get(); completableFuture.complete(value); }).start(); //不会阻塞程序执行 System.out.println(&amp;#34;===========no====block====..&amp;#34;); //1、后面获取程序执行结果 // Optional.ofNullable(completableFuture.get()).ifPresent(System.out::println); //2、执行完后，通过回调自动返回结果 completableFuture.whenComplete((v,t)-&amp;gt;{ Optional.ofNullable(v).ifPresent(System.out::println); Optional.ofNullable(t).ifPresent(x-&amp;gt;x.printStackTrace()); }); } private static double get(){ try { Thread.</description></item><item><title>JAVA8-completableFuture 异步编排</title><link>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</guid><description>通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，在业务复杂情况下，一个异步调用可能会依赖于另一个异步调用的执行结果。因此我们可以使用completableFuture 异步编排方案。
比如：一个业务场景，需要同时获取多个数据，如果同步线程挨个执行，则需要时间为所有线程执行时间的总和。
如果我们使用异步线程执行，所需时间则为耗时最长那个异步线程的执行时间。
如果多个异常线程之间还存在依赖关系，比如线程3需要线程1的执行结果，线程6依赖线程3、线程2，那这个问题怎么解决呢。那就可以使用completableFuture 异步编排方案实现。
注意：completableFuture 是jdk1.8之后添加的一个功能。
CompletableFuture接口:
public class CompletableFuture&amp;lt;T&amp;gt; implements Future&amp;lt;T&amp;gt;, CompletionStage&amp;lt;T&amp;gt; { public interface Future&amp;lt;V&amp;gt; { 以前用到的FutureTask就是用到的Future可以得到返回结果
public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; { public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; { /** * Sets this Future to the result of its computation * unless it has been cancelled. */ void run(); } Future可以得到返回结果
CompletableFuture随便一个方法，都接受一个Function
public &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; applyToEither( CompletionStage&amp;lt;? extends T&amp;gt; other, Function&amp;lt;? super T, U&amp;gt; fn) { return orApplyStage(null, other, fn); } @FunctionalInterface public interface Function&amp;lt;T, R&amp;gt; { Function是一个@FunctionalInterface，所以对Lambda使用要熟悉。</description></item><item><title>JAVA8-CompletableFuture LocalDate, LocalTime, Instant, Duration, Period</title><link>https://willxwu.github.io/post/java8/24_java8-date-api-localdate-localtime-instant-duration-period/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/24_java8-date-api-localdate-localtime-instant-duration-period/</guid><description>JAVA8-Date and Time API： LocalDate, LocalTime, Instant, Duration, Period 旧API问题 1、代码不清晰，一下看不出要转换的日期。
**2、Date日期中还包含了时间 **
3、多线程情况下会报错。
代码重现：
package com.example.study.java8.datetime; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class DateTest { public static void main(String[] args) throws ParseException { //122格林威治时间 11月 23日期 //问题：不能清晰表示日期 Date date = new Date(122, 11, 23); System.out.println(date); //多线程情况下会出现一些问题： //30个线程，每个线程下循环100次，执行时间格式转换。 SimpleDateFormat sdf = new SimpleDateFormat(&amp;#34;yyyyMMdd&amp;#34;); for (int i = 0; i &amp;lt; 30; i++) { new Thread(() -&amp;gt; { for (int j = 0; j &amp;lt; 100; j++) { Date parseDate = null; try { parseDate = sdf.</description></item><item><title>JVA8-自定义Spliterator</title><link>https://willxwu.github.io/post/java8/16_jva8-%E8%87%AA%E5%AE%9A%E4%B9%89spliterator/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/16_jva8-%E8%87%AA%E5%AE%9A%E4%B9%89spliterator/</guid><description>JVA8-自定义Spliterator 需求说明：将一段话按换行符分割成多个执行，并输出。
package com.example.study.java8.forkjoin; import java.util.Objects; import java.util.Spliterator; import java.util.function.Consumer; import java.util.stream.Stream; import java.util.stream.StreamSupport; /** * 自定义Spliterator * 实列：将一段话按换行符分割成多个执行，并输出。 */ public class SpliteratorInAction { //需要处理的数据 private static String text = &amp;#34;The tryAdvance method feeds the Consumer with the Character in the String at the current index\n&amp;#34; + &amp;#34;position and increments this position. The Consumer passed as argument is an internal Java class\n&amp;#34; + &amp;#34;forwarding the consumed Character to the set of functions that have to be applied to it while\n&amp;#34; + &amp;#34;traversing the stream, which in this case is only a reducing function, namely, the accumulate method\n&amp;#34; + &amp;#34;of the WordCounter class.</description></item><item><title>JAVA8-Fork Join</title><link>https://willxwu.github.io/post/java8/15_java8-fork-join/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/15_java8-fork-join/</guid><description>JAVA8-Fork Join Fork：将一个任务拆分成多个线程执行。 Join：将每个现场结果join，最后得到结果。
范例：求数组总和 前置数据：
public static int[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 1、原始实现方式 public static int calc() { int result = 0; for (int i = 0; i &amp;lt; data.length; i++) { result += data[i]; } return result; } 原始实现方式调用：
System.out.println(&amp;#34;result=&amp;gt; &amp;#34; + calc()); 2、RecursiveTask实现 RecursiveTask有返回值。
package com.example.study.java8.forkjoin; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import java.util.concurrent.RecursiveTask; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class AccumulatorRecursiveTask extends RecursiveTask&amp;lt;Integer&amp;gt; { private int start; private int end; private int[] data; private int LIMIT=3; public AccumulatorRecursiveTask(int start, int end, int[] data) { this.</description></item><item><title>JAVA8 Stream parallel 并行执行</title><link>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</guid><description>Stream parallel 并行执行 范例：求1~100000000的和，执行10次，看时间效率。 代码 package com.example.study.java8.collector; import java.util.function.Function; import java.util.stream.LongStream; import java.util.stream.Stream; /** * Stream parallel并行执行 * 实列：求10次，1~100000000的和，看时间效率。 */ public class ParallelProcessing { public static void main(String[] args) { //获取电脑CPU核数 System.out.println(&amp;#34;当前电脑CPU核数= &amp;#34; + Runtime.getRuntime().availableProcessors()); System.out.println(&amp;#34;The best process time(normalAdd)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::normalAdd, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream1)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream1, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream2)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream2, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream3)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream3, 100_000_000) + &amp;#34; MS&amp;#34;); System.</description></item></channel></rss>