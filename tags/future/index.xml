<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Future on Come Back</title><link>https://willxwu.github.io/tags/future/</link><description>Recent content in Future on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Thu, 14 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/future/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-实现一个异步基于事件回调的Future程序</title><link>https://willxwu.github.io/post/java8/20_java8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%9A%84future%E7%A8%8B%E5%BA%8F/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/20_java8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%9A%84future%E7%A8%8B%E5%BA%8F/</guid><description>JAVA8-实现一个异步基于事件回调的Future程序 前面2个例子（JAVA8-多线程Future设计模式原理,自定义实现一个Future程序、JAVA8-JDK自带Future,Callable,ExecutorService）+该例子，是为了学习CompletableFuture，理解其原理。
自定义Future程序代码示例：
package com.example.study.java8.funture; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicReference; /** * 实现一个异步基于事件回调的Future程序 */ public class FutureInAction3 { public static void main(String[] args) { Future&amp;lt;String&amp;gt; future = invoke(() -&amp;gt; { try { Thread.sleep(10000L); return &amp;#34;I&amp;#39;m finished.&amp;#34;; } catch (InterruptedException e) { return &amp;#34;I&amp;#39;m Error.&amp;#34;; } }); //注册一个事件 future.setCompletable(new Completable&amp;lt;String&amp;gt;() { @Override public void completable(String s) { System.out.println(s); } @Override public void excetion(Throwable cause) { System.out.println(&amp;#34;Error&amp;#34;); cause.printStackTrace(); } }); //下面就可以执行其它逻辑了。。。 System.out.println(&amp;#34;。。。。。。。。。&amp;#34;); System.out.println(future.get()); System.</description></item><item><title>JAVA8-JDK自带Future,Callable,ExecutorService</title><link>https://willxwu.github.io/post/java8/19_java8-jdk%E6%8F%90%E4%BE%9B%E7%9A%84future/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/19_java8-jdk%E6%8F%90%E4%BE%9B%E7%9A%84future/</guid><description>JAVA8-JDK自带Future,Callable,ExecutorService 代码示例：
package com.example.study.java8.funture; import java.util.List; import java.util.concurrent.*; /** * 和自定义Future中block一样会卡住 */ public class FutureInAction2 { public static void main(String[] args) throws ExecutionException, InterruptedException, TimeoutException { //创建一个单线程 ExecutorService executorService = Executors.newSingleThreadExecutor(); //返回一个future，里面的操作可能还没完成，但不影响后续的操作。 Future&amp;lt;String&amp;gt; future = executorService.submit(() -&amp;gt; { try { Thread.sleep(10000L); return &amp;#34;I&amp;#39;m finished&amp;#34;; } catch (InterruptedException e) { return &amp;#34;I&amp;#39;m error&amp;#34;; } }); //没有结果会抛出，中断异常 String value = future.get(); System.out.println(value); //关闭进程 executorService.shutdown(); //shutdownNow关闭进程，但是会返回有那些进程还没有执行完。 List&amp;lt;Runnable&amp;gt; runnables = executorService.shutdownNow(); } } 输出结果：</description></item><item><title>JAVA8-多线程Future设计模式原理,自定义实现一个Future程序。</title><link>https://willxwu.github.io/post/java8/18_java8-%E5%A4%9A%E7%BA%BF%E7%A8%8Bfuture%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAfuture%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/18_java8-%E5%A4%9A%E7%BA%BF%E7%A8%8Bfuture%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAfuture%E7%A8%8B%E5%BA%8F/</guid><description>JAVA8-多线程Future设计模式原理,自定义实现一个Future程序。 自定义实现Future，理解设计模式原理。
Future模式实现 自定义代码示例：
package com.example.study.java8.funture; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicReference; /** * 自定义模拟future，理解Future的使用。 */ public class FutureInAction { public static void main(String[] args) throws InterruptedException { Funture&amp;lt;String&amp;gt; funture = invoke(() -&amp;gt; { try { //模拟操作计算很长时间 Thread.sleep(10000); return &amp;#34;I&amp;#39;m finished&amp;#34;; } catch (Exception e) { e.printStackTrace(); return &amp;#34;Error&amp;#34;; } }); //操作计算很长时间，还没操作计算完成，只返回了future，虽然此时返回值为null，但是可以接着执行官其它操作,不会阻塞后续操作。 System.out.println(funture.get()); System.out.println(funture.get()); System.out.println(funture.get()); //知道操作计算完成后，将值返回 while (!funture.isDone()) { Thread.sleep(10); } System.out.println(funture.get()); } private static &amp;lt;T&amp;gt; Funture&amp;lt;T&amp;gt; invoke(Callable&amp;lt;T&amp;gt; callable) { AtomicReference&amp;lt;T&amp;gt; result = new AtomicReference&amp;lt;&amp;gt;(); AtomicBoolean finished = new AtomicBoolean(false); Thread t = new Thread(() -&amp;gt; { T value = callable.</description></item></channel></rss>