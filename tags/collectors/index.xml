<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Collectors on Come Back</title><link>https://willxwu.github.io/tags/collectors/</link><description>Recent content in Collectors on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Wed, 06 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/collectors/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-Collector interface源码分析</title><link>https://willxwu.github.io/post/java8/13_collector-interface%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/13_collector-interface%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>Collector interface源码分析 源码 public interface Collector&amp;lt;T, A, R&amp;gt; { Supplier&amp;lt;A&amp;gt; supplier(); BiConsumer&amp;lt;A, T&amp;gt; accumulator(); Function&amp;lt;A, R&amp;gt; finisher(); BinaryOperator&amp;lt;A&amp;gt; combiner(); Set&amp;lt;Characteristics&amp;gt; characteristics(); } 说明： 1.T is the generic type of the items in the stream to be collected. 2.A is the type of the accumulator, the object on which the partial result will be accumulated during the collection process. 3.R is the type of the object (typically, but not always, the collection) resulting from the collect operation.</description></item><item><title>JAVA8-Collectors API summingDouble、summingInt、testSummingLong、toCollection、toConcurrentMap、toList、toSet、toMap</title><link>https://willxwu.github.io/post/java8/12_java8-collectors-api-summingdoublesumminginttestsumminglongtocollectiontoconcurrentmaptolisttosettomap/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/12_java8-collectors-api-summingdoublesumminginttestsumminglongtocollectiontoconcurrentmaptolisttosettomap/</guid><description>JAVA8-Collectors API:summingDouble、summingInt、testSummingLong、toCollection、toConcurrentMap、toList、toSet、toMap 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、summingDouble public static void testAveragingDouble(){ System.out.println(&amp;#34;testAveragingDouble&amp;#34;); //用reduce聚合求和 Optional.ofNullable(menu.stream().map(Dish::getCalories).reduce(Integer::sum)).get().ifPresent(System.out::println); //用collectors averagingDouble求平均值 Optional.ofNullable(menu.stream().collect(averagingDouble(Dish::getCalories))).ifPresent(System.out::println); } 输出结果：</description></item><item><title>JAVA8-Collectors API partitioningBy、reducing、summarizingLong、summarizingInt、summarizingDouble</title><link>https://willxwu.github.io/post/java8/11_java8-collectors-api-partitioningbyreducingsummarizinglongsummarizingintsummarizingdouble/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/11_java8-collectors-api-partitioningbyreducingsummarizinglongsummarizingintsummarizingdouble/</guid><description>JAVA8-Collectors API: partitioningBy、reducing、summarizingLong、summarizingInt、summarizingDouble 前置数据：
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、partitioningBy 分组 public static void testPartitioningByWithPredicate() { System.out.println(&amp;#34;testPartitioningByWithPredicate&amp;#34;); Map&amp;lt;Boolean, List&amp;lt;Dish&amp;gt;&amp;gt; collect = menu.</description></item><item><title>JAVA8-Collectors API averaging、collectingAndThen、counting、groupingBy</title><link>https://willxwu.github.io/post/java8/10_java8-collectors-api-averagingcollectingandthencountinggroupingby/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/10_java8-collectors-api-averagingcollectingandthencountinggroupingby/</guid><description>JAVA8-Collectors API:averaging、collectingAndThen、counting、groupingBy 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、averagingDouble 求平均值 public static void testAveragingDouble(){ System.out.println(&amp;#34;testAveragingDouble&amp;#34;); //用reduce聚合求和 Optional.ofNullable(menu.stream().map(Dish::getCalories).reduce(Integer::sum)).get().ifPresent(System.out::println); //用collectors averagingDouble求平均值 Optional.ofNullable(menu.stream().collect(averagingDouble(Dish::getCalories))).ifPresent(System.out::println); } 输出结果：</description></item><item><title>JAVA8-Collectors API groupingByConcurrent、joining、mapping、maxby、minby</title><link>https://willxwu.github.io/post/java8/09_java8-collectors-api-groupingbyconcurrentjoiningmappingmaxbyminby/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/09_java8-collectors-api-groupingbyconcurrentjoiningmappingmaxbyminby/</guid><description>JAVA8-Collectors API: groupingByConcurrent、joining、mapping、maxby、minby# 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、groupingByConcurrent 返回map为ConcurrentMap,按类型分组 public static void testGroupingByConcurrentWithFunction() { System.out.println(&amp;#34;testGroupingByConcurrentWithFunction&amp;#34;); ConcurrentMap&amp;lt;Dish.Type, List&amp;lt;Dish&amp;gt;&amp;gt; collect = menu.</description></item></channel></rss>