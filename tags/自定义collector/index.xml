<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>自定义Collector on Come Back</title><link>https://willxwu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89collector/</link><description>Recent content in 自定义Collector on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Thu, 28 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89collector/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-自定义Collector</title><link>https://willxwu.github.io/post/java8/28_java8-%E8%87%AA%E5%AE%9A%E4%B9%89collector/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/28_java8-%E8%87%AA%E5%AE%9A%E4%B9%89collector/</guid><description>自定义Collector 实现Collector接口 package com.example.study.java8.collector; import java.util.*; import java.util.function.BiConsumer; import java.util.function.BinaryOperator; import java.util.function.Function; import java.util.function.Supplier; import java.util.stream.Collector; /** * 自定义Collector * T:元素类型 * List&amp;lt;T&amp;gt;:要创建的类型 * List&amp;lt;T&amp;gt;:最后要返回的类型 */ public class ToListCollector&amp;lt;T&amp;gt; implements Collector&amp;lt;T, List&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&amp;gt; { private void log(final String log) { System.out.println(Thread.currentThread().getName()+&amp;#34;-&amp;#34;+log); } //一定时可变的supplier，不是固定值 @Override public Supplier&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; supplier() { log(&amp;#34;supplier&amp;#34;); return ArrayList::new; } //要进行的操作 @Override public BiConsumer&amp;lt;List&amp;lt;T&amp;gt;, T&amp;gt; accumulator() { log(&amp;#34;accumulator&amp;#34;); return List::add; } //将结果整合 @Override public BinaryOperator&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; combiner() { log(&amp;#34;combiner&amp;#34;); return (list1,list2)-&amp;gt;{ list1.</description></item></channel></rss>