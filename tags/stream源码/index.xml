<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Stream源码 on Come Back</title><link>https://willxwu.github.io/tags/stream%E6%BA%90%E7%A0%81/</link><description>Recent content in Stream源码 on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Tue, 28 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/stream%E6%BA%90%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-如何创建Stream</title><link>https://willxwu.github.io/post/java8/05_java8-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAstream/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/05_java8-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAstream/</guid><description>创建Stream 创建Stream方式： 创建Stream的方式 1、通过Collection 2、通过values 3、通过Arrays 4、通过file 5、通过iterate创建,无限的创建 6、通过Generate创建 7、自定义Supplier，创建Stream 使用范例 1、Collection创建，输出值顺序与之前放入值顺序一致。 范例：
/** * 通过Collection创建Stream，数据顺序和放入顺序一致 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByCollection(){ List&amp;lt;String&amp;gt; list = Arrays.asList(new String(&amp;#34;Hello&amp;#34;), new String(&amp;#34;world&amp;#34;), new String(&amp;#34;please&amp;#34;)); return list.stream(); } 2、values创建,输出值顺序与之前放入值顺序一致。 范例：
/** * 通过values创建Stream，顺序一直 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByValues(){ return Stream.of(&amp;#34;Hello&amp;#34;,&amp;#34;world&amp;#34;,&amp;#34;please&amp;#34;); } 3、Arrays创建,输出值顺序与之前放入值顺序一致。 范例：
/** * 3、通过Arrays创建，顺序一致 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByArrays(){ return Arrays.stream(new String[]{&amp;#34;Hello&amp;#34;,&amp;#34;world&amp;#34;,&amp;#34;please&amp;#34;}); } 4、File创建 范例：
/** * 4、通过file创建 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByFile(){ Path path = Paths.</description></item><item><title>JAVA8-Stream源码</title><link>https://willxwu.github.io/post/java8/04_java8-stream%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/04_java8-stream%E6%BA%90%E7%A0%81/</guid><description>Stream基本使用及特点 Stream说明 Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错。
1、可连续操作：
filter, map, and limit can be connected together to form a pipeline. 2、操作中断
collect causes the pipeline to be executed and closes it. 使用范例： package com.example.study.java8.streams; import java.util.*; import java.util.stream.Stream; import static java.util.Comparator.comparing; import static java.util.stream.Collectors.toList; /** * Stream使用 * Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错 * You can see two groups of operations: * 1、可连续操作 *  filter, map, and limit can be connected together to form a pipeline. * 2、操作中断 *  collect causes the pipeline to be executed and closes it.</description></item></channel></rss>