<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异步编排 on Come Back</title><link>https://willxwu.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</link><description>Recent content in 异步编排 on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Thu, 21 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-completableFuture 异步编排</title><link>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</guid><description>通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，在业务复杂情况下，一个异步调用可能会依赖于另一个异步调用的执行结果。因此我们可以使用completableFuture 异步编排方案。
比如：一个业务场景，需要同时获取多个数据，如果同步线程挨个执行，则需要时间为所有线程执行时间的总和。
如果我们使用异步线程执行，所需时间则为耗时最长那个异步线程的执行时间。
如果多个异常线程之间还存在依赖关系，比如线程3需要线程1的执行结果，线程6依赖线程3、线程2，那这个问题怎么解决呢。那就可以使用completableFuture 异步编排方案实现。
注意：completableFuture 是jdk1.8之后添加的一个功能。
CompletableFuture接口:
public class CompletableFuture&amp;lt;T&amp;gt; implements Future&amp;lt;T&amp;gt;, CompletionStage&amp;lt;T&amp;gt; { public interface Future&amp;lt;V&amp;gt; { 以前用到的FutureTask就是用到的Future可以得到返回结果
public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; { public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; { /** * Sets this Future to the result of its computation * unless it has been cancelled. */ void run(); } Future可以得到返回结果
CompletableFuture随便一个方法，都接受一个Function
public &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; applyToEither( CompletionStage&amp;lt;? extends T&amp;gt; other, Function&amp;lt;? super T, U&amp;gt; fn) { return orApplyStage(null, other, fn); } @FunctionalInterface public interface Function&amp;lt;T, R&amp;gt; { Function是一个@FunctionalInterface，所以对Lambda使用要熟悉。</description></item></channel></rss>