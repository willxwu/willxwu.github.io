<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>消息中间件 on Come Back</title><link>https://willxwu.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><description>Recent content in 消息中间件 on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Sun, 19 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>SpringBoot整合RabbitMQ</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88mq/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88mq/</guid><description>&lt;h1 id="springboot整合rabbitmq">SpringBoot整合RabbitMQ&lt;/h1>
&lt;h1 id="1引入依赖">1、引入依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-amqp&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>2.6.3&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2配置rabbitmq">2、配置rabbitmq&lt;/h1>
&lt;p>通过RabbitProperties.properties配置文件配置链接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> rabbitmq:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: 192.168.56.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> virtual-host: /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: 5672
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publisher-confirm-type: correlated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publisher-returns: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mandatory: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>初识RabbitMQ</title><link>https://willxwu.github.io/post/rabbitmq/%E5%88%9D%E8%AF%86rabbitmq/</link><pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/%E5%88%9D%E8%AF%86rabbitmq/</guid><description>&lt;h1 id="rabbitmq作用">RabbitMQ作用&lt;/h1>
&lt;p>&lt;strong>异步处理、应用解耦、流量控制&lt;/strong>&lt;/p>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>1、大多应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力&lt;/p>
&lt;p>2、消息服务中两个重要概念：&lt;/p>
&lt;p>&lt;strong>消息代理（message broker）&lt;strong>和&lt;/strong>目的地（destination）&lt;/strong> 当消息发送者发送 消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。&lt;/p></description></item><item><title>RabbitMQ延时队列</title><link>https://willxwu.github.io/post/rabbitmq/rabbitmq%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/rabbitmq%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="rabbitmq延时队列实现定时任务">RabbitMQ延时队列（实现定时任务）&lt;/h1>
&lt;p>场景： 比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。 常用解决方案： spring的 schedule 定时任务轮询数据库 缺点： 消耗系统内存、增加了数据库的压力、存在较大的时间误差 解决：rabbitmq的消息TTL和死信Exchange结合&lt;/p></description></item><item><title>RabbitMQ运行机制</title><link>https://willxwu.github.io/post/rabbitmq/rabbitmqy%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/rabbitmqy%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="rabbitmq运行机制">RabbitMQ运行机制&lt;/h1>
&lt;p>&lt;strong>AMQP 中的消息路由&lt;/strong>&lt;/p>
&lt;p>AMQP 中消息的路由过程和 Java 开 发者熟悉的 JMS 存在一些差别， AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布 到 Exchange 上，消息最终到达队列 并被消费者接收，而 Binding 决定交 换器的消息应该发送到那个队列&lt;/p>
&lt;h1 id="exchange-类型">Exchange 类型&lt;/h1></description></item></channel></rss>