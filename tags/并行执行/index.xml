<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并行执行 on Come Back</title><link>https://willxwu.github.io/tags/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</link><description>Recent content in 并行执行 on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Fri, 08 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-Fork Join</title><link>https://willxwu.github.io/post/java8/15_java8-fork-join/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/15_java8-fork-join/</guid><description>JAVA8-Fork Join Fork：将一个任务拆分成多个线程执行。 Join：将每个现场结果join，最后得到结果。
范例：求数组总和 前置数据：
public static int[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 1、原始实现方式 public static int calc() { int result = 0; for (int i = 0; i &amp;lt; data.length; i++) { result += data[i]; } return result; } 原始实现方式调用：
System.out.println(&amp;#34;result=&amp;gt; &amp;#34; + calc()); 2、RecursiveTask实现 RecursiveTask有返回值。
package com.example.study.java8.forkjoin; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import java.util.concurrent.RecursiveTask; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class AccumulatorRecursiveTask extends RecursiveTask&amp;lt;Integer&amp;gt; { private int start; private int end; private int[] data; private int LIMIT=3; public AccumulatorRecursiveTask(int start, int end, int[] data) { this.</description></item><item><title>JAVA8 Stream parallel 并行执行</title><link>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</guid><description>Stream parallel 并行执行 范例：求1~100000000的和，执行10次，看时间效率。 代码 package com.example.study.java8.collector; import java.util.function.Function; import java.util.stream.LongStream; import java.util.stream.Stream; /** * Stream parallel并行执行 * 实列：求10次，1~100000000的和，看时间效率。 */ public class ParallelProcessing { public static void main(String[] args) { //获取电脑CPU核数 System.out.println(&amp;#34;当前电脑CPU核数= &amp;#34; + Runtime.getRuntime().availableProcessors()); System.out.println(&amp;#34;The best process time(normalAdd)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::normalAdd, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream1)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream1, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream2)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream2, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream3)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream3, 100_000_000) + &amp;#34; MS&amp;#34;); System.</description></item></channel></rss>