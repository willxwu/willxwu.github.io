<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FutureTask on Come Back</title><link>https://willxwu.github.io/tags/futuretask/</link><description>Recent content in FutureTask on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/futuretask/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 读写锁</title><link>https://willxwu.github.io/post/lock/%E8%AF%BB%E5%86%99%E9%94%81/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/%E8%AF%BB%E5%86%99%E9%94%81/</guid><description>读写锁 package com.yanxizhu; import java.util.concurrent.locks.ReadWriteLock; import java.util.concurrent.locks.ReentrantReadWriteLock; /** * @description: 读写锁(互斥锁) * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/3/19 15:23 * @version: 1.0 */ public class ReadWriteDemo { public static void main(String[] args) { ReadWriteTest readWriteTest = new ReadWriteTest(); new Thread(()-&amp;gt;{ readWriteTest.write((int) (Math.random()*101)); },&amp;#34;写锁&amp;#34;).start(); for(int i=1;i&amp;lt;50;i++){ new Thread(()-&amp;gt;{ readWriteTest.get(); },&amp;#34;读锁&amp;#34;).start(); } } } class ReadWriteTest{ int num =0; private ReadWriteLock readWriteLock = new ReentrantReadWriteLock(); //读 public void get(){ readWriteLock.readLock().lock(); try{ System.out.println(num+&amp;#34;==&amp;#34;+Thread.currentThread().getName()); }finally { readWriteLock.</description></item><item><title>Java CountDownLatch闭锁使用</title><link>https://willxwu.github.io/post/lock/countdownlatch%E9%97%AD%E9%94%81%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/countdownlatch%E9%97%AD%E9%94%81%E4%BD%BF%E7%94%A8/</guid><description>import java.util.concurrent.CountDownLatch; /** * @date: 2022/3/19 11:09 * @version: 1.0 */ public class CountDownLatchTest { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); myCountDownlatch myCountDownlatch = new myCountDownlatch(countDownLatch); long start = System.currentTimeMillis(); for(int i=0;i&amp;lt;5;i++){ new Thread(myCountDownlatch).start(); } countDownLatch.await(); long end = System.currentTimeMillis(); System.out.println(&amp;#34;耗时：&amp;#34;+(end-start)); } public static class myCountDownlatch implements Runnable{ private CountDownLatch countDownLatch; public myCountDownlatch(CountDownLatch countDownLatch){ this.countDownLatch = countDownLatch; } @Override public void run() { synchronized (this){ try{ for(int i =0;i&amp;lt;500;i++){ if(i % 2==0){ System.</description></item><item><title>Java FutureTask用于闭锁</title><link>https://willxwu.github.io/post/lock/futuretask%E7%94%A8%E4%BA%8E%E9%97%AD%E9%94%81/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/futuretask%E7%94%A8%E4%BA%8E%E9%97%AD%E9%94%81/</guid><description>package com.yanxizhu; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; /** * @description: FutureTask可用于闭锁 * @date: 2022/3/19 11:48 * @version: 1.0 */ public class FutureTaskDemo { public static void main(String[] args) throws ExecutionException, InterruptedException { myFutureTask myFutureTask = new myFutureTask(); FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(myFutureTask); new Thread(futureTask).start(); //必须等线程执行完，才执行下面的代码，因此FutureTask可用于闭锁 Integer integer = futureTask.get(); System.out.println(&amp;#34;integer=&amp;#34;+integer); System.out.println(&amp;#34;=======================&amp;#34;); } public static class myFutureTask implements Callable&amp;lt;Integer&amp;gt;{ @Override public Integer call() throws Exception { int i=1; for(;i&amp;lt;1000000;i++){ i++; } return i; } } }</description></item></channel></rss>