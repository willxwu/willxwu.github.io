<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>notifyAll on Come Back</title><link>https://willxwu.github.io/tags/notifyall/</link><description>Recent content in notifyAll on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Tue, 29 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/tags/notifyall/index.xml" rel="self" type="application/rss+xml"/><item><title>线程唤醒</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92/</guid><description>wait、notifyAll()、await()、signalAll() 为了避免虚假唤醒问题，应该总是使用在循环中 wait、notifyAll():
package com.yanxizhu; import java.util.function.Consumer; /* * 生产者和消费者案例 */ public class TestProductorAndConsumer { public static void main(String[] args) { Clerk clerk = new Clerk(); Productor pro = new Productor(clerk); Consumers cus = new Consumers(clerk); new Thread(pro, &amp;#34;生产者 A&amp;#34;).start(); new Thread(cus, &amp;#34;消费者 B&amp;#34;).start(); new Thread(pro, &amp;#34;生产者 C&amp;#34;).start(); new Thread(cus, &amp;#34;消费者 D&amp;#34;).start(); } } //店员 class Clerk{ private int product = 0; //进货 public synchronized void get(){//循环次数：0 while(product &amp;gt;= 1){//为了避免虚假唤醒问题，应该总是使用在循环中 System.</description></item></channel></rss>