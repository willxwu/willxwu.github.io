<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Come Back</title><link>https://willxwu.github.io/post/</link><description>Recent content in Posts on Come Back</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright><lastBuildDate>Fri, 29 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://willxwu.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>JAVA8-Lambda方法推导详细解析</title><link>https://willxwu.github.io/post/java8/29_lambda%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/29_lambda%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%A7%A3%E6%9E%90/</guid><description>Lambda方法推导详细解析 什么情况下可以进行方法推导? 类的方法（静态方法）
对象的方法
构造方法
自定义函数式接口
范例： package com.example.study.java8.InterfaceFunction; import java.util.Arrays; import java.util.Comparator; import java.util.List; import java.util.function.BiFunction; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Supplier; /** * 方法推导 * 什么情况下可以进行方法推导： * 1、类的方法（静态方法） * 2、对象的方法 * 3、构造方法 */ public class MethodReferenceUsageDemoOne { public static void main(String[] args) { //方法推导，范例一：类的方法 //原始写法 Consumer&amp;lt;String&amp;gt; consumer = s-&amp;gt; System.out.println(s); genericityConsumer(consumer, &amp;#34;hello&amp;#34;); //1、进化一 genericityConsumer(s-&amp;gt;System.out.println(s), &amp;#34;world&amp;#34;); //2、进化二 genericityConsumer(System.out::println, &amp;#34;nice&amp;#34;); System.out.println(&amp;#34;===========================&amp;#34;); //方法推导，范例二：类的方法 List&amp;lt;Apple&amp;gt; list = Arrays.asList(new Apple(&amp;#34;red&amp;#34;, 10) , new Apple(&amp;#34;red&amp;#34;, 60) , new Apple(&amp;#34;blue&amp;#34;, 40) , new Apple(&amp;#34;black&amp;#34;, 30) , new Apple(&amp;#34;green&amp;#34;, 80) , new Apple(&amp;#34;blue&amp;#34;, 90) , new Apple(&amp;#34;green&amp;#34;, 60) , new Apple(&amp;#34;green&amp;#34;, 50) , new Apple(&amp;#34;red&amp;#34;, 20)); System.</description></item><item><title>JAVA8-自定义Collector</title><link>https://willxwu.github.io/post/java8/28_java8-%E8%87%AA%E5%AE%9A%E4%B9%89collector/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/28_java8-%E8%87%AA%E5%AE%9A%E4%B9%89collector/</guid><description>自定义Collector 实现Collector接口 package com.example.study.java8.collector; import java.util.*; import java.util.function.BiConsumer; import java.util.function.BinaryOperator; import java.util.function.Function; import java.util.function.Supplier; import java.util.stream.Collector; /** * 自定义Collector * T:元素类型 * List&amp;lt;T&amp;gt;:要创建的类型 * List&amp;lt;T&amp;gt;:最后要返回的类型 */ public class ToListCollector&amp;lt;T&amp;gt; implements Collector&amp;lt;T, List&amp;lt;T&amp;gt;, List&amp;lt;T&amp;gt;&amp;gt; { private void log(final String log) { System.out.println(Thread.currentThread().getName()+&amp;#34;-&amp;#34;+log); } //一定时可变的supplier，不是固定值 @Override public Supplier&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; supplier() { log(&amp;#34;supplier&amp;#34;); return ArrayList::new; } //要进行的操作 @Override public BiConsumer&amp;lt;List&amp;lt;T&amp;gt;, T&amp;gt; accumulator() { log(&amp;#34;accumulator&amp;#34;); return List::add; } //将结果整合 @Override public BinaryOperator&amp;lt;List&amp;lt;T&amp;gt;&amp;gt; combiner() { log(&amp;#34;combiner&amp;#34;); return (list1,list2)-&amp;gt;{ list1.</description></item><item><title>JAVA8-Stream基本使用及特点</title><link>https://willxwu.github.io/post/java8/27_java8-stream%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93stream%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/27_java8-stream%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93stream%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</guid><description>Stream基本使用及特点 Stream说明 Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错。
1、可连续操作：
filter, map, and limit can be connected together to form a pipeline. 2、操作中断
collect causes the pipeline to be executed and closes it. 使用范例： package com.example.study.java8.streams; import java.util.*; import java.util.stream.Stream; import static java.util.Comparator.comparing; import static java.util.stream.Collectors.toList; /** * Stream使用 * Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错 * You can see two groups of operations: * 1、可连续操作 *  filter, map, and limit can be connected together to form a pipeline. * 2、操作中断 *  collect causes the pipeline to be executed and closes it.</description></item><item><title>JAVA8-CompletableFuture基本用法</title><link>https://willxwu.github.io/post/java8/26_completablefuture%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/26_completablefuture%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid><description>JAVA8-CompletableFuture基本用法 针对&amp;lt;实现一个异步基于事件回调的Future程序&amp;gt; 用CompletableFuture进行改进。
代码示例：
package com.example.study.java8.completableFutures; import java.util.Optional; import java.util.Random; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutionException; /** * CompletableFuture 基本用法 */ public class CompletableFutureInAction1 { private final static Random RANDOM = new Random(System.currentTimeMillis()); public static void main(String[] args) throws ExecutionException, InterruptedException { //实际开发中，一般不直接new，而是使用工厂创建 // CompletableFuture&amp;lt;Void&amp;gt; voidCompletableFuture = CompletableFuture.runAsync(); CompletableFuture&amp;lt;Double&amp;gt; completableFuture = new CompletableFuture&amp;lt;&amp;gt;(); new Thread(()-&amp;gt;{ double value = get(); completableFuture.complete(value); }).start(); //不会阻塞程序执行 System.out.println(&amp;#34;===========no====block====..&amp;#34;); //1、后面获取程序执行结果 // Optional.ofNullable(completableFuture.get()).ifPresent(System.out::println); //2、执行完后，通过回调自动返回结果 completableFuture.whenComplete((v,t)-&amp;gt;{ Optional.ofNullable(v).ifPresent(System.out::println); Optional.ofNullable(t).ifPresent(x-&amp;gt;x.printStackTrace()); }); } private static double get(){ try { Thread.</description></item><item><title>JAVA8-completableFuture 异步编排</title><link>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/25_completablefuture-%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</guid><description>通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，在业务复杂情况下，一个异步调用可能会依赖于另一个异步调用的执行结果。因此我们可以使用completableFuture 异步编排方案。
比如：一个业务场景，需要同时获取多个数据，如果同步线程挨个执行，则需要时间为所有线程执行时间的总和。
如果我们使用异步线程执行，所需时间则为耗时最长那个异步线程的执行时间。
如果多个异常线程之间还存在依赖关系，比如线程3需要线程1的执行结果，线程6依赖线程3、线程2，那这个问题怎么解决呢。那就可以使用completableFuture 异步编排方案实现。
注意：completableFuture 是jdk1.8之后添加的一个功能。
CompletableFuture接口:
public class CompletableFuture&amp;lt;T&amp;gt; implements Future&amp;lt;T&amp;gt;, CompletionStage&amp;lt;T&amp;gt; { public interface Future&amp;lt;V&amp;gt; { 以前用到的FutureTask就是用到的Future可以得到返回结果
public class FutureTask&amp;lt;V&amp;gt; implements RunnableFuture&amp;lt;V&amp;gt; { public interface RunnableFuture&amp;lt;V&amp;gt; extends Runnable, Future&amp;lt;V&amp;gt; { /** * Sets this Future to the result of its computation * unless it has been cancelled. */ void run(); } Future可以得到返回结果
CompletableFuture随便一个方法，都接受一个Function
public &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; applyToEither( CompletionStage&amp;lt;? extends T&amp;gt; other, Function&amp;lt;? super T, U&amp;gt; fn) { return orApplyStage(null, other, fn); } @FunctionalInterface public interface Function&amp;lt;T, R&amp;gt; { Function是一个@FunctionalInterface，所以对Lambda使用要熟悉。</description></item><item><title>JAVA8-CompletableFuture LocalDate, LocalTime, Instant, Duration, Period</title><link>https://willxwu.github.io/post/java8/24_java8-date-api-localdate-localtime-instant-duration-period/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/24_java8-date-api-localdate-localtime-instant-duration-period/</guid><description>JAVA8-Date and Time API： LocalDate, LocalTime, Instant, Duration, Period 旧API问题 1、代码不清晰，一下看不出要转换的日期。
**2、Date日期中还包含了时间 **
3、多线程情况下会报错。
代码重现：
package com.example.study.java8.datetime; import java.text.ParseException; import java.text.SimpleDateFormat; import java.util.Date; public class DateTest { public static void main(String[] args) throws ParseException { //122格林威治时间 11月 23日期 //问题：不能清晰表示日期 Date date = new Date(122, 11, 23); System.out.println(date); //多线程情况下会出现一些问题： //30个线程，每个线程下循环100次，执行时间格式转换。 SimpleDateFormat sdf = new SimpleDateFormat(&amp;#34;yyyyMMdd&amp;#34;); for (int i = 0; i &amp;lt; 30; i++) { new Thread(() -&amp;gt; { for (int j = 0; j &amp;lt; 100; j++) { Date parseDate = null; try { parseDate = sdf.</description></item><item><title>JAVA8-CompletableFuturerunAfterBoth、applyToEither、acceptEither 、runAfterEither 、allOf、anyOf</title><link>https://willxwu.github.io/post/java8/23_ava8-completablefuture%E5%B8%B8%E7%94%A8apirunafterbothapplytoeitheraccepteither-runaftereither-allofanyof/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/23_ava8-completablefuture%E5%B8%B8%E7%94%A8apirunafterbothapplytoeitheraccepteither-runaftereither-allofanyof/</guid><description>AVA8-CompletableFuture常用API：runAfterBoth、applyToEither、acceptEither 、runAfterEither 、allOf、anyOf 1、runAfterBoth ：2个CompletableFuture都执行完后,再执行其它操作 package com.example.study.java8.completableFutures.api; import java.util.concurrent.CompletableFuture; public class CompletableFutureAction2 { public static void main(String[] args) throws InterruptedException { //API-- 1、runAfterBoth: 2个都执行完后,再执行其它操作 CompletableFuture.supplyAsync(() -&amp;gt; { System.out.println(Thread.currentThread().getName() + &amp;#34;this is runing 1......&amp;#34;); return 1; }) .runAfterBoth(CompletableFuture.supplyAsync(() -&amp;gt; { System.out.println(Thread.currentThread().getName() + &amp;#34;this is runing 2......&amp;#34;); return 2; }), () -&amp;gt; System.out.println(&amp;#34;done&amp;#34;)); //为了防止主线程结束后，守护线程被关闭，模拟修改10000毫秒 Thread.sleep(10000); } } 输出结果：
ForkJoinPool.commonPool-worker-5this is runing 2...... ForkJoinPool.commonPool-worker-19this is runing 1...... done 2、 applyToEither：其中一个CompletableFuture执行完，就将结果传给另一个Fuction package com.example.study.java8.completableFutures.api; import java.</description></item><item><title>JAVA8-CompletableFuture流水线工作，join多个异步任务详解</title><link>https://willxwu.github.io/post/java8/22_java8-completablefuture%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%B7%A5%E4%BD%9Cjoin%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/22_java8-completablefuture%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%B7%A5%E4%BD%9Cjoin%E5%A4%9A%E4%B8%AA%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1/</guid><description>JAVA8-CompletableFuture流水线工作，join多个异步任务详解 需求：根据商品id，将每个商品价格翻2倍？
代码示例 package com.example.study.java8.completableFutures; import java.util.Arrays; import java.util.List; import java.util.Random; import java.util.concurrent.CompletableFuture; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.stream.Stream; import static java.util.stream.Collectors.toList; /** * 根据商品id，将每个商品价格翻2倍。CompletableFuture高并发执行。 */ public class CompletableFutureInAction4 { private final static Random RANDOM = new Random(System.currentTimeMillis()); public static void main(String[] args) { //防止主线程执行完后，守护线程也关闭 ExecutorService executorService = Executors.newFixedThreadPool(2, r -&amp;gt; { Thread thread = new Thread(r); thread.setDaemon(false); return thread; }); //5个商品ID List&amp;lt;Integer&amp;gt; productIDs = Arrays.asList(1, 2, 3, 4, 5); //通过CompletableFuture查询5个商品价格 Stream&amp;lt;CompletableFuture&amp;lt;Double&amp;gt;&amp;gt; completableFutureStream = productIDs.</description></item><item><title>JAVA8-CompletableFuture常用API API thenApply、handle、thenRun、thenAccept、thenCompose、thenCombine、thenAcceptBoth</title><link>https://willxwu.github.io/post/java8/21_java8-completablefuture%E5%B8%B8%E7%94%A8api/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/21_java8-completablefuture%E5%B8%B8%E7%94%A8api/</guid><description>JAVA8-CompletableFuture常用API：thenApply、handle、thenRun、thenAccept、thenCompose、thenCombine、thenAcceptBoth 1、thenApply package com.example.study.java8.completableFutures.api; import java.util.Optional; import java.util.concurrent.CompletableFuture; /** * CompletableFuture常用API: thenApply、handle */ public class CompletableFutureAtion1 { public static void main(String[] args) throws InterruptedException { //API-- 1、thenApply //模拟其它 异步 逻辑操作然后返回结果1 CompletableFuture.supplyAsync(() -&amp;gt; 1) .thenApply(i -&amp;gt; Integer.sum(i, 10)) //thenApply 将结果加10 .whenComplete((v, t) -&amp;gt; Optional.ofNullable(v).ifPresent(System.out::println)); //同步执行打印结果 // .whenCompleteAsync() //异步操作，可以将结果在进行其它逻辑异步操作 //whenComplete VS whenCompleteAsync //为了防止主线程结束后，守护线程被关闭，模拟修改10000毫秒 Thread.sleep(10000); } } 输出结果：
11 对比 whenComplete VS whenCompleteAsync：whenCompleteAsync异步操作，可以将结果在进行其它逻辑异步操作。
2、handle package com.example.study.java8.completableFutures.api; import java.util.Optional; import java.util.concurrent.CompletableFuture; /** * CompletableFuture常用API: thenApply、handle */ public class CompletableFutureAtion1 { public static void main(String[] args) throws InterruptedException { //API- 2、handle CompletableFuture.</description></item><item><title>JAVA8-实现一个异步基于事件回调的Future程序</title><link>https://willxwu.github.io/post/java8/20_java8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%9A%84future%E7%A8%8B%E5%BA%8F/</link><pubDate>Thu, 14 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/20_java8-%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E5%9B%9E%E8%B0%83%E7%9A%84future%E7%A8%8B%E5%BA%8F/</guid><description>JAVA8-实现一个异步基于事件回调的Future程序 前面2个例子（JAVA8-多线程Future设计模式原理,自定义实现一个Future程序、JAVA8-JDK自带Future,Callable,ExecutorService）+该例子，是为了学习CompletableFuture，理解其原理。
自定义Future程序代码示例：
package com.example.study.java8.funture; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicReference; /** * 实现一个异步基于事件回调的Future程序 */ public class FutureInAction3 { public static void main(String[] args) { Future&amp;lt;String&amp;gt; future = invoke(() -&amp;gt; { try { Thread.sleep(10000L); return &amp;#34;I&amp;#39;m finished.&amp;#34;; } catch (InterruptedException e) { return &amp;#34;I&amp;#39;m Error.&amp;#34;; } }); //注册一个事件 future.setCompletable(new Completable&amp;lt;String&amp;gt;() { @Override public void completable(String s) { System.out.println(s); } @Override public void excetion(Throwable cause) { System.out.println(&amp;#34;Error&amp;#34;); cause.printStackTrace(); } }); //下面就可以执行其它逻辑了。。。 System.out.println(&amp;#34;。。。。。。。。。&amp;#34;); System.out.println(future.get()); System.</description></item><item><title>JAVA8-JDK自带Future,Callable,ExecutorService</title><link>https://willxwu.github.io/post/java8/19_java8-jdk%E6%8F%90%E4%BE%9B%E7%9A%84future/</link><pubDate>Wed, 13 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/19_java8-jdk%E6%8F%90%E4%BE%9B%E7%9A%84future/</guid><description>JAVA8-JDK自带Future,Callable,ExecutorService 代码示例：
package com.example.study.java8.funture; import java.util.List; import java.util.concurrent.*; /** * 和自定义Future中block一样会卡住 */ public class FutureInAction2 { public static void main(String[] args) throws ExecutionException, InterruptedException, TimeoutException { //创建一个单线程 ExecutorService executorService = Executors.newSingleThreadExecutor(); //返回一个future，里面的操作可能还没完成，但不影响后续的操作。 Future&amp;lt;String&amp;gt; future = executorService.submit(() -&amp;gt; { try { Thread.sleep(10000L); return &amp;#34;I&amp;#39;m finished&amp;#34;; } catch (InterruptedException e) { return &amp;#34;I&amp;#39;m error&amp;#34;; } }); //没有结果会抛出，中断异常 String value = future.get(); System.out.println(value); //关闭进程 executorService.shutdown(); //shutdownNow关闭进程，但是会返回有那些进程还没有执行完。 List&amp;lt;Runnable&amp;gt; runnables = executorService.shutdownNow(); } } 输出结果：</description></item><item><title>JAVA8-多线程Future设计模式原理,自定义实现一个Future程序。</title><link>https://willxwu.github.io/post/java8/18_java8-%E5%A4%9A%E7%BA%BF%E7%A8%8Bfuture%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAfuture%E7%A8%8B%E5%BA%8F/</link><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/18_java8-%E5%A4%9A%E7%BA%BF%E7%A8%8Bfuture%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%8E%9F%E7%90%86%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%E5%B9%B6%E4%B8%94%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAfuture%E7%A8%8B%E5%BA%8F/</guid><description>JAVA8-多线程Future设计模式原理,自定义实现一个Future程序。 自定义实现Future，理解设计模式原理。
Future模式实现 自定义代码示例：
package com.example.study.java8.funture; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicReference; /** * 自定义模拟future，理解Future的使用。 */ public class FutureInAction { public static void main(String[] args) throws InterruptedException { Funture&amp;lt;String&amp;gt; funture = invoke(() -&amp;gt; { try { //模拟操作计算很长时间 Thread.sleep(10000); return &amp;#34;I&amp;#39;m finished&amp;#34;; } catch (Exception e) { e.printStackTrace(); return &amp;#34;Error&amp;#34;; } }); //操作计算很长时间，还没操作计算完成，只返回了future，虽然此时返回值为null，但是可以接着执行官其它操作,不会阻塞后续操作。 System.out.println(funture.get()); System.out.println(funture.get()); System.out.println(funture.get()); //知道操作计算完成后，将值返回 while (!funture.isDone()) { Thread.sleep(10); } System.out.println(funture.get()); } private static &amp;lt;T&amp;gt; Funture&amp;lt;T&amp;gt; invoke(Callable&amp;lt;T&amp;gt; callable) { AtomicReference&amp;lt;T&amp;gt; result = new AtomicReference&amp;lt;&amp;gt;(); AtomicBoolean finished = new AtomicBoolean(false); Thread t = new Thread(() -&amp;gt; { T value = callable.</description></item><item><title>JAVA8-default、static</title><link>https://willxwu.github.io/post/java8/17_java8-default%E6%96%B9%E6%B3%95/</link><pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/17_java8-default%E6%96%B9%E6%B3%95/</guid><description>JAVA8-default、static default方法 1.8之前出现的问题:开发了一个接口，后面实现该接口的实现类，都需要实现接口中定义的方法。1.8之后接口中使用default定义新增的方法后，其实现类可以不用实现该方法。
例如Collection接口中新增了对stream的操作方法：stream()
public interface Collection&amp;lt;E&amp;gt; extends Iterable&amp;lt;E&amp;gt; { default Stream&amp;lt;E&amp;gt; stream() { return StreamSupport.stream(spliterator(), false); } } 其实现类就可以不用再实现stream()方法，这样对于版本兼容就比较好了。
static 定义的方法 可以通过接口直接调用该方法，例如：
public interface Function&amp;lt;T, R&amp;gt; { static &amp;lt;T&amp;gt; Function&amp;lt;T, T&amp;gt; identity() { return t -&amp;gt; t; } } 注意：接口中有default定义的方法实现了，但并不是抽象类。
接口：可以被多个类实现。
抽象类：继承了一个抽象类，就不能再继承另一个抽象类，因为类是单继承。
实列 自己用default实现一个接口
package com.example.study.java8.method; /** * default使用 */ public class DefaultAction { public static void main(String[] args) { A a = ()-&amp;gt;10; System.out.println(a.size()); System.out.println(a.isEmpty()); } public interface A{ int size(); //判断容器是否为空 default boolean isEmpty(){ return size()==0; } } } 输出结果：</description></item><item><title>JVA8-自定义Spliterator</title><link>https://willxwu.github.io/post/java8/16_jva8-%E8%87%AA%E5%AE%9A%E4%B9%89spliterator/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/16_jva8-%E8%87%AA%E5%AE%9A%E4%B9%89spliterator/</guid><description>JVA8-自定义Spliterator 需求说明：将一段话按换行符分割成多个执行，并输出。
package com.example.study.java8.forkjoin; import java.util.Objects; import java.util.Spliterator; import java.util.function.Consumer; import java.util.stream.Stream; import java.util.stream.StreamSupport; /** * 自定义Spliterator * 实列：将一段话按换行符分割成多个执行，并输出。 */ public class SpliteratorInAction { //需要处理的数据 private static String text = &amp;#34;The tryAdvance method feeds the Consumer with the Character in the String at the current index\n&amp;#34; + &amp;#34;position and increments this position. The Consumer passed as argument is an internal Java class\n&amp;#34; + &amp;#34;forwarding the consumed Character to the set of functions that have to be applied to it while\n&amp;#34; + &amp;#34;traversing the stream, which in this case is only a reducing function, namely, the accumulate method\n&amp;#34; + &amp;#34;of the WordCounter class.</description></item><item><title>JAVA8-Fork Join</title><link>https://willxwu.github.io/post/java8/15_java8-fork-join/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/15_java8-fork-join/</guid><description>JAVA8-Fork Join Fork：将一个任务拆分成多个线程执行。 Join：将每个现场结果join，最后得到结果。
范例：求数组总和 前置数据：
public static int[] data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}; 1、原始实现方式 public static int calc() { int result = 0; for (int i = 0; i &amp;lt; data.length; i++) { result += data[i]; } return result; } 原始实现方式调用：
System.out.println(&amp;#34;result=&amp;gt; &amp;#34; + calc()); 2、RecursiveTask实现 RecursiveTask有返回值。
package com.example.study.java8.forkjoin; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.ToString; import java.util.concurrent.RecursiveTask; @Data @AllArgsConstructor @NoArgsConstructor @ToString public class AccumulatorRecursiveTask extends RecursiveTask&amp;lt;Integer&amp;gt; { private int start; private int end; private int[] data; private int LIMIT=3; public AccumulatorRecursiveTask(int start, int end, int[] data) { this.</description></item><item><title>JAVA8 Stream parallel 并行执行</title><link>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/14_java8-stream-parallel-%E5%B9%B6%E8%A1%8C%E6%89%A7%E8%A1%8C/</guid><description>Stream parallel 并行执行 范例：求1~100000000的和，执行10次，看时间效率。 代码 package com.example.study.java8.collector; import java.util.function.Function; import java.util.stream.LongStream; import java.util.stream.Stream; /** * Stream parallel并行执行 * 实列：求10次，1~100000000的和，看时间效率。 */ public class ParallelProcessing { public static void main(String[] args) { //获取电脑CPU核数 System.out.println(&amp;#34;当前电脑CPU核数= &amp;#34; + Runtime.getRuntime().availableProcessors()); System.out.println(&amp;#34;The best process time(normalAdd)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::normalAdd, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream1)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream1, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream2)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream2, 100_000_000) + &amp;#34; MS&amp;#34;); System.out.println(&amp;#34;The best process time(iterateStream3)=&amp;gt; &amp;#34; + measureSumPerformance(ParallelProcessing::iterateStream3, 100_000_000) + &amp;#34; MS&amp;#34;); System.</description></item><item><title>JAVA8-Collector interface源码分析</title><link>https://willxwu.github.io/post/java8/13_collector-interface%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/13_collector-interface%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>Collector interface源码分析 源码 public interface Collector&amp;lt;T, A, R&amp;gt; { Supplier&amp;lt;A&amp;gt; supplier(); BiConsumer&amp;lt;A, T&amp;gt; accumulator(); Function&amp;lt;A, R&amp;gt; finisher(); BinaryOperator&amp;lt;A&amp;gt; combiner(); Set&amp;lt;Characteristics&amp;gt; characteristics(); } 说明： 1.T is the generic type of the items in the stream to be collected. 2.A is the type of the accumulator, the object on which the partial result will be accumulated during the collection process. 3.R is the type of the object (typically, but not always, the collection) resulting from the collect operation.</description></item><item><title>JAVA8-Collectors API summingDouble、summingInt、testSummingLong、toCollection、toConcurrentMap、toList、toSet、toMap</title><link>https://willxwu.github.io/post/java8/12_java8-collectors-api-summingdoublesumminginttestsumminglongtocollectiontoconcurrentmaptolisttosettomap/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/12_java8-collectors-api-summingdoublesumminginttestsumminglongtocollectiontoconcurrentmaptolisttosettomap/</guid><description>JAVA8-Collectors API:summingDouble、summingInt、testSummingLong、toCollection、toConcurrentMap、toList、toSet、toMap 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、summingDouble public static void testAveragingDouble(){ System.out.println(&amp;#34;testAveragingDouble&amp;#34;); //用reduce聚合求和 Optional.ofNullable(menu.stream().map(Dish::getCalories).reduce(Integer::sum)).get().ifPresent(System.out::println); //用collectors averagingDouble求平均值 Optional.ofNullable(menu.stream().collect(averagingDouble(Dish::getCalories))).ifPresent(System.out::println); } 输出结果：</description></item><item><title>JAVA8-Collectors API partitioningBy、reducing、summarizingLong、summarizingInt、summarizingDouble</title><link>https://willxwu.github.io/post/java8/11_java8-collectors-api-partitioningbyreducingsummarizinglongsummarizingintsummarizingdouble/</link><pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/11_java8-collectors-api-partitioningbyreducingsummarizinglongsummarizingintsummarizingdouble/</guid><description>JAVA8-Collectors API: partitioningBy、reducing、summarizingLong、summarizingInt、summarizingDouble 前置数据：
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、partitioningBy 分组 public static void testPartitioningByWithPredicate() { System.out.println(&amp;#34;testPartitioningByWithPredicate&amp;#34;); Map&amp;lt;Boolean, List&amp;lt;Dish&amp;gt;&amp;gt; collect = menu.</description></item><item><title>JAVA8-Collectors API averaging、collectingAndThen、counting、groupingBy</title><link>https://willxwu.github.io/post/java8/10_java8-collectors-api-averagingcollectingandthencountinggroupingby/</link><pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/10_java8-collectors-api-averagingcollectingandthencountinggroupingby/</guid><description>JAVA8-Collectors API:averaging、collectingAndThen、counting、groupingBy 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、averagingDouble 求平均值 public static void testAveragingDouble(){ System.out.println(&amp;#34;testAveragingDouble&amp;#34;); //用reduce聚合求和 Optional.ofNullable(menu.stream().map(Dish::getCalories).reduce(Integer::sum)).get().ifPresent(System.out::println); //用collectors averagingDouble求平均值 Optional.ofNullable(menu.stream().collect(averagingDouble(Dish::getCalories))).ifPresent(System.out::println); } 输出结果：</description></item><item><title>JAVA8-Collectors API groupingByConcurrent、joining、mapping、maxby、minby</title><link>https://willxwu.github.io/post/java8/09_java8-collectors-api-groupingbyconcurrentjoiningmappingmaxbyminby/</link><pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/09_java8-collectors-api-groupingbyconcurrentjoiningmappingmaxbyminby/</guid><description>JAVA8-Collectors API: groupingByConcurrent、joining、mapping、maxby、minby# 前置数据
public static final List&amp;lt;Dish&amp;gt; menu = Arrays.asList( new Dish(&amp;#34;pork&amp;#34;, false, 800, Dish.Type.MEAT), new Dish(&amp;#34;beef&amp;#34;, false, 700, Dish.Type.MEAT), new Dish(&amp;#34;chicken&amp;#34;, false, 400, Dish.Type.MEAT), new Dish(&amp;#34;french fries&amp;#34;, true, 530, Dish.Type.OTHER), new Dish(&amp;#34;rice&amp;#34;, true, 350, Dish.Type.OTHER), new Dish(&amp;#34;season fruit&amp;#34;, true, 120, Dish.Type.OTHER), new Dish(&amp;#34;pizza&amp;#34;, true, 550, Dish.Type.OTHER), new Dish(&amp;#34;prawns&amp;#34;, false, 300, Dish.Type.FISH), new Dish(&amp;#34;salmon&amp;#34;, false, 450, Dish.Type.FISH)); 范例：
1、groupingByConcurrent 返回map为ConcurrentMap,按类型分组 public static void testGroupingByConcurrentWithFunction() { System.out.println(&amp;#34;testGroupingByConcurrentWithFunction&amp;#34;); ConcurrentMap&amp;lt;Dish.Type, List&amp;lt;Dish&amp;gt;&amp;gt; collect = menu.</description></item><item><title>JAVA8-Optional API</title><link>https://willxwu.github.io/post/java8/08_java-optional-api/</link><pubDate>Fri, 01 Jul 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/08_java-optional-api/</guid><description>Optional API 一、Optional创建方式 前置条件： Insurance对象：
public class Insurance { private String name; public String getName() { return name; } } 1、empty 特点：使用get()方法时会抛出异常：No value present
范例：
Optional&amp;lt;Insurance&amp;gt; emptyOptional = Optional.&amp;lt;Insurance&amp;gt;empty(); 使用get（）获取结果：抛出异常
emptyOptional.get(); 输出结果:
Exception in thread &amp;#34;main&amp;#34; java.util.NoSuchElementException: No value present at java.base/java.util.Optional.get(Optional.java:148) 2、of 特点：使用get（）,不会抛异常
范例：
Optional&amp;lt;Insurance&amp;gt; ofInsurance = Optional.of(new Insurance()); ofInsurance.get(); 3、ofNullable 特点：上面两者综合，为null是掉empty，不为空调of。
3.1、为null时，调get()抛出异常 范例：
Optional&amp;lt;Insurance&amp;gt; ofNullableOptionalNull = Optional.ofNullable(null); ofNullableOptionalNull.get(); 输出结果：
Exception in thread &amp;#34;main&amp;#34; java.util.NoSuchElementException: No value present 3.2、不为null时，调get()不报错 范例：</description></item><item><title>JAVA8-Stream数据类型：mapToInt、mapToLong、mapToDouble</title><link>https://willxwu.github.io/post/java8/07_java8-stream-%E6%95%B0%E5%80%BC%E6%A0%BC%E5%BC%8F/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/07_java8-stream-%E6%95%B0%E5%80%BC%E6%A0%BC%E5%BC%8F/</guid><description>Stream数据类型 1、mapToInt、mapToLong、mapToDouble ## 可以将包装类拆箱成基本数据类型，节约内存空间 ## 范例：
方式一：reduce实现
//方式一：reduce实现 List&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,6,5,4,3,2,1); list.stream().reduce(Integer::sum).ifPresent(System.out::println); 方式二：mapToInt
//方式二：mapToInt list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,6,5,4,3,2,1); IntStream mapToInt = list.stream().mapToInt(i -&amp;gt; i.intValue()); int sum = mapToInt.sum(); System.out.println(sum); 方式三：mapToInt后用reduce实现
//方式三：mapToInt后用reduce实现 list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,6,5,4,3,2,1); IntStream intStream = list.stream().mapToInt(i -&amp;gt; i.intValue()); int reduce = list.</description></item><item><title>JAVA8-Stream API：filter、distinct、skip、limit</title><link>https://willxwu.github.io/post/java8/06_java8-stream-apifilterdistinctskiplimit/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/06_java8-stream-apifilterdistinctskiplimit/</guid><description>二、Stream API：filter、distinct、skip、limit 被操作数据
List&amp;lt;Integer&amp;gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,6,5,4,3,2,1); 1、filter 过滤 范例：
//filter 过滤 List&amp;lt;Integer&amp;gt; filterResult = list.stream().filter(i -&amp;gt; i % 2 == 0).collect(toList()); filterResult.stream().forEach(System.out::println); 2、distinct 去重 范例：
//distinct 去重 List&amp;lt;Integer&amp;gt; distinctResult = list.stream().distinct().collect(toList()); distinctResult.stream().forEach(System.out::println); 3、skip 截断 范例：
//skip 截断(跳过前面几个,超过长度，直接返回空) List&amp;lt;Integer&amp;gt; skipResult = list.stream().skip(5).collect(toList()); skipResult.stream().forEach(System.out::println); 4、limit 查询几条 范例：
//limit 查询几条 List&amp;lt;Integer&amp;gt; limitResult = list.stream().limit(3).collect(toList()); limitResult.stream().forEach(System.out::println); 二、Stream API：Map 1、map 数据处理 被操作数据
List&amp;lt;Integer&amp;gt; list = Arrays.</description></item><item><title>JAVA8-如何创建Stream</title><link>https://willxwu.github.io/post/java8/05_java8-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAstream/</link><pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/05_java8-%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BAstream/</guid><description>创建Stream 创建Stream方式： 创建Stream的方式 1、通过Collection 2、通过values 3、通过Arrays 4、通过file 5、通过iterate创建,无限的创建 6、通过Generate创建 7、自定义Supplier，创建Stream 使用范例 1、Collection创建，输出值顺序与之前放入值顺序一致。 范例：
/** * 通过Collection创建Stream，数据顺序和放入顺序一致 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByCollection(){ List&amp;lt;String&amp;gt; list = Arrays.asList(new String(&amp;#34;Hello&amp;#34;), new String(&amp;#34;world&amp;#34;), new String(&amp;#34;please&amp;#34;)); return list.stream(); } 2、values创建,输出值顺序与之前放入值顺序一致。 范例：
/** * 通过values创建Stream，顺序一直 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByValues(){ return Stream.of(&amp;#34;Hello&amp;#34;,&amp;#34;world&amp;#34;,&amp;#34;please&amp;#34;); } 3、Arrays创建,输出值顺序与之前放入值顺序一致。 范例：
/** * 3、通过Arrays创建，顺序一致 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByArrays(){ return Arrays.stream(new String[]{&amp;#34;Hello&amp;#34;,&amp;#34;world&amp;#34;,&amp;#34;please&amp;#34;}); } 4、File创建 范例：
/** * 4、通过file创建 * @return */ public static Stream&amp;lt;String&amp;gt; createStreamByFile(){ Path path = Paths.</description></item><item><title>JAVA8-Stream源码</title><link>https://willxwu.github.io/post/java8/04_java8-stream%E6%BA%90%E7%A0%81/</link><pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/04_java8-stream%E6%BA%90%E7%A0%81/</guid><description>Stream基本使用及特点 Stream说明 Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错。
1、可连续操作：
filter, map, and limit can be connected together to form a pipeline. 2、操作中断
collect causes the pipeline to be executed and closes it. 使用范例： package com.example.study.java8.streams; import java.util.*; import java.util.stream.Stream; import static java.util.Comparator.comparing; import static java.util.stream.Collectors.toList; /** * Stream使用 * Stream操作分为：2组，//注意，流式管道操作，只能操作一次，否则报错 * You can see two groups of operations: * 1、可连续操作 *  filter, map, and limit can be connected together to form a pipeline. * 2、操作中断 *  collect causes the pipeline to be executed and closes it.</description></item><item><title>JAVA8方法推导</title><link>https://willxwu.github.io/post/java8/03_java8%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC/</link><pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/03_java8%E6%96%B9%E6%B3%95%E6%8E%A8%E5%AF%BC/</guid><description>Lambda方法推导详细解析 什么情况下可以进行方法推导? 类的方法（静态方法）
对象的方法
构造方法
自定义函数式接口
范例： package com.example.study.java8.InterfaceFunction; import java.util.Arrays; import java.util.Comparator; import java.util.List; import java.util.function.BiFunction; import java.util.function.Consumer; import java.util.function.Function; import java.util.function.Supplier; /** * 方法推导 * 什么情况下可以进行方法推导： * 1、类的方法（静态方法） * 2、对象的方法 * 3、构造方法 */ public class MethodReferenceUsageDemoOne { public static void main(String[] args) { //方法推导，范例一：类的方法 //原始写法 Consumer&amp;lt;String&amp;gt; consumer = s-&amp;gt; System.out.println(s); genericityConsumer(consumer, &amp;#34;hello&amp;#34;); //1、进化一 genericityConsumer(s-&amp;gt;System.out.println(s), &amp;#34;world&amp;#34;); //2、进化二 genericityConsumer(System.out::println, &amp;#34;nice&amp;#34;); System.out.println(&amp;#34;===========================&amp;#34;); //方法推导，范例二：类的方法 List&amp;lt;Apple&amp;gt; list = Arrays.asList(new Apple(&amp;#34;red&amp;#34;, 10) , new Apple(&amp;#34;red&amp;#34;, 60) , new Apple(&amp;#34;blue&amp;#34;, 40) , new Apple(&amp;#34;black&amp;#34;, 30) , new Apple(&amp;#34;green&amp;#34;, 80) , new Apple(&amp;#34;blue&amp;#34;, 90) , new Apple(&amp;#34;green&amp;#34;, 60) , new Apple(&amp;#34;green&amp;#34;, 50) , new Apple(&amp;#34;red&amp;#34;, 20)); System.</description></item><item><title>Java8-functionInterface</title><link>https://willxwu.github.io/post/java8/02_java8-functioninterface/</link><pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/02_java8-functioninterface/</guid><description>&lt;h1 id="lambda表达式用法">Lambda表达式用法&lt;/h1>
&lt;h6 id="用户范例">用户范例&lt;/h6>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> com.example.study.java8.InterfaceFunction&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * lambda表达式用法
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">LambdaUsage&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runnable runnable1 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">()-&amp;gt;&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Runnable runnable2 &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Runnable&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Override&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">};&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process&lt;span style="color:#f92672">(&lt;/span>runnable1&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process&lt;span style="color:#f92672">(&lt;/span>runnable2&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process&lt;span style="color:#f92672">(()-&amp;gt;&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;hello&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">process&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Runnable runnable&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> runnable&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">run&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java8-Lambda语法</title><link>https://willxwu.github.io/post/java8/01_java8-lambda%E8%AF%AD%E6%B3%95/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/01_java8-lambda%E8%AF%AD%E6%B3%95/</guid><description>&lt;h1 id="lambda表达式">Lambda表达式&lt;/h1>
&lt;h2 id="一lambda语法">一、lambda语法&lt;/h2>
&lt;p>参数列表 lambda body部分&lt;/p>
&lt;p>(o1,o2)-&amp;gt;o1.getWeight().compareTo(o2.getWeight());&lt;/p>
&lt;h2 id="二合法lamdba表达式">二、 合法lamdba表达式&lt;/h2>
&lt;p>1、s -&amp;gt; s.length(); 或者 (String s) -&amp;gt; s.length();&lt;/p>
&lt;p>2、apple -&amp;gt; apple.getColor().equals(&amp;ldquo;great&amp;rdquo;); 或者 (Apple apple) -&amp;gt; apple.getColor().equals(&amp;ldquo;great&amp;rdquo;);&lt;/p>
&lt;p>3、(int x, int y) -&amp;gt; {&lt;/p>
&lt;p>System.out.println(x);&lt;/p>
&lt;p>System.out.println(y);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>4、() -&amp;gt; 12;&lt;/p>
&lt;p>5、()-{};&lt;/p>
&lt;p>6、()-&amp;gt;“hello” 或者 ()-&amp;gt;{return &amp;ldquo;hello&amp;rdquo;}&lt;/p>
&lt;h2 id="三语法总结">三、语法总结&lt;/h2>
&lt;p>语法一、（参数列表） -&amp;gt; 表达式&lt;/p>
&lt;p>语法二、（参数列表） -&amp;gt; {语句;}&lt;/p></description></item><item><title>JDK1.8的新特性</title><link>https://willxwu.github.io/post/java8/jdk1.8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</link><pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/java8/jdk1.8%E7%9A%84%E6%96%B0%E7%89%B9%E6%80%A7/</guid><description>&lt;h1 id="jdk18的新特性">JDK1.8的新特性&lt;/h1>
&lt;h1 id="一接口的默认方法">一、接口的默认方法&lt;/h1>
&lt;p>Java8允许我们给接口添加一个非抽象的方法实现，只需要使用default关键字即可，这个特征又叫做扩展方法，示例如下：&lt;/p>
&lt;p>代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Formula&lt;/span>&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">calculate&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> a&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">default&lt;/span> &lt;span style="color:#66d9ef">double&lt;/span> &lt;span style="color:#a6e22e">sqrt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> a&lt;span style="color:#f92672">){&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> Math&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sqrt&lt;/span>&lt;span style="color:#f92672">(&lt;/span>a&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Formula接口在拥有calculate方法之外同时还定义了sqrt方法，实现了Formula接口的子类只需要实现一个calculate方法，默认方法sqrt将在子类上可以直接使用。
代码如下：
Formula formula=new Formula）{@Override public double calculate（int a）{return sqrt（a&lt;em>100）；}]；formula.calculate（100）；/100.0 formula.sqrt（16）；//4.0&lt;/em>&lt;/p></description></item><item><title>SpringBoot整合Sleuth+Zipkin 服务链路追踪</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88sleuth+zipkin-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</link><pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88sleuth+zipkin-%E6%9C%8D%E5%8A%A1%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</guid><description>&lt;h1 id="springboot整合sleuthzipkin-服务链路追踪">SpringBoot整合Sleuth+Zipkin 服务链路追踪&lt;/h1>
&lt;h2 id="一整合-sleu">一、整合 Sleu&lt;/h2>
&lt;h3 id="1服务提供者与消费者导入依赖">1、服务提供者与消费者导入依赖&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;lt;!--整合 Sleut:服务提供者与消费者导入依赖--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.cloud&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-sleuth&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>3.1.1&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2打开-debug-日志">2、打开 debug 日志&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>logging:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> level:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> org.springframework.cloud.openfeign: debug
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> org.springframework.cloud.sleuth: debug
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SpringBoot整合Sentinel</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88sentinel/</link><pubDate>Tue, 21 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88sentinel/</guid><description>&lt;h1 id="springboot整合sentinel">SpringBoot整合Sentinel&lt;/h1>
&lt;h1 id="1引入依赖">1、引入依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>com.alibaba.cloud&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-cloud-starter-alibaba-sentinel&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2下载安装sentinel可视化控制台">2、下载安装Sentinel可视化控制台&lt;/h1>
&lt;p>&lt;a href="https://github.com/alibaba/Sentinel/releases">&lt;strong>下载&lt;/strong>&lt;/a>自己引入sentinel对应的核心包版本，下载地址：https://github.com/alibaba/Sentinel/releases&lt;/p>
&lt;p>&lt;strong>运行&lt;/strong>Sentinel可视化控制台&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>java -jar sentinel-dashboard-1.8.1.jar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Springboot整合seata分布式事务</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88seata%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>&lt;h1 id="springboot整合seata分布式事务">&lt;strong>Springboot整合seata分布式事务&lt;/strong>&lt;/h1>
&lt;h1 id="一创建seata日志表">一、创建seata日志表&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- 注意此处0.3.0+ 增加唯一索引 ux_undo_log
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>undo_log&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span> bigint(&lt;span style="color:#ae81ff">20&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> AUTO_INCREMENT,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>branch_id&lt;span style="color:#f92672">`&lt;/span> bigint(&lt;span style="color:#ae81ff">20&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>xid&lt;span style="color:#f92672">`&lt;/span> varchar(&lt;span style="color:#ae81ff">100&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>context&lt;span style="color:#f92672">`&lt;/span> varchar(&lt;span style="color:#ae81ff">128&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>rollback_info&lt;span style="color:#f92672">`&lt;/span> longblob &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>log_status&lt;span style="color:#f92672">`&lt;/span> int(&lt;span style="color:#ae81ff">11&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>log_created&lt;span style="color:#f92672">`&lt;/span> datetime &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>log_modified&lt;span style="color:#f92672">`&lt;/span> datetime &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>ext&lt;span style="color:#f92672">`&lt;/span> varchar(&lt;span style="color:#ae81ff">100&lt;/span>) &lt;span style="color:#66d9ef">DEFAULT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">PRIMARY&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>id&lt;span style="color:#f92672">`&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">UNIQUE&lt;/span> &lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#f92672">`&lt;/span>ux_undo_log&lt;span style="color:#f92672">`&lt;/span> (&lt;span style="color:#f92672">`&lt;/span>xid&lt;span style="color:#f92672">`&lt;/span>,&lt;span style="color:#f92672">`&lt;/span>branch_id&lt;span style="color:#f92672">`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>) ENGINE&lt;span style="color:#f92672">=&lt;/span>InnoDB AUTO_INCREMENT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#66d9ef">DEFAULT&lt;/span> CHARSET&lt;span style="color:#f92672">=&lt;/span>utf8;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SpringBoot整合RabbitMQ</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88mq/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88mq/</guid><description>&lt;h1 id="springboot整合rabbitmq">SpringBoot整合RabbitMQ&lt;/h1>
&lt;h1 id="1引入依赖">1、引入依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-amqp&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;version&amp;gt;&lt;/span>2.6.3&lt;span style="color:#f92672">&amp;lt;/version&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2配置rabbitmq">2、配置rabbitmq&lt;/h1>
&lt;p>通过RabbitProperties.properties配置文件配置链接&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span> rabbitmq:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> host: 192.168.56.10
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> virtual-host: /
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> port: 5672
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publisher-confirm-type: correlated
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> publisher-returns: true
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> template:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mandatory: true
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>springboot整合SpringSession</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88springsession/</link><pubDate>Sat, 18 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88springsession/</guid><description>&lt;p>springboot整合SpringSession&lt;/p>
&lt;h1 id="1引入依赖">1、引入依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.session&lt;span style="color:#f92672">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;artifactId&amp;gt;&lt;/span>spring-session-data-redis&lt;span style="color:#f92672">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">&amp;lt;/dependencies&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2springboot配置">2、springboot配置&lt;/h1>
&lt;p>&lt;em>application.properties&lt;/em>配置：保存类型&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-xml" data-lang="xml">&lt;span style="display:flex;">&lt;span>spring.session.store-type=redis # Session store type.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>SpringBoot整合定时任务和异步任务</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88quartz-scheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88quartz-scheduler%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="springboot整合定时任务和异步任务">SpringBoot整合定时任务和异步任务&lt;/h1>
&lt;h1 id="一定时任务">一、定时任务&lt;/h1>
&lt;p>&lt;strong>SpringBoot整合quartz-scheduler，执行定时任务。&lt;/strong>&lt;/p>
&lt;h2 id="1开启定时任务">1、开启定时任务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@EnableScheduling&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2开启一个定时任务">2、开启一个定时任务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">@Scheduled&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3编写cron表达式">3、编写cron表达式&lt;/h2>
&lt;p>cron表达式格式请参考&lt;a href="http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html">官方文档&lt;/a>&lt;/p></description></item><item><title>springboot整合redis</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88redis/</link><pubDate>Thu, 16 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88redis/</guid><description>&lt;h1 id="适合当如缓存场景">适合当如缓存场景：&lt;/h1>
&lt;ol>
&lt;li>即时性、数据一致性要求不高的。&lt;/li>
&lt;li>访问量大且更新频率不高的数据(读多，写少)&lt;/li>
&lt;/ol>
&lt;p>承担持久化工作。&lt;/p>
&lt;h1 id="读模式缓存使用流程">读模式缓存使用流程:&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202203031925978.png" alt="">&lt;/p>
&lt;p>凡是放入缓存中的数据，我们应该指定过期时间，使其可以再系统即使没有主动更新数据也能自动触发数据加载进缓存的流程。避免业务崩溃导致的数据永久不一致问题。&lt;/p>
&lt;p>解决分布式缓存中本地缓存导致数据不一致问题，可以使用redis中间件解决。&lt;/p></description></item><item><title>SpringBoot整合SpringCache</title><link>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88springcache/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/springboot/springboot%E6%95%B4%E5%90%88springcache/</guid><description>&lt;h1 id="springboot整合springcache">SpringBoot整合SpringCache&lt;/h1>
&lt;h1 id="1引入依赖">1、引入依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;lt;artifactId&amp;gt;spring-boot-starter-cache&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2引入redis依赖">2、引入redis依赖&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">&amp;lt;artifactId&amp;gt;spring-boot-starter-data-redis&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置redis地址密码等等，可参考springboo整合redis&lt;/p></description></item><item><title>OpenAI's services are not available in your country.</title><link>https://willxwu.github.io/post/tool/chatgpt/</link><pubDate>Tue, 14 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/chatgpt/</guid><description>OpenAI&amp;rsquo;s services are not available in your country.
chatGpt注册，OpenAI&amp;rsquo;s services are not available in your country.解决方法。
1、chatGpt注册 打开chatpgt官网https://chat.openai.com/auth/login，点击Sign up注册，跳转至注册页面。
2、邮箱验证 最好使用gmail、outlook海外邮箱，注册。打开邮箱链接，即可验证。
3、重新登录 提示设置用户姓名
4、手机号验证 使用国内手机号会提示“OpenAI&amp;rsquo;s services are not available in your country.”
5、OpenAI&amp;rsquo;s services are not available in your country 解决方案：
5.1、使用公共接码号码，但是基本都被使用过了。
5.2、使用虚拟外海号码。
6、虚拟外海号码 1、注册账号 打开官网https://sms-activate.org/注册，最好使用海外邮箱Gmail、Outlook。
2、账号充值 切换成中文，选择“充值”。
选择支付宝充值
选择充值1美元即可，大约6.46人民币。
3、获取号码 根据需求选择需要使用的服务类型、选择号码国家。这里注册chatgpt，直接搜索OpenAI即可。
选择要使用的国家号码，这里选择的印度。
填写要使用的数量，然后点后面的购物车后，右边会显示号码和一会接收到的验证码。
复制号码到chatGpt注册时，验证手机号的地方，一会就可以看到验证码了。
后面就可以直接注册成功chatgpt了。</description></item><item><title>安全发布,详解单例模式</title><link>https://willxwu.github.io/post/design-patterns/%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/design-patterns/%E5%AE%89%E5%85%A8%E5%8F%91%E5%B8%83%E8%AF%A6%E8%A7%A3%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid><description>安全发布对象 什么是安全发布？
发布对象：使一个对象能够被当前范围之外的代码所使用
代码示例
package com.yanxizhu.demo.concurrency.unSafePublish; import com.yanxizhu.demo.concurrency.annotation.UnThreadSafety; import lombok.extern.slf4j.Slf4j; import java.util.Arrays; /** * @description: 安全发布,这个例子是线程不安全的 * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/4/21 21:45 * @version: 1.0 */ @Slf4j @UnThreadSafety public class UnSafePublish { private String[] states = {&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;}; public String[] getStates() { return states; } public static void main(String[] args) { UnSafePublish unSafePublish = new UnSafePublish(); log.info(&amp;#34;{}&amp;#34;, Arrays.toString(unSafePublish.getStates())); unSafePublish.getStates()[0] = &amp;#34;d&amp;#34;; log.info(&amp;#34;{}&amp;#34;, Arrays.toString(unSafePublish.getStates())); } } 运行结果：
21:48:00.633 [main] INFO com.</description></item><item><title>Shiro权限管理框架</title><link>https://willxwu.github.io/post/permissions/shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/permissions/shiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E6%A1%86%E6%9E%B6/</guid><description>&lt;p>&lt;strong>首先知道Shiro架构有3个主要概念：Subject、SecurityManager和Realms。&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Shiro基础架构图&lt;/strong> ：&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.2.2/images/uploads/2021/06/shiro/ShiroBasicArchitecture.png" alt="Shiro基础架构图">
基础架构说明：
Subject: As we’ve mentioned in our Tutorial, the Subject is essentially a security specific ‘view’ of the the currently executing user. Whereas the word ‘User’ often implies a human being, a Subject can be a person, but it could also represent a 3rd-party service, daemon account, cron job, or anything similar - basically anything that is currently interacting with the software.
Subject instances are all bound to (and require) a SecurityManager. When you interact with a Subject, those interactions translate to subject-specific interactions with the SecurityManager.
（大概意思：Subject一词是一个安全术语，其基本意思是“当前的操作用户”。称之为“用户”并不准确，因为“用户”一词通常跟人相关。在安全领域，术语“Subject”可以是人，也可以是第三方进程、后台帐户（Daemon Account）、定时作业（Corn Job）或其他类似事物。它仅仅意味着“当前跟软件交互的东西”。但考虑到大多数目的和用途，你可以把它认为是Shiro的“用户”概念。
在程序中你都能轻易的获得Subject，允许在任何需要的地方进行安全操作。每个Subject对象都必须与一个SecurityManager进行绑定，你访问Subject对象其实都是在与SecurityManager里的特定Subject进行交互。）&lt;/p></description></item><item><title>本地事务与分布式事务</title><link>https://willxwu.github.io/post/distributed/%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/distributed/%E6%9C%AC%E5%9C%B0%E4%BA%8B%E5%8A%A1%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</guid><description>&lt;h1 id="本地事务">本地事务&lt;/h1>
&lt;h2 id="一事务的基本性质">一、事务的基本性质&lt;/h2>
&lt;p>数据库事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)
和持久性(Durabilily)，简称就是ACID；&lt;/p>
&lt;ol>
&lt;li>原子性：一系列的操作整体不可拆分，要么同时成功，要么同时失败&lt;/li>
&lt;li>一致性：数据在事务的前后，业务整体一致。(A向B转账，转账前后AB总金额一致)&lt;/li>
&lt;li>隔离性：事务之间互相隔离。&lt;/li>
&lt;li>持久性：一旦事务成功，数据一定会落盘在数据库。&lt;/li>
&lt;/ol>
&lt;p>单体应用中，我们多个业务操作使用同一条连接操作不同的数据表，一旦有异常，我们可以很容易的整体回滚；&lt;/p></description></item><item><title>接口幂等性</title><link>https://willxwu.github.io/post/distributed/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</link><pubDate>Fri, 10 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/distributed/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</guid><description>&lt;h1 id="接口幂等性">接口幂等性&lt;/h1>
&lt;h1 id="1什么是幂等性">1、什么是幂等性&lt;/h1>
&lt;p>&lt;strong>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的&lt;/strong>，不会因为多次点击而产生了副作用；比如说支付场景，用户购买了商品支付扣款成功，但是返回结果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条&amp;hellip;，这就没有保证接口的幂等性。&lt;/p>
&lt;h1 id="2哪些情况需要防止">2、哪些情况需要防止&lt;/h1>
&lt;p>用户多次点击按钮
用户页面回退再次提交
微服务互相调用，由于网络问题，导致请求失败。feign触发重试机制其他业务情况&lt;/p></description></item><item><title>提交代码到github</title><link>https://willxwu.github.io/post/git/%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0github/</link><pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/git/%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0github/</guid><description>create a new repository on the command line. push an existing repository from the command line. import code from another repository You can initialize this repository with code from a Subversion, Mercurial, or TFS project.
create a new repository on the command line git init git add README.md git commit -m &amp;#34;first commit&amp;#34; git branch -M main git remote add origin https://github.com/willxwu/xxx.git git push -u origin main push an existing repository from the command line git remote add origin https://github.</description></item><item><title>线程安全策略</title><link>https://willxwu.github.io/post/thread/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</link><pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</guid><description>&lt;p>线程安全策略&lt;/p>
&lt;h1 id="不可变对象">不可变对象&lt;/h1>
&lt;p>&lt;strong>不可变对象需要满足的条件：&lt;/strong>
对象创建以后其状态就不能修改
对象所有域都是final类型
对象是正确创建的（在对象创建期间，this引用没有逸出）&lt;/p>
&lt;hr>
&lt;h2 id="一final关键字">&lt;strong>一、final关键字&lt;/strong>&lt;/h2>
&lt;p>final关键字：可修饰类、方法、变量。&lt;/p>
&lt;p>&lt;strong>修饰类&lt;/strong>：不能被继承&lt;/p>
&lt;p>&lt;strong>修饰方法&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>锁定方法不被继承类修改；&lt;/li>
&lt;li>效率&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>修饰变量&lt;/strong>：基本数据类型变量、引用类型变量&lt;/p></description></item><item><title>openFeign远程调用丢失请求头-解决方案</title><link>https://willxwu.github.io/post/problem/openfeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%A2%E5%A4%B1%E8%AF%B7%E6%B1%82%E5%A4%B4/</link><pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/openfeign%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8%E4%B8%A2%E5%A4%B1%E8%AF%B7%E6%B1%82%E5%A4%B4/</guid><description>&lt;p>openFeign远程调用丢失请求头&lt;/p>
&lt;p>feign在远程调用之前要构造请求，调用会经过很多拦截器。丢失请求头原因，是远程调用重新构建了request请求，新的request没有请求头headr。&lt;/p>
&lt;p>&lt;strong>解决方案：定义一个feign的拦截器&lt;/strong>&lt;/p>
&lt;p>&lt;strong>先来看一下feign远程调用类SynchronousMethodHandler&lt;/strong>&lt;/p></description></item><item><title>Nacos持久化MySQL问题-解决方案</title><link>https://willxwu.github.io/post/problem/nacos%E6%8C%81%E4%B9%85%E5%8C%96mysql%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/nacos%E6%8C%81%E4%B9%85%E5%8C%96mysql%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid><description>&lt;h1 id="nacos持久化mysql问题-解决方案">Nacos持久化MySQL问题-解决方案&lt;/h1>
&lt;h2 id="一说明">一、说明&lt;/h2>
&lt;p>环境说明：&lt;/p>
&lt;p>MySQL：CentOS环境通过Docker部署的MySQL5.7&lt;/p>
&lt;p>Nacos：2.0.3&lt;/p>
&lt;p>原始配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### If use MySQL as datasource:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># spring.datasource.platform=mysql&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Count of DB:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># db.num=1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">### Connect URL of DB:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;amp;connectTimeout=1000&amp;amp;socketTimeout=3000&amp;amp;autoReconnect=true&amp;amp;useUnicode=true&amp;amp;useSSL=false&amp;amp;serverTimezone=UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># db.user.0=nacos&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># db.password.0=nacos&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Kafka部署及脚本使用</title><link>https://willxwu.github.io/post/centos/kafka%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Sun, 05 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/kafka%E9%83%A8%E7%BD%B2%E5%8F%8A%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>环境版本说明 环境：CentOS7
版本：JDK1.8、Zookeeper-3.4.14、Kafka2.12-1.0.2
JDK安装 JDK1.8安装
rpm -ivh jdk-8u261-linux-x64.rpm 环境变量配置
vim /etc/profile 最后一行加上配置
export JAVA_HOME=/usr/java/jdk1.8.0_261-amd64 export PATH=$PATH:$JAVA_HOME/bin jdk验证
java -version Zookeeper安装 安装
tar -zxf zookeeper-3.4.14.tar.gz -C /opt 环境变量配置
vim /etc/profile ZOOKEEPER_PREFIX指向Zookeeper的解压目录
export ZOOKEEPER_PREFIX=/opt/zookeeper-3.4.14 将Zookeeper的bin目录添加到PATH中
export PATH=$PATH:$ZOOKEEPER_PREFIX/bin 设置环境变量ZOO_LOG_DIR，指定Zookeeper保存日志的位置
export ZOO_LOG_DIR=/var/zookeeper/log 使配置生效
source /etc/profile 修改zookeeper配置
cd conf cp zoo_sample.cfg zoo.cfg 修改配置文件zoo.cfg
vi zoo.cfg 修改zookeeper数据存放位置配置
修改前
dataDir=/tmp/zookeeper 修改后
dataDir=/var/zookeeper/data 启动zookeeper
进入zookeeper安装目录
=/var/zookeeper/bin 启动zookeeper
zkServer.sh start 查看zookeeper状态
zkServer.sh status Kafka安装 安装kafka
tar -zxf kafka_2.12-1.0.2.tgz -C /opt 修改环境变量</description></item><item><title>K8S集群部署</title><link>https://willxwu.github.io/post/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</link><pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/k8s/k8s%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</guid><description>&lt;h1 id="k8s集群部署">K8S集群部署&lt;/h1>
&lt;h1 id="一virtualbox虚拟机搭建">一、VirtualBox虚拟机搭建&lt;/h1>
&lt;p>通过Oracle VM VirtualBox，Vagrant搭建三台虚拟机。&lt;/p>
&lt;h2 id="准备工作">准备工作&lt;/h2>
&lt;h3 id="1准备软件">1、准备软件&lt;/h3>
&lt;p>CentOS虚拟系统：CentOS-7-x86_64-Vagrant-2004_01.VirtualBox.box&lt;/p>
&lt;p>虚拟软件(VirtualBox)：VirtualBox-6.1.34-150636-Win.exe&lt;/p>
&lt;p>Vagrant安装虚拟机软件：vagrant_2.2.19_i686.msi。&lt;/p></description></item><item><title>初识k8s</title><link>https://willxwu.github.io/post/k8s/k8s%E9%83%A8%E7%BD%B2%E7%BC%96%E6%8E%92/</link><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/k8s/k8s%E9%83%A8%E7%BD%B2%E7%BC%96%E6%8E%92/</guid><description>&lt;h1 id="初识k8s">初识k8s&lt;/h1>
&lt;h1 id="简介">&lt;strong>简介&lt;/strong>：&lt;/h1>
&lt;p>Kubernetes 简称k8s。是用于自动部署，扩展和管理容器化应用程序的开源系统。
中文官网：https://kubernetes.io/zh/
中文社区：https://www.kubernetes.org.cn/
官方文档：https://kubernetes.io/zh/docs/home/
社区文档：http://docs.kubernetes.org.cn/&lt;/p>
&lt;h1 id="部署方式的进化">&lt;strong>部署方式的进化&lt;/strong>&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202203112019717.png" alt="">&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/overview/">https://kubernetes.io/zh/docs/concepts/overview/&lt;/a>&lt;/p></description></item><item><title>SSH创建</title><link>https://willxwu.github.io/post/git/ssh%E5%88%9B%E5%BB%BA/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/git/ssh%E5%88%9B%E5%BB%BA/</guid><description>1. 设置Git用user name和email git config --global user.name &amp;#34;XXX&amp;#34; git config --global user.email &amp;#34;XXX@gmail.com&amp;#34; 2. 生成密钥 ssh-keygen -t rsa -C &amp;#34;XXX@gmail.com&amp;#34; 中间连续3次Enter键.
3. 测试SSH key是否设置成功 ssh -T git@github.com 出现下面提示直接输入yes.
The authenticity of host &amp;#39;github.com (192.30.253.113)&amp;#39; can&amp;#39;t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? yes 输出如下，则表示通过.
Hi xxxx! You&amp;#39;ve successfully authenticated, but GitHub does not provide shell access. 使用时，会根据本地git密钥信息与git或者coding仓库密钥信息比对，本地上传时会提示登录。</description></item><item><title>Widnows常用命令</title><link>https://willxwu.github.io/post/tool/widnows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/widnows%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>Widnows常用命令 查看所有端口号情况
netstat -ano 搜索查看指定端口
netstat -ano|findstr 端口号 查看所有程序占用端口信息
tasklist 搜索指定端口被那个程序占用
tasklist|findstr 端口号</description></item><item><title>Docker启动Jenkins报错</title><link>https://willxwu.github.io/post/problem/iptables-failed-iptables--wait-t-nat-a-docker-p-tcp-d-00--dport-10241-j-dnat--to-destination-172/</link><pubDate>Tue, 31 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/iptables-failed-iptables--wait-t-nat-a-docker-p-tcp-d-00--dport-10241-j-dnat--to-destination-172/</guid><description>iptables failed: iptables &amp;ndash;wait -t nat -A DOCKER -p tcp -d 0/0 &amp;ndash;dport 10241 -j DNAT &amp;ndash;to-destination 172.17.0.5:50000 ! -i docker0: iptables: No chain/target/match by that name.
docker启动Jenkins报错：
iptables failed: iptables --wait -t nat -A DOCKER -p tcp -d 0/0 --dport 10241 -j DNAT --to-destination 172.17.0.5:50000 ! -i docker0: iptables: No chain/target/match by that name. 解决办法：重启docker
systemctl restart docker</description></item><item><title>博客搭建问题记录</title><link>https://willxwu.github.io/post/blog/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</link><pubDate>Mon, 30 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/blog/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</guid><description>博客一直使用firekylin搭建，最近看着typecho活跃度还可以，于是本周末用docker重新搭建了博客。
一、环境说明 操作系统：CentOS7.6
技术：Docker、MySQL、PHP、Nginx
使用工具：Xftp 7、Xshell 7、Notepad++
博客系统：Typecho
二、安装步骤 Docker环境搭建 Docker安装MySQL Docker安装PHP Docker安装Nginx 三、遇到问题 安装mysql、php、nginx时，映射文件路径错误，导致安装好后，找不到文件。
Nginx配置时映射路径错误、80端口自动转发443端口，导致http访问一直追加路径。
证书路径放置错误。
Typecho初始化安装时，提示&amp;quot;对不起，无法连接数据库，请先检查数据库配置再继续进行安装&amp;quot;。
四、解决方案 通过docker log 容器，查看日志，一步步解决。 添加异常提示代码：, $e-&amp;gt;getMessage() instal.php第56行，添加ob_start(); ip地址错误，默认localhost，docker安装时，需要改成公网ip或局域网ip。 未创建typecho数据库。 Nginx配置文件:
server { listen 443 ssl http2 reuseport; server_name yanxizhu.com www.yanxizhu.com; root /var/www/html/yanxizhu.com; index index.php; ssl on; ssl_certificate /etc/nginx/conf.d/自己证书.crt; ssl_certificate_key /etc/nginx/conf.d/自己证书key.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; access_log /var/log/nginx/typecho_access.log main; if (!-e $request_filename) { rewrite ^(.*)$ /index.php$1 last; } location ~ .</description></item><item><title>keytool证书导入</title><link>https://willxwu.github.io/post/problem/keytool%E8%AF%81%E4%B9%A6%E5%AF%BC%E5%85%A5/</link><pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/keytool%E8%AF%81%E4%B9%A6%E5%AF%BC%E5%85%A5/</guid><description>最近项目对接时，中间B2B服务切换了域名，导致现有项目调用接口地址需要进行切换为https，同时需要安装SSL证书，这里记录一下JAVA工具keytool导入证书的过程。
一、问题点 切换域名后加上https，未导入证书报错:
[ERROR] - [2022-02-25 08:49:40.861] - [http-nio-9999-exec-1] - [DealParamAction.java:needConfirmAction:133] - no confirm method, call actual method = getNSDDtailByInterface [INFO ] - [2022-02-25 08:50:04.483] - [http-nio-9999-exec-1] - [HttpMethodDirector.java:executeWithRetry:439] - I/O exception (java.net.ConnectException) caught when processing request: Connection timed out: connect [INFO ] - [2022-02-25 08:50:04.484] - [http-nio-9999-exec-1] - [HttpMethodDirector.java:executeWithRetry:445] - Retrying request [INFO ] - [2022-02-25 08:50:25.487] - [http-nio-9999-exec-1] - [HttpMethodDirector.java:executeWithRetry:439] - I/O exception (java.net.ConnectException) caught when processing request: Connection timed out: connect [INFO ] - [2022-02-25 08:50:25.</description></item><item><title>初识RabbitMQ</title><link>https://willxwu.github.io/post/rabbitmq/%E5%88%9D%E8%AF%86rabbitmq/</link><pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/%E5%88%9D%E8%AF%86rabbitmq/</guid><description>&lt;h1 id="rabbitmq作用">RabbitMQ作用&lt;/h1>
&lt;p>&lt;strong>异步处理、应用解耦、流量控制&lt;/strong>&lt;/p>
&lt;h1 id="概述">概述&lt;/h1>
&lt;p>1、大多应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力&lt;/p>
&lt;p>2、消息服务中两个重要概念：&lt;/p>
&lt;p>&lt;strong>消息代理（message broker）&lt;strong>和&lt;/strong>目的地（destination）&lt;/strong> 当消息发送者发送 消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。&lt;/p></description></item><item><title>Docker安装ShowDoc ssl https nginx配置</title><link>https://willxwu.github.io/post/nginx/showdoc-ssl-https-nginx%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/nginx/showdoc-ssl-https-nginx%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="docker安装showdoc-ssl-https-nginx配置">Docker安装ShowDoc ssl https nginx配置&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202211292110216.png" alt="image-20221129211012004">&lt;/p>
&lt;h1 id="一docker安装showdoc">一、docker安装showdoc&lt;/h1>
&lt;h3 id="1拉取镜像">1、拉取镜像&lt;/h3>
&lt;p>&lt;em># 中国大陆镜像安装命令（安装后记得执行docker tag命令以进行重命名）&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull registry.cn-shenzhen.aliyuncs.com/star7th/showdoc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>docker tag registry.cn-shenzhen.aliyuncs.com/star7th/showdoc:latest star7th/showdoc:latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>virtualbox使用</title><link>https://willxwu.github.io/post/tool/virtualbox%E5%AE%89%E8%A3%85/</link><pubDate>Thu, 26 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/virtualbox%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="一virtualbox安装">一、virtualbox安装&lt;/h1>
&lt;p>1、&lt;a href="https://www.virtualbox.org/">下载&lt;/a> &lt;a href="https://www.virtualbox.org/">https://www.virtualbox.org/&lt;/a>&lt;/p>
&lt;p>2、在主板开启CPU虚拟化，自行百度&lt;/p>
&lt;p>3、安装，直接下一步，选择安装路径。&lt;/p></description></item><item><title>virtualbox使用</title><link>https://willxwu.github.io/post/tool/virtualbox%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 25 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/virtualbox%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202202282019143.png" alt="Oracle VM VirtualBox">&lt;/p>
&lt;h1 id="一virtualbox安装">一、virtualbox安装&lt;/h1>
&lt;p>1、&lt;a href="https://www.virtualbox.org/">下载&lt;/a> &lt;a href="https://www.virtualbox.org/">https://www.virtualbox.org/&lt;/a>&lt;/p>
&lt;p>2、在主板开启CPU虚拟化，自行百度&lt;/p>
&lt;p>3、安装，直接下一步，选择安装路径。&lt;/p></description></item><item><title>Typora最后免费版本下载</title><link>https://willxwu.github.io/post/tool/typora%E6%9C%80%E5%90%8E%E5%85%8D%E8%B4%B9%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</link><pubDate>Tue, 24 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/typora%E6%9C%80%E5%90%8E%E5%85%8D%E8%B4%B9%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</guid><description>Typora最后免费版本下载
Typora收费后，开始保留最后一个免费版本Version0.11.18(beta)，欢迎食用。
阿里网盘：
「typora-update-x64-1117.exe」https://www.aliyundrive.com/s/Xez1W6kvWZv 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。
百度网盘：
链接：https://pan.baidu.com/s/1zaaqxIv99xX98Qemw9tLrw 提取码：utq4
天翼网盘:
https://cloud.189.cn/t/3yEJbavmieye (访问码:1oov)</description></item><item><title>开发必备工具</title><link>https://willxwu.github.io/post/tool/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/%E5%BF%85%E5%A4%87%E5%B7%A5%E5%85%B7/</guid><description>1、 RabbitMQ Simulator RabbitMQ模拟器，可用于模拟MQ消息的收发消费情况。使用下面的绘图区域来表示您的消息传递拓扑。 将消息元素从左侧的工具箱拖到画布上。 要连接节点，请按住 ALT 键（或 SHIFT 键）并从源节点拖动以将其连接到目标节点。 官网地址 http://tryrabbitmq.com
2、 draw.io draw.io 是一款免费的在线图表编辑工具, 可以用来编辑工作流, BPM, org charts, UML, ER图, 网络拓朴图等 官网地址 http://draw.io
3、 PuTTY PuTTY 是一个 SSH 和 telnet 客户端，最初由 Simon Tatham 为 Windows 平台开发。 PuTTY 是开源软件，提供源代码，由一群志愿者开发和支持。 官网地址 https://www.putty.org/
4、 WinSCP WinSCP 是一个 Windows 环境下使用的 SSH 的开源图形化 SFTP 客户端。同时支持 SCP 协议。它的主要功能是在本地与远程计算机间安全地复制文件，并且可以直接编辑文件。 官网地址 https://winscp.net
5、 FastStone Capture FastStone Capture 是一款功能强大、轻巧但功能齐全的截图工具和屏幕录像机以及编辑共计。编辑工具包括注释（文本、箭头线、高光）、调整大小、裁剪、锐化、水印、应用边缘效果等等。其他功能包括图像扫描、全局热键、自动文件名生成、支持外部编辑器、颜色选择器、屏幕放大镜、屏幕十字准线和屏幕标尺等功能。 官网地址 https://www.faststone.org
6、 potplayer 一款功能强大、界面美观、简洁的视频播放器。 官网地址 https://potplayer.daum.net
7、 notepad++ Notepad++ 是一个免费的（如“言论自由”和“免费啤酒”）源代码编辑器和支持多种语言的记事本替代品。 在 MS Windows 环境中运行，其使用受 GNU 通用公共许可证管理。 官网地址 https://notepad-plus-plus.</description></item><item><title>Xshell 7、Xftp 7免费版本下载</title><link>https://willxwu.github.io/post/tool/xshell-7xftp-7%E5%85%8D%E8%B4%B9%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</link><pubDate>Sun, 22 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/xshell-7xftp-7%E5%85%8D%E8%B4%B9%E7%89%88%E6%9C%AC%E4%B8%8B%E8%BD%BD/</guid><description>Xshell 7、Xftp 7免费版本下载，官网每次下载懒得找，懒得注册，这里提供官网原版下载，官网下载地址
https://www.xshell.com/zh/free-for-home-school/
阿里网盘：
https://www.aliyundrive.com/s/ZV2jMWP4Fsr
百度网盘：
链接：https://pan.baidu.com/s/13Hx_HYbZFC4BGW56IlOdqA 提取码：xb2e
天翼网盘：
https://cloud.189.cn/t/ueABVvANryMn (访问码:w2se)
https://cloud.189.cn/t/Yjymuu3EF3Az (访问码:7it5)</description></item><item><title>jenkins nginx配置二级域名</title><link>https://willxwu.github.io/post/nginx/nginx%E9%85%8D%E7%BD%AEjenkins%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A443-ssl%E8%AE%BF%E9%97%AE/</link><pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/nginx/nginx%E9%85%8D%E7%BD%AEjenkins%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E4%BB%A5%E5%8F%8A443-ssl%E8%AE%BF%E9%97%AE/</guid><description>nginx配置jenkins二级域名，以及443 SSL访问 新增配置文件
server { listen 443; #listen 80; server_name jenkins.yanxizhu.com; #error_page 404/404.html; ssl_certificate /etc/nginx/conf.d/jenkins.yanxizhu.com_bundle.crt; ssl_certificate_key /etc/nginx/conf.d/jenkins.yanxizhu.com.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; error_page 497 https://$host$request_uri; #Location配置 location / { proxy_set_header X-Rea $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Nginx-Proxy true; proxy_pass http://xx.xxx.xx.xx:10240; proxy_set_header X-Forwarded-Proto $scheme; } access_log /var/log/nginx/jenkins.yanxizhu.com.log; } server { listen 80; server_name jenkins.yanxizhu.com; rewrite ^(.*) https://jenkins.yanxizhu.com$1 permanent; } 注意：自己的端口以及ip地址和域名，以及域名解析配置、SSL证书名字根据自己的修改。</description></item><item><title>Nginx配置优化</title><link>https://willxwu.github.io/post/nginx/nginx%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/nginx/nginx%E9%85%8D%E7%BD%AE%E4%BC%98%E5%8C%96/</guid><description>&lt;h1 id="nginx配置优化">Nginx配置优化&lt;/h1>
&lt;h1 id="1隐藏nginx版本信息">1、隐藏nginx版本信息&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">#不显示nginx版本
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">server_tokens&lt;/span> &lt;span style="color:#66d9ef">off&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="2buffers缓存">2、Buffers缓存&lt;/h1>
&lt;p>另一个很重要的参数为buffer，如果buffer太小，Nginx会不停的写一些临时文件，这样会导致磁盘不停的去读写。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">client_body_buffer_size&lt;/span> &lt;span style="color:#e6db74">10K&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">client_header_buffer_size&lt;/span> &lt;span style="color:#ae81ff">1k&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">client_max_body_size&lt;/span> &lt;span style="color:#ae81ff">8m&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">large_client_header_buffers&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span> &lt;span style="color:#ae81ff">1k&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Nginx反向代理微服务配置</title><link>https://willxwu.github.io/post/nginx/nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</link><pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/nginx/nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</guid><description>&lt;h1 id="nginx反向代理微服务配置">Nginx反向代理微服务配置&lt;/h1>
&lt;h2 id="一本地域名服务访问过程">一、本地域名服务访问过程&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202203142138225.png" alt="">&lt;/p>
&lt;h2 id="二正向代理和反向代理">二、正向代理和反向代理&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202203142129184.png" alt="">&lt;/p>
&lt;h2 id="三nginxwindows搭建域名访问环境">三、Nginx+Windows搭建域名访问环境&lt;/h2></description></item><item><title>RabbitMQ延时队列</title><link>https://willxwu.github.io/post/rabbitmq/rabbitmq%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</link><pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/rabbitmq%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</guid><description>&lt;h1 id="rabbitmq延时队列实现定时任务">RabbitMQ延时队列（实现定时任务）&lt;/h1>
&lt;p>场景： 比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。 常用解决方案： spring的 schedule 定时任务轮询数据库 缺点： 消耗系统内存、增加了数据库的压力、存在较大的时间误差 解决：rabbitmq的消息TTL和死信Exchange结合&lt;/p></description></item><item><title>RabbitMQ运行机制</title><link>https://willxwu.github.io/post/rabbitmq/rabbitmqy%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 17 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/rabbitmq/rabbitmqy%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="rabbitmq运行机制">RabbitMQ运行机制&lt;/h1>
&lt;p>&lt;strong>AMQP 中的消息路由&lt;/strong>&lt;/p>
&lt;p>AMQP 中消息的路由过程和 Java 开 发者熟悉的 JMS 存在一些差别， AMQP 中增加了 Exchange 和 Binding 的角色。生产者把消息发布 到 Exchange 上，消息最终到达队列 并被消费者接收，而 Binding 决定交 换器的消息应该发送到那个队列&lt;/p>
&lt;h1 id="exchange-类型">Exchange 类型&lt;/h1></description></item><item><title>MyCat的安装及使用</title><link>https://willxwu.github.io/post/mysql/mycat%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/mysql/mycat%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="mycat的安装及使用">MyCat的安装及使用&lt;/h1>
&lt;h1 id="一mycat的安装">一、MyCat的安装&lt;/h1>
&lt;h4 id="1环境准备">1、环境准备&lt;/h4>
&lt;p>​ 本次课程使用的虚拟机环境是centos6.5，首先准备四台虚拟机，安装好mysql，方便后续做读写分离和主从复制。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>192.168.85.111 node01
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.85.112 node02
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.85.113 node03
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>192.168.85.114 node04
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>MyCat的基本介绍及安装</title><link>https://willxwu.github.io/post/mysql/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/mysql/mycat%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D%E5%8F%8A%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="mycat">MyCat&lt;/h1>
&lt;h1 id="一基础知识">一、基础知识&lt;/h1>
&lt;h2 id="1分布式系统">1、分布式系统&lt;/h2>
&lt;p>​ 分布式系统是指其组件分布在网络上，组件之间通过传递消息进行通信和动作协调的系统。它的核心理念是让多台服务器协同工作，完成单台服务器无法处理的任务，尤其是高并发或者大数据量的额任务。它的特点是：&lt;/p>
&lt;p>​ **透明性：**分布式系统对于用户是透明的，一个分布式系统在用户面前的表现就像一个传统的单处理机分时系统，可用用户不必了解其内部结构就能使用;&lt;/p>
&lt;p>​ **扩展性：**分布式系统的最大特点是可扩展性，它能够根据需求的增加而扩展，可以通过横向扩展使集群的整体性能得到线性提升，也可以通过纵向扩展单台服务器的性能使服务器集群的性能得到提升;&lt;/p>
&lt;p>​ **可靠性：**分布式系统不允许单点失效的问题存在，它的基本思想是，如果一台机器坏了，则其他机器能够接替它进行工作，具有持续服务的特性;&lt;/p>
&lt;p>​ **高性能：**高性能才是设计分布式系统的初衷.&lt;/p></description></item><item><title>MySQL优化</title><link>https://willxwu.github.io/post/mysql/mysql%E4%BC%98%E5%8C%96/</link><pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/mysql/mysql%E4%BC%98%E5%8C%96/</guid><description>&lt;h1 id="索引">索引&lt;/h1>
&lt;h2 id="一全表扫描">&lt;strong>一、全表扫描&lt;/strong>&lt;/h2>
&lt;p>没有使用索引的时候，数据的查询需要进行多次IO读写，这样的性能较差——全表扫描的过程。&lt;/p>
&lt;h2 id="二索引">&lt;strong>二、索引&lt;/strong>&lt;/h2>
&lt;p>为数据库的某个字段创建索引，相当是为这个字段的内容创建了一个目录。通过这个目录可以快速的实现数据的定位，也就是通过索引能够快速的找到某条数据所在磁盘的位置。&lt;/p>
&lt;h2 id="三索引存放位置">&lt;strong>三、索引存放位置&lt;/strong>&lt;/h2></description></item><item><title>Springboot同一Server类方法调用事务解决方案</title><link>https://willxwu.github.io/post/spring/springboot%E5%90%8C%E4%B8%80server%E7%B1%BB%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/spring/springboot%E5%90%8C%E4%B8%80server%E7%B1%BB%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>Springboot同一Server类方法调用事务解决方案 1、引入springboot-aop start &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-aop&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 主要是使用里面的动态代理
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.aspectj&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;aspectjweaver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.9.7&amp;lt;/version&amp;gt; &amp;lt;scope&amp;gt;compile&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 2、开启动态代理 @EnableAspectJAutoProxy(exposeProxy = true) @EnableDiscoveryClient @SpringBootApplication public class FamilyBookingApplication { public static void main(String[] args) { SpringApplication.run(FamilyBookingApplication.class, args); } } @EnableAspectJAutoProxy(exposeProxy = true)：
开启aspectj动态代理功能。以后所有的动态代理都是aspectj对象暴露代理对象。
3、本类互调用代理对象调用 @Service(&amp;#34;userService&amp;#34;) public class UserServiceImpl implements userService { @Transactional public void a(){ UserService userService = (UserService)AopContext.currentProxy(); userService.b(); userService.c(); } @Transactional public void b(){ } @Transactional public void c(){ } }</description></item><item><title>Springboot拦截器配置</title><link>https://willxwu.github.io/post/spring/springboot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/</link><pubDate>Thu, 12 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/spring/springboot%E6%8B%A6%E6%88%AA%E5%99%A8%E9%85%8D%E7%BD%AE/</guid><description>Springboot拦截器配置
1、拦截器配置，主要实现HandlerInterceptor接口 import org.springframework.stereotype.Component; import org.springframework.web.servlet.HandlerInterceptor; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; /** * @description: 拦截器，配合FamilyWebConfig 配置使用 * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/3/10 22:36 * @version: 1.0 */ @Component public class LoginUserInterceptor implements HandlerInterceptor { public static ThreadLocal&amp;lt;Object&amp;gt; objUser = new ThreadLocal&amp;lt;&amp;gt;(); @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { Object loginusr = request.getSession().getAttribute(&amp;#34;LOGIN_USR&amp;#34;); if(loginusr != null){ objUser.set(loginusr); //登录了才能访问 return true; }else{ //没登录，跳转去登录 return false; } } } 由于拦截器需要配合web配置使用，因此创建web配置。</description></item><item><title>SpringBoot RestTemplate</title><link>https://willxwu.github.io/post/spring/resttemplate%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 11 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/spring/resttemplate%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="resttemplate使用">RestTemplate使用&lt;/h1>
&lt;h1 id="一依赖注入">一、依赖注入&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@Bean&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 开启负载均衡
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">@LoadBalanced&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> RestTemplate &lt;span style="color:#a6e22e">restTemplate&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> RestTemplate&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="二调用服务">二、调用服务&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>String url &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;http://provider/getHi&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String respStr &lt;span style="color:#f92672">=&lt;/span> restTemplate&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getForObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>url&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Invalid default value for 'created_date_'</title><link>https://willxwu.github.io/post/problem/mysql%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</link><pubDate>Tue, 10 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/mysql%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</guid><description>[ERR] 1067 - Invalid default value for &amp;lsquo;created_date_&amp;rsquo;[ERR]
set global sql_mode = &amp;#39;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&amp;#39;;</description></item><item><title>Git代理配置与取消代理</title><link>https://willxwu.github.io/post/git/git%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/git/git%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE%E4%B8%8E%E5%8F%96%E6%B6%88%E4%BB%A3%E7%90%86/</guid><description>Git代理配置与取消代理 查看是否配置代理
git config --global http.proxy 配置代理
git config --global http.proxy http://127.0.0.1:10809 git config --global https.proxy http://127.0.0.1:10809 取消代理
$ git config --global --unset http.proxy $ git config --global --unset https.proxy 注意：http://127.0.0.1:10809为自己代理地址，根据自己情况修改。</description></item><item><title>maven依赖冲突解决方案</title><link>https://willxwu.github.io/post/idea/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Sun, 08 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/idea/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>maven依赖冲突解决方案 1、找到项目pom文件。
2、快捷键打开依赖图。
ctlr+alt+shift+u 3、红色表示冲突。
4、右键exclude排除。</description></item><item><title>Java Executors线程池</title><link>https://willxwu.github.io/post/thread/executors%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/executors%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>Executors线程池 package com.yanxizhu; import java.util.ArrayList; import java.util.List; import java.util.concurrent.Callable; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Future; /* * 一、线程池：提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建与销毁额外开销，提高了响应的速度。 * * 二、线程池的体系结构： * java.util.concurrent.Executor : 负责线程的使用与调度的根接口 * |--**ExecutorService 子接口: 线程池的主要接口 * |--ThreadPoolExecutor 线程池的实现类 * |--ScheduledExecutorService 子接口：负责线程的调度 * |--ScheduledThreadPoolExecutor ：继承 ThreadPoolExecutor， 实现 ScheduledExecutorService * * 三、工具类 : Executors * ExecutorService newFixedThreadPool() : 创建固定大小的线程池 * ExecutorService newCachedThreadPool() : 缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。 * ExecutorService newSingleThreadExecutor() : 创建单个线程池。线程池中只有一个线程 * * ScheduledExecutorService newScheduledThreadPool() : 创建固定大小的线程，可以延迟或定时的执行任务。 */ public class TestThreadPool { public static void main(String[] args) throws Exception { //1.</description></item><item><title>Java CopyOnWriteArrayList</title><link>https://willxwu.github.io/post/thread/copyonwritearraylist%E7%94%A8%E4%BA%8E%E9%81%8D%E5%8E%86/</link><pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/copyonwritearraylist%E7%94%A8%E4%BA%8E%E9%81%8D%E5%8E%86/</guid><description>package com.yanxizhu; import java.util.*; /** * @description: synchronizedList遍历错误 * @date: 2022/3/19 11:30 * @version: 1.0 */ public class ConCurrentHashMapTest { public static void main(String[] args) { conCurrentDemo conCurrentDemo = new conCurrentDemo(); for(int i=0;i&amp;lt;5;i++){ new Thread(conCurrentDemo).start(); } } public static class conCurrentDemo implements Runnable{ //并发线程安全，修改报错 private static List&amp;lt;String&amp;gt; list = Collections.synchronizedList(new ArrayList&amp;lt;&amp;gt;()); static { list.add(&amp;#34;apple&amp;#34;); list.add(&amp;#34;xiaomi&amp;#34;); list.add(&amp;#34;huawei&amp;#34;); } @Override public void run() { Iterator&amp;lt;String&amp;gt; iterator = list.iterator(); while(iterator.hasNext()){ System.out.println(iterator.next()); list.add(&amp;#34;iphone&amp;#34;); } } } } 线程安全报错：</description></item><item><title>Atomic使用</title><link>https://willxwu.github.io/post/lock/atomic%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/atomic%E4%BD%BF%E7%94%A8/</guid><description>import java.util.concurrent.atomic.AtomicInteger; /** * @description: Atomic使用 * @date: 2022/3/19 10:14 * @version: 1.0 */ public class AtomicDemo { public static void main(String[] args) { ////通过synchronized、volatile实现 // demo demo = new demo(); // for(int i=0;i&amp;lt;10;i++){ // new Thread(demo).start(); // } //使用AtomicInteger实现 demo2 demo = new demo2(); for(int i=0;i&amp;lt;10;i++){ new Thread(demo).start(); } } //通过synchronized、volatile实现 public static class demo implements Runnable{ private volatile int num=0; @Override public void run() { try { Thread.sleep(2000); } catch (InterruptedException e) { e.</description></item><item><title>CentOS pstree安装</title><link>https://willxwu.github.io/post/centos/pstree%E5%AE%89%E8%A3%85/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/pstree%E5%AE%89%E8%A3%85/</guid><description>pstree安装 1、在 Mac OS上
brew install pstree 2、在 Fedora/Red Hat/CentOS
yum -y install psmisc 3、在 Ubuntu/Debian
apt-get install psmisc ps显示各进程关系，列入：查看nginx进程关系。
ps aux | grep nginx 像一棵树一样展示。</description></item><item><title>mysql-5.7.33-winx64.zip安装</title><link>https://willxwu.github.io/post/centos/mysql-5.7.33-winx64.zip%E5%AE%89%E8%A3%85/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/mysql-5.7.33-winx64.zip%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="mysql-5733-winx64zip安装">mysql-5.7.33-winx64.zip安装&lt;/h1>
&lt;h1 id="一解压到安装目录">一、解压到安装目录&lt;/h1>
&lt;h1 id="二编写配置文件myini">二、编写配置文件my.ini&lt;/h1>
&lt;p>将编写好的配置文件放到mysql-5.7.33-winx64根目录下。&lt;/p>
&lt;p>配置文件如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>mysql&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置mysql客户端默认字符集&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default-character-set&lt;span style="color:#f92672">=&lt;/span>utf8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>mysqld&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置3306端口&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3306&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置mysql的安装目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>basedir &lt;span style="color:#f92672">=&lt;/span> D:&lt;span style="color:#ae81ff">\\&lt;/span>tools&lt;span style="color:#ae81ff">\m&lt;/span>ysql-5.7.33-winx64
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 设置mysql数据库的数据的存放目录&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>datadir &lt;span style="color:#f92672">=&lt;/span> D:&lt;span style="color:#ae81ff">\\&lt;/span>tools&lt;span style="color:#ae81ff">\m&lt;/span>ysql-5.7.33-winx64&lt;span style="color:#ae81ff">\d&lt;/span>ata
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 允许最大连接数&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>max_connections&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 服务端使用的字符集默认为8比特编码的latin1字符集&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>character-set-server&lt;span style="color:#f92672">=&lt;/span>utf8
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># 创建新表时将使用的默认存储引擎&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>default-storage-engine&lt;span style="color:#f92672">=&lt;/span>INNODB
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>CentOS安装hugo</title><link>https://willxwu.github.io/post/centos/centos%E5%AE%89%E8%A3%85hugo/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/centos%E5%AE%89%E8%A3%85hugo/</guid><description>CentOS安装hugo 1、yum无法直接安装hugo，首先添加repo
[daftaupe-hugo] name=Copr repo for hugo owned by daftaupe baseurl=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/epel-7-$basearch/ type=rpm-md skip_if_unavailable=True gpgcheck=1 gpgkey=https://copr-be.cloud.fedoraproject.org/results/daftaupe/hugo/pubkey.gpg repo_gpgcheck=0 enabled=1 2、安装hugo
yum -y install hugo 3、创建博客
hugo new site blog</description></item><item><title>CentOS环境JDK11安装</title><link>https://willxwu.github.io/post/centos/centos%E7%8E%AF%E5%A2%83jdk11%E5%AE%89%E8%A3%85/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/centos%E7%8E%AF%E5%A2%83jdk11%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="centos环境jdk11安装">CentOS环境JDK11安装&lt;/h1>
&lt;h2 id="1下载">1、下载&lt;/h2>
&lt;p>JDK11下载地址：https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html&lt;/p>
&lt;h2 id="2路径">2、路径&lt;/h2>
&lt;p>创建jdk安装文件夹&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir /usr/local/java
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3安装">3、安装&lt;/h2>
&lt;p>进入下载的jdk所在目录，执行安装命令。&lt;/p></description></item><item><title>CentOS安装Sentinel设置自启动</title><link>https://willxwu.github.io/post/centos/centos%E5%AE%89%E8%A3%85sentinel%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/centos%E5%AE%89%E8%A3%85sentinel%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8/</guid><description>&lt;h1 id="centos安装sentinel设置自启动">CentOS安装Sentinel设置自启动&lt;/h1>
&lt;h2 id="1下载">1、下载&lt;/h2>
&lt;p>下载地址https://github.com/alibaba/Sentinel/releases&lt;/p>
&lt;h2 id="2安装">2、安装&lt;/h2>
&lt;p>提前创建好安装路径、Jar包存放文件夹、脚本执行文件夹、日志存放文件夹&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir /usr/local/ sentinel
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir /usr/local/sentinel jar
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir /usr/local/sentinel sh
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir /usr/local/sentinel log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>CenotOS环境Nacos安装，设置开机自启动</title><link>https://willxwu.github.io/post/centos/cenotos%E7%8E%AF%E5%A2%83nacos%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/centos/cenotos%E7%8E%AF%E5%A2%83nacos%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="cenotos环境nacos安装设置开机自启动">CenotOS环境Nacos安装，设置开机自启动&lt;/h1>
&lt;h1 id="1下载">1、下载&lt;/h1>
&lt;p>nacos下载地址：https://github.com/alibaba/nacos/releases&lt;/p>
&lt;h1 id="2安装">2、安装&lt;/h1>
&lt;p>进入nacos所在目录，执行如下命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>tar -zxvf nacos-server-2.0.3.tar.gz -C /usr/local/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="3单机启动">3、单机启动&lt;/h1>
&lt;p>修改/usr/local/nacos/bin目录下startup.sh启动文件设置单机启动，修改export MODE=&amp;ldquo;cluster&amp;quot;值为standalone&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export MODE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;standalone&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>ES6语法</title><link>https://willxwu.github.io/post/es6/es6%E8%AF%AD%E6%B3%95/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/es6/es6%E8%AF%AD%E6%B3%95/</guid><description>ES6语法 一、let &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script&amp;gt; // { // //var 声明的变量往往会跨域 // //let 声明的变量有严格局部作用域 // var a = 1; // let b = 2; // } // console.log(a); //1 // console.log(b); //Uncaught ReferenceError: b is not defined // //var 可以声明多次 // //let 只能声明一次 // var m = 3; // var m = 4; // let n = 5; // // let n=5; // console.</description></item><item><title>Vue学习</title><link>https://willxwu.github.io/post/vue/vue%E5%AD%A6%E4%B9%A0/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/vue/vue%E5%AD%A6%E4%B9%A0/</guid><description>一、vue的基本使用 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;vue的基本使用&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;!-- 模板语法--插值{{}} --&amp;gt; &amp;lt;!-- 优先加载template里面的内容，如果为空也加载#app，在加载#app --&amp;gt; &amp;lt;h1&amp;gt;{{msg}}&amp;lt;/h1&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;./node_modules/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; new Vue({ el: &amp;#39;#app&amp;#39;, data: { msg: &amp;#39;黄瓜&amp;#39; }, template: &amp;#39;&amp;lt;div&amp;gt;&amp;lt;h5&amp;gt;{{msg}}&amp;lt;/h5&amp;gt;&amp;lt;/div&amp;gt;&amp;#39; }); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 二、vue指令 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;vue指令&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box{ width: 300px; height: 300px; background-color: red; } .active{ background-color: green; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;{{msg}}&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;./node_modules/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var vm = new Vue({ el: &amp;#34;#app&amp;#34;, data:function(){ return{ msg: &amp;#39;vue指令&amp;#39;, msg2: &amp;#39;vue的3种{{}}插值，1、{{}} 2、v-text=&amp;#34;&amp;#34; 3\v-html=&amp;#34;&amp;#34;&amp;#39;, isShow: true, isActive: true, frut: [ {id:1,name:&amp;#34;苹果&amp;#34;,price:20}, {id:2,name:&amp;#34;火龙果&amp;#34;,price:40}, {id:3,name:&amp;#34;西瓜&amp;#34;,price:30}, {id:4,name:&amp;#34;荔枝&amp;#34;,price:60} ], person:{ name:&amp;#34;zhangsan&amp;#34;, age:30, sex:&amp;#34;boy&amp;#34; } } }, template: &amp;#39;&amp;lt;div&amp;gt;{{msg}} &amp;lt;p v-text=&amp;#34;msg&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p v-html=&amp;#34;msg2&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;div v-if=&amp;#34;isShow&amp;#34;&amp;gt;v-if的使用&amp;lt;/div&amp;gt; &amp;lt;div v-if=&amp;#34;Math.</description></item><item><title>Oracle 存储过程和函数</title><link>https://willxwu.github.io/post/oracle/06_oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/06_oracle-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="oracle-存储过程和函数">Oracle 存储过程和函数&lt;/h1>
&lt;p>函数一般是工具性的东西。&lt;/p>
&lt;p>存储过程一般是一些操作。&lt;/p>
&lt;h1 id="一oracle-自定义函数">一、Oracle 自定义函数&lt;/h1>
&lt;p>语法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Create&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">函数名称&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">返回值类型&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">End&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">函数名称&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：统计t_book记录数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> &lt;span style="color:#66d9ef">or&lt;/span> &lt;span style="color:#66d9ef">replace&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> getbookCount &lt;span style="color:#66d9ef">return&lt;/span> number &lt;span style="color:#66d9ef">as&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">declare&lt;/span> bookNum number;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> &lt;span style="color:#66d9ef">count&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#66d9ef">into&lt;/span> bookNum &lt;span style="color:#66d9ef">from&lt;/span> t_book;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> bookNum;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span> getbookCount;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Oracle 触发器</title><link>https://willxwu.github.io/post/oracle/05_oracle-%E8%A7%A6%E5%8F%91%E5%99%A8/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/05_oracle-%E8%A7%A6%E5%8F%91%E5%99%A8/</guid><description>&lt;h1 id="oracle-触发器">Oracle 触发器&lt;/h1>
&lt;p>具备某些条件，由数据库自动执行的一些DML 操作行为。&lt;/p>
&lt;h2 id="一语句触发器">一、语句触发器&lt;/h2>
&lt;p>语句触发器针对整个表，作用整个表操作。一般用于权限判断之类的。常用行触发器。&lt;/p>
&lt;p>&lt;strong>语法结构&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Create&lt;/span> &lt;span style="color:#66d9ef">trigger&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">触发器名称&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">Before&lt;/span>&lt;span style="color:#f92672">/&lt;/span>&lt;span style="color:#66d9ef">after&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">触发动作&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">On&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">作用对象&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>触发器谓词：INSERTING、UPDATING、DELETING&lt;/p></description></item><item><title>Oracle 游标</title><link>https://willxwu.github.io/post/oracle/04_oracle-%E6%B8%B8%E6%A0%87/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/04_oracle-%E6%B8%B8%E6%A0%87/</guid><description>&lt;h1 id="一游标">一、游标&lt;/h1>
&lt;p>使用游标，我们可以对具体操作数据，比如查询的结果，对行，列数据进行更加细致的处理。以及对其他DML
操作进行判断等操作；类似一个数据集合。&lt;/p>
&lt;h2 id="1语法">1、语法&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">cursor&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">游标名称&lt;/span> &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">查询的&lt;/span>&lt;span style="color:#66d9ef">sql&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">cursor&lt;/span> cu_book &lt;span style="color:#66d9ef">is&lt;/span> &lt;span style="color:#66d9ef">select&lt;/span> bookname,price &lt;span style="color:#66d9ef">from&lt;/span> t_book;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Oracle控制语句</title><link>https://willxwu.github.io/post/oracle/03_oracle%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/03_oracle%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</guid><description>&lt;h1 id="一oracle控制语句">一、Oracle控制语句&lt;/h1>
&lt;h1 id="1编写语句">1、编写语句&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">--写了才会输出
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">set&lt;/span> serverout &lt;span style="color:#66d9ef">on&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">--开始语句
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">begin&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">--这里面开始写语句块
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>dbms_output.put_line(&lt;span style="color:#e6db74">&amp;#39;Hello&amp;#39;&lt;/span>); &lt;span style="color:#75715e">--注意&amp;#34; ; &amp;#34;不要完了
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">--控制语句结束
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">end&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">--在对话框执行时，需要输入/
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Oracle 权限、视图、约束</title><link>https://willxwu.github.io/post/oracle/02_oracle-%E6%9D%83%E9%99%90%E8%A7%86%E5%9B%BE%E7%BA%A6%E6%9D%9F/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/02_oracle-%E6%9D%83%E9%99%90%E8%A7%86%E5%9B%BE%E7%BA%A6%E6%9D%9F/</guid><description>Oracle 权限、视图、约束 一、数据库权限 1、查看用户所属角色 select * from user_role_privs; 2、查询角色权限 CONNECT：仅连接权限
select * from dba_sys_privs where grantee=&amp;#39;CONNECT&amp;#39; 查看RESOURCE权限：
select * from dba_sys_privs where grantee=&amp;#39;RESOURCE&amp;#39; DBA角色权限查看
select * from dba_sys_privs where grantee=&amp;#39;DBA&amp;#39; 3、用户授权 例如：授予scoot拥有dba的权限
grant dba to scott; 二、视图 1、创建视图 Create view 视图名称as 查询语句 create view v_emp1 as select ename,job from emp; 2、修改视图 create or replace view 始图名称 as 新的查询数据； create or replace view vemp as select empno,ename,job from EMP t; 注意与创建视图的不同：多了一个or replace</description></item><item><title>Oracle常用函数</title><link>https://willxwu.github.io/post/oracle/01_oracle%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link><pubDate>Wed, 20 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/oracle/01_oracle%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="一oracle-表空间">一、Oracle 表空间&lt;/h1>
&lt;p>一个数据库可以有多个表空间，一个表空间里可以有多个表。表空间就是存多个表的物理空间；
可以指定表空间的大小位置等。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>创建表空间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> tablespace ts1 datafile &lt;span style="color:#e6db74">&amp;#39;C:\tablespace\ts1.dbf&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">size&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>M;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>自动扩展大小&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> tablespace ts2 datafile &lt;span style="color:#e6db74">&amp;#39;C:\tablespace\ts2.dbf&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">size&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>M autoextend &lt;span style="color:#66d9ef">on&lt;/span> &lt;span style="color:#66d9ef">next&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>M;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>设置最大空间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">create&lt;/span> tablespace ts3 datafile &lt;span style="color:#e6db74">&amp;#39;C:\tablespace\ts3.dbf&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">size&lt;/span> &lt;span style="color:#ae81ff">50&lt;/span>M autoextend &lt;span style="color:#66d9ef">on&lt;/span> &lt;span style="color:#66d9ef">next&lt;/span> &lt;span style="color:#ae81ff">10&lt;/span>M maxsize &lt;span style="color:#ae81ff">1024&lt;/span>M;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker开启Remote API访问</title><link>https://willxwu.github.io/post/cicd/docker%E5%BC%80%E5%90%AFremote-api%E8%AE%BF%E9%97%AE-2375%E7%AB%AF%E5%8F%A3/</link><pubDate>Tue, 19 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%BC%80%E5%90%AFremote-api%E8%AE%BF%E9%97%AE-2375%E7%AB%AF%E5%8F%A3/</guid><description>&lt;h1 id="docker开启remote-api访问">Docker开启Remote API访问&lt;/h1>
&lt;h2 id="方法一">方法一&lt;/h2>
&lt;p>1、修改/usr/lib/systemd/system/docker.service配置，在[Service]部分ExecStart后面添加配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>-H tcp://0.0.0.0:2375
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改后如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">[&lt;/span>Service&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Type&lt;span style="color:#f92672">=&lt;/span>notify
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># the default is not to use systemd for cgroups because the delegate issues still&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># exists and systemd currently does not support the cgroup feature set required&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># for containers run by docker&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecStart&lt;span style="color:#f92672">=&lt;/span>/usr/bin/dockerd -H fd:// --containerd&lt;span style="color:#f92672">=&lt;/span>/run/containerd/containerd.sock -H tcp://0.0.0.0:2375
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ExecReload&lt;span style="color:#f92672">=&lt;/span>/bin/kill -s HUP $MAINPID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>TimeoutSec&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RestartSec&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Restart&lt;span style="color:#f92672">=&lt;/span>always
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docker安装Jenkins自动部署SpringBoot项目</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85jenkins%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h1 id="docker安装jenkins自动部署springboot项目">Docker安装Jenkins自动部署SpringBoot项目&lt;/h1>
&lt;p>根据之前文章《&lt;a href="https://www.yanxizhu.com/index.php/archives/138/">使用Docker安装好Jenkins&lt;/a>》为前提搭建好Jenkins，不明白请看https://www.yanxizhu.com/index.php/archives/138/。&lt;/p>
&lt;p>环境说明：jenkins为docker部署，Docker+Jenkins+Gitee+JDK11+Maven3.8.5。&lt;/p>
&lt;p>&lt;strong>以后每次改动代码，push提交到giee码云后会自动部署，不用手动点击部署。&lt;/strong>&lt;/p>
&lt;h1 id="一全局工具配置">一、全局工具配置&lt;/h1>
&lt;p>【首页】-【系统管理】-【全局工具配置】&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202205092255415.png" alt="">&lt;/p>
&lt;p>我之前启动jenkins容器映射参数如下，根据自己映射路径自行修改。&lt;/p></description></item><item><title>Dockerfile技巧</title><link>https://willxwu.github.io/post/docker/07_dockerfile%E9%80%82%E7%94%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Sun, 17 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/07_dockerfile%E9%80%82%E7%94%A8%E6%8A%80%E5%B7%A7/</guid><description>&lt;h1 id="dockerfile技巧">Dockerfile技巧&lt;/h1>
&lt;h2 id="一docker-build缓存">一、Docker build缓存&lt;/h2>
&lt;p>当build镜像时，如果Docker build文件发生变化或者build镜像分层某一层发生变化就不会使用cache缓存。&lt;/p>
&lt;p>技巧：将Dockerfile中经常发生改变的放到后面，不发生改变的发前面。这样就算最后发生改变的不能使用cache缓存，但前面没变化也会加快build的速度。&lt;/p>
&lt;h2 id="docker-build-context">Docker build context&lt;/h2>
&lt;p>Docker是client-server架构，理论上Client和Server可以不在一台机器上。&lt;/p>
&lt;p>在构建docker镜像的时候，需要把所需要的文件由CLI（client）发给Server，这些文件实际上就是build context。&lt;/p></description></item><item><title>Docker安装Jenkins</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85jenkins/</link><pubDate>Sat, 16 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85jenkins/</guid><description>Docker安装Jenkins jdk安装 下载jdk解压到个人安装目录
/mydata/jdk/jdk-11.0.10 maven安装 下载maven解压到个人安装目录
/mydata/maven/apache-maven-3.8.5 修改mavne配置文件setting.xml，设置本地仓库目录
&amp;lt;localRepository&amp;gt;/mydata/maven/repo&amp;lt;/localRepository&amp;gt; 添加阿里云镜像，在mirrors节点下增加以下内容
&amp;lt;mirrors&amp;gt; &amp;lt;mirror&amp;gt; &amp;lt;id&amp;gt;alimaven&amp;lt;/id&amp;gt; &amp;lt;mirrorOf&amp;gt;central&amp;lt;/mirrorOf&amp;gt; &amp;lt;name&amp;gt;aliyun maven&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://maven.aliyun.com/nexus/content/repositories/central/&amp;lt;/url&amp;gt; &amp;lt;/mirror&amp;gt; &amp;lt;/mirrors&amp;gt; 开启Docker Remote API 关闭防火墙 或者 开启防火墙的端口 #关闭防火墙 systemctl stop firewalld.service # 禁止firewall开机启动 systemctl disable firewalld.service # 或者允许固定端口 firewall-cmd --zone=public --add-port=2375/tcp --permanent firewall-cmd --reload Docker环境下安装Jenkins 拉取最新的Jenkins的docker镜像
docker pull jenkins/jenkins:lts 启动Jenkins容器
docker run -p 10240:8080 -p 10241:50000 --name jenkins \ -u root \ -v /mydata/jenkins_home:/var/jenkins_home \ -v /mydata/maven/apache-maven-3.8.5:/maven/apache-maven-3.8.5 \ -v /mydata/jdk/jdk-11.0.10/:/jdk/jdk-11.0.10 \ -v /mydata/maven/repo:/mydata/maven/repo \ -d jenkins/jenkins:lts 注意：自己的目录和端口是否相同，不同请求修改。</description></item><item><title>Docker部署Kafka</title><link>https://willxwu.github.io/post/cicd/docker%E9%83%A8%E7%BD%B2kafka/</link><pubDate>Fri, 15 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E9%83%A8%E7%BD%B2kafka/</guid><description>Docker部署Kafka 一、拉取镜像 docker pull wurstmeister/zookeeper docker pull wurstmeister/kafka 二、启动zookpeer docker run -d --name zookeeper -p 2181:2181 -t wurstmeister/zookeeper 三、启动kafka docker run -d --name kafka \ -p 9092:9092 \ -e KAFKA_BROKER_ID=0 \ -e KAFKA_ZOOKEEPER_CONNECT=192.168.56.10:2181 \ -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.56.10:9092 \ -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 wurstmeister/kafka 注意修改自己ip地址
四、测试 1、进入kafka容器 docker exec -it kafka bash 2、进入kafak脚本目录 cd /opt/kafka_2.13-2.8.1/bin 注意修改自己kafka版本
3、创建主题 kafka-topics.sh --create --zookeeper 192.168.56.10:2181 --replication-factor 1 --partitions 1 --topic topic_1 这里创建了一个topic_1主题。
4、添加消息 生产者发送消息
kafka-console-producer.sh --broker-list 192.168.56.10:9092 --topic topic_1 此时进入发送消息界面：</description></item><item><title>Docker安装Kibana</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85kibana/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85kibana/</guid><description>Docker安装Kibana
一、拉取镜像，可视化检索数据
docker pull kibana:7.4.2 二、启动运行容器
docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.1.10:9200 -p 5601:5601 \ -d kibana:7.4.2 注意：更改自己的ip，es端口，以及和es版本号对应。</description></item><item><title>Docker安装ES</title><link>https://willxwu.github.io/post/cicd/docker-%E5%AE%89%E8%A3%85es/</link><pubDate>Wed, 13 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker-%E5%AE%89%E8%A3%85es/</guid><description>&lt;hr>
&lt;p>一、下载镜像文件，存储和检索数据&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull elasticsearch:7.4.2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>二、创建实例&lt;/p>
&lt;p>创建文件，用于映射&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /mydata/elasticsearch/config
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p /mydata/elasticsearch/data
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>echo &lt;span style="color:#e6db74">&amp;#34;http.host: 0.0.0.0&amp;#34;&lt;/span> &amp;gt;&amp;gt; /mydata/elasticsearch/config/elasticsearch.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docker安装RabbitMQ</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85rabbitmq/</link><pubDate>Tue, 12 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85rabbitmq/</guid><description>Docker安装RabbitMQ 运行RabbitMQ容器 第一次运行没有RabbitMQ镜像，会自动下载。
docker run -d --name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management 说明：
4369, 25672 (Erlang发现&amp;amp;集群端口) 5672, 5671 (AMQP端口) 15672 (web管理后台端口) 61613, 61614 (STOMP协议端口) 1883, 8883 (MQTT协议端口) https://www.rabbitmq.com/networking.html
设置随docker启动 docker update --restart=always rabbitmq 访问RabbitMQ 通过ip地址加15672端口即可访问，初始账号密码guest</description></item><item><title>docker安装redis</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85redis/</link><pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85redis/</guid><description>&lt;h1 id="docker安装redis">docker安装redis&lt;/h1>
&lt;hr>
&lt;h1 id="一docker拉取redis镜像">一、docker拉取redis镜像&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull redis
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="二创建实例并启动">二、创建实例并启动&lt;/h1>
&lt;p>创建映射配置文件路径&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mkdir -p /mydata/redis/conf
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>touch /mydata/redis/conf/redis.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-d redis redis-server /etc/redis/redis.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docker安装Nginx</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85nginx/</link><pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85nginx/</guid><description>&lt;h1 id="一docker安装nginx">一、Docker安装Nginx&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>拉取Nginx镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull nginx:1.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>随便启动一个nginx 实例，只是为了复制出配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 80:80 --name nginx -d nginx:1.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker安装PHP</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85php/</link><pubDate>Fri, 08 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85php/</guid><description>&lt;h1 id="docker安装php">Docker安装PHP&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>拉取PHP镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull php:7.4-fpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>运输PHP容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -d -v /mydata/nginx/html:/var/www/html -p 9000:9000 --link mysql:mysql --name php php:7.4-fpm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>进入PHP容器&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker exec -it php /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker安装MySQL</title><link>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85mysql/</link><pubDate>Thu, 07 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%AE%89%E8%A3%85mysql/</guid><description>&lt;p>安装前提，已经搭建好Docker环境，关于docker安装可参考我另一篇文章&lt;a href="https://www.yanxizhu.com/index.php/archives/6/">《Docker安装》&lt;/a>&lt;/p>
&lt;h1 id="一docker安装mysql">一、Docker安装MySQL&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>拉取Docker镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull mysql:5.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行MySQL容器,参数说明见-说明1&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run -p 3306:3306 --name mysql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /mydata/mysql/log:/var/log/mysql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /mydata/mysql/data:/var/lib/mysql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-v /mydata/mysql/conf:/etc/mysql &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-e MYSQL_ROOT_PASSWORD&lt;span style="color:#f92672">=&lt;/span>密码 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>-d mysql:5.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker常用命令</title><link>https://willxwu.github.io/post/cicd/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link><pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/cicd/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid><description>&lt;h1 id="一镜像">一、镜像&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>查看docker容器镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker images
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>拉去容器镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker pull 容器
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>删除容器镜像&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker rmi 容器
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker数据存储</title><link>https://willxwu.github.io/post/docker/06_docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/06_docker%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8/</guid><description>&lt;h1 id="docker数据存储">Docker数据存储&lt;/h1>
&lt;p>默认情况下，在运行中的容器里创建的文件，被保存在一个可写的容器层：&lt;/p>
&lt;ul>
&lt;li>如果容器被删除了，则数据也没有了&lt;/li>
&lt;li>这个可写的容器层是和特定的容器绑定的，也就是这些数据无法方便的和其它容器共享&lt;/li>
&lt;/ul>
&lt;p>Docker主要提供了两种方式做数据的持久化&lt;/p></description></item><item><title>Docker镜像创建、镜像push</title><link>https://willxwu.github.io/post/docker/05_docker%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8Fpush/</link><pubDate>Mon, 04 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/05_docker%E9%95%9C%E5%83%8F%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8Fpush/</guid><description>&lt;h1 id="镜像创建镜像push">镜像创建、镜像push&lt;/h1>
&lt;h1 id="是什么">是什么&lt;/h1>
&lt;p>Dockerfile是用于构建docker镜像的文件&lt;/p>
&lt;p>Dockerfile里包括了构建镜像所需的“指令”&lt;/p>
&lt;p>Dockerfile有其特定的语法规则&lt;/p></description></item><item><title>Docker基础镜像的选择</title><link>https://willxwu.github.io/post/docker/04_docker%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E7%9A%84%E9%80%89%E6%8B%A9-from/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/04_docker%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F%E7%9A%84%E9%80%89%E6%8B%A9-from/</guid><description>&lt;h1 id="基础镜像的选择-from">基础镜像的选择 (FROM)&lt;/h1>
&lt;ul>
&lt;li>官方镜像优于非官方的镜像，如果没有官方镜像，则尽量选择Dockerfile开源的&lt;/li>
&lt;li>固定版本tag而不是每次都使用latest&lt;/li>
&lt;li>尽量选择体积小的镜像&lt;/li>
&lt;/ul>
&lt;p>空镜像：scratch&lt;/p>
&lt;p>最小镜像：alpine&lt;/p></description></item><item><title>Docker镜像获取方式</title><link>https://willxwu.github.io/post/docker/03_docker%E9%95%9C%E5%83%8F%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</link><pubDate>Sun, 03 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/03_docker%E9%95%9C%E5%83%8F%E8%8E%B7%E5%8F%96%E6%96%B9%E5%BC%8F/</guid><description>&lt;h1 id="docker镜像获取方式">Docker镜像获取方式&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202303181827457.png" alt="image-20230318182710371">&lt;/p>
&lt;h2 id="一pull-from-registry">一、pull from registry&lt;/h2>
&lt;p>必须在线，从registry拉取分公有和私有。公有，例如：dockerhub，私有，例如公司自己搭建的，只能公司内部访问。&lt;/p>
&lt;p>常用公有registry：需要注册账号。&lt;/p></description></item><item><title>Docker入门</title><link>https://willxwu.github.io/post/docker/02_docker%E5%85%A5%E9%97%A8/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/02_docker%E5%85%A5%E9%97%A8/</guid><description>&lt;p>&lt;strong>容器&lt;/strong>：一种打包技术。&lt;/p>
&lt;p>&lt;strong>docker&lt;/strong>：打包技术的一种技术实现。&lt;/p>
&lt;h1 id="一基础知识">一、基础知识&lt;/h1>
&lt;h2 id="基础命令">&lt;strong>基础命令&lt;/strong>&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>查看docker相关信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker versoin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>查看docker环境信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker info
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Docker安装</title><link>https://willxwu.github.io/post/docker/01_docker%E5%AE%89%E8%A3%85/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/docker/01_docker%E5%AE%89%E8%A3%85/</guid><description>&lt;h1 id="一环境准备">一、环境准备&lt;/h1>
&lt;ol>
&lt;li>
&lt;p>备份原yum 源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>CentOS设置新yum 源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>使用阿里云Docker Yum源&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>循环依赖解决方案</title><link>https://willxwu.github.io/post/problem/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>循环依赖解决方案
1、查看日志，是哪个地方提示循环依赖。
2、取消自动注入
3、通过容器获取
4、构造方法赋值
例如：
public class MyRabbitConfig { //取消自动注入 // @Autowired RabbitTemplate rabbitTemplate; //通过构造解决循环依赖。(RabbitTemplate rabbitTemplate)：是从springboot容器自动注入的 public MyRabbitConfig(RabbitTemplate rabbitTemplate){ this.rabbitTemplate=rabbitTemplate; }</description></item><item><title>线程并发及CAS</title><link>https://willxwu.github.io/post/lock/%E5%B9%B6%E5%8F%91%E5%8F%8Acas/</link><pubDate>Wed, 30 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/%E5%B9%B6%E5%8F%91%E5%8F%8Acas/</guid><description>&lt;h1 id="计算机架构">计算机架构&lt;/h1>
&lt;h2 id="cpu多级缓存">&lt;strong>CPU多级缓存&lt;/strong>&lt;/h2>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202204192221622.png" alt="">&lt;/p>
&lt;h2 id="为什么需要cpu-cache">&lt;strong>为什么需要CPU cache&lt;/strong>&lt;/h2>
&lt;p>CPU的频率太快了，快到主存跟不上，这样在处理器时钟周期内，CPU常常需要等待主存，浪费资源。所以cache的出现，是为了缓解CPU和内存之间速度的不匹配问题（结构：cpu-&amp;gt;cache-&amp;gt;memory）。&lt;/p></description></item><item><title>线程唤醒</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92/</link><pubDate>Tue, 29 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%94%A4%E9%86%92/</guid><description>wait、notifyAll()、await()、signalAll() 为了避免虚假唤醒问题，应该总是使用在循环中 wait、notifyAll():
package com.yanxizhu; import java.util.function.Consumer; /* * 生产者和消费者案例 */ public class TestProductorAndConsumer { public static void main(String[] args) { Clerk clerk = new Clerk(); Productor pro = new Productor(clerk); Consumers cus = new Consumers(clerk); new Thread(pro, &amp;#34;生产者 A&amp;#34;).start(); new Thread(cus, &amp;#34;消费者 B&amp;#34;).start(); new Thread(pro, &amp;#34;生产者 C&amp;#34;).start(); new Thread(cus, &amp;#34;消费者 D&amp;#34;).start(); } } //店员 class Clerk{ private int product = 0; //进货 public synchronized void get(){//循环次数：0 while(product &amp;gt;= 1){//为了避免虚假唤醒问题，应该总是使用在循环中 System.</description></item><item><title>Jenkins容器docker部署springboot项目-问题记录</title><link>https://willxwu.github.io/post/problem/jenkins%E5%AE%B9%E5%99%A8docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</link><pubDate>Mon, 28 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/problem/jenkins%E5%AE%B9%E5%99%A8docker%E9%83%A8%E7%BD%B2springboot%E9%A1%B9%E7%9B%AE/</guid><description>&lt;h1 id="jenkins容器docker部署springboot项目-问题记录">Jenkins容器docker部署springboot项目-问题记录&lt;/h1>
&lt;h2 id="一docker容器内不能使用vim">一、docker容器内不能使用vim&lt;/h2>
&lt;p>解决方案：&lt;/p>
&lt;p>以root进入容器内&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker exec -it -user root jenkins /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新软件包&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>apt-get update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>升级过程可能非常慢，因为是从海外站点拉取镜像，所以我们可以配置一个国内的镜像源，加速镜像拉取更新。&lt;/p></description></item><item><title>maven的使用</title><link>https://willxwu.github.io/post/tool/maven%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/tool/maven%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>使用maven的好处：
&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.1.9/images/uploads/2020/tool/upload_c8101b18c706b9fae7cb7572ddce0e90.png" alt="使用maven好处.png">&lt;/p>
&lt;p>大型项目的好处，建立一个父项目，各组或部门可以模块开发，不用拉取整个项目进行开发。&lt;/p></description></item><item><title>Java J.U.C之AQS</title><link>https://willxwu.github.io/post/lock/j.u.c%E4%B9%8Baqs/</link><pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/j.u.c%E4%B9%8Baqs/</guid><description>&lt;h1 id="aqs">AQS&lt;/h1>
&lt;p>J.U.C之AQS，底层由线程队列实现。AbstractQueuedSynchronizer简称AQS，JUC的核心。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202204252000380.png" alt="">&lt;/p>
&lt;p>使用Node实现FIFO队列，可以用于构建锁或者其他同步装置的基础框架。
利用了一个int类型表示状态。
使用方法是继承。
子类通过继承并通过实现它的方法管理其状态{acquire和release}的方法操纵状态。
可以同时实现排它锁和共享锁模式（独占、共享）。&lt;/p></description></item><item><title>Java 读写锁</title><link>https://willxwu.github.io/post/lock/%E8%AF%BB%E5%86%99%E9%94%81/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/%E8%AF%BB%E5%86%99%E9%94%81/</guid><description>读写锁 package com.yanxizhu; import java.util.concurrent.locks.ReadWriteLock; import java.util.concurrent.locks.ReentrantReadWriteLock; /** * @description: 读写锁(互斥锁) * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/3/19 15:23 * @version: 1.0 */ public class ReadWriteDemo { public static void main(String[] args) { ReadWriteTest readWriteTest = new ReadWriteTest(); new Thread(()-&amp;gt;{ readWriteTest.write((int) (Math.random()*101)); },&amp;#34;写锁&amp;#34;).start(); for(int i=1;i&amp;lt;50;i++){ new Thread(()-&amp;gt;{ readWriteTest.get(); },&amp;#34;读锁&amp;#34;).start(); } } } class ReadWriteTest{ int num =0; private ReadWriteLock readWriteLock = new ReentrantReadWriteLock(); //读 public void get(){ readWriteLock.readLock().lock(); try{ System.out.println(num+&amp;#34;==&amp;#34;+Thread.currentThread().getName()); }finally { readWriteLock.</description></item><item><title>Java CountDownLatch闭锁使用</title><link>https://willxwu.github.io/post/lock/countdownlatch%E9%97%AD%E9%94%81%E4%BD%BF%E7%94%A8/</link><pubDate>Tue, 22 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/countdownlatch%E9%97%AD%E9%94%81%E4%BD%BF%E7%94%A8/</guid><description>import java.util.concurrent.CountDownLatch; /** * @date: 2022/3/19 11:09 * @version: 1.0 */ public class CountDownLatchTest { public static void main(String[] args) throws InterruptedException { CountDownLatch countDownLatch = new CountDownLatch(5); myCountDownlatch myCountDownlatch = new myCountDownlatch(countDownLatch); long start = System.currentTimeMillis(); for(int i=0;i&amp;lt;5;i++){ new Thread(myCountDownlatch).start(); } countDownLatch.await(); long end = System.currentTimeMillis(); System.out.println(&amp;#34;耗时：&amp;#34;+(end-start)); } public static class myCountDownlatch implements Runnable{ private CountDownLatch countDownLatch; public myCountDownlatch(CountDownLatch countDownLatch){ this.countDownLatch = countDownLatch; } @Override public void run() { synchronized (this){ try{ for(int i =0;i&amp;lt;500;i++){ if(i % 2==0){ System.</description></item><item><title>Java FutureTask用于闭锁</title><link>https://willxwu.github.io/post/lock/futuretask%E7%94%A8%E4%BA%8E%E9%97%AD%E9%94%81/</link><pubDate>Mon, 21 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/futuretask%E7%94%A8%E4%BA%8E%E9%97%AD%E9%94%81/</guid><description>package com.yanxizhu; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.concurrent.FutureTask; /** * @description: FutureTask可用于闭锁 * @date: 2022/3/19 11:48 * @version: 1.0 */ public class FutureTaskDemo { public static void main(String[] args) throws ExecutionException, InterruptedException { myFutureTask myFutureTask = new myFutureTask(); FutureTask&amp;lt;Integer&amp;gt; futureTask = new FutureTask&amp;lt;&amp;gt;(myFutureTask); new Thread(futureTask).start(); //必须等线程执行完，才执行下面的代码，因此FutureTask可用于闭锁 Integer integer = futureTask.get(); System.out.println(&amp;#34;integer=&amp;#34;+integer); System.out.println(&amp;#34;=======================&amp;#34;); } public static class myFutureTask implements Callable&amp;lt;Integer&amp;gt;{ @Override public Integer call() throws Exception { int i=1; for(;i&amp;lt;1000000;i++){ i++; } return i; } } }</description></item><item><title>Java ReentrantLock显示锁</title><link>https://willxwu.github.io/post/lock/reentrantlock%E6%98%BE%E7%A4%BA%E9%94%81/</link><pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/reentrantlock%E6%98%BE%E7%A4%BA%E9%94%81/</guid><description>package com.yanxizhu; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * @description: ReentrantLock * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/3/19 12:37 * @version: 1.0 */ public class LockDemo { public static void main(String[] args) { titck titck = new titck(); new Thread(titck,&amp;#34;线程1&amp;#34;).start(); new Thread(titck,&amp;#34;线程2&amp;#34;).start(); new Thread(titck,&amp;#34;线程3&amp;#34;).start(); } public static class titck implements Runnable{ Lock lock = new ReentrantLock(); private int titck = 100; @Override public void run() { while(true){ lock.lock(); try{ if(titck&amp;gt;0){ try { Thread.</description></item><item><title>Java Synchronized Lock</title><link>https://willxwu.github.io/post/lock/reentrantlock%E4%B8%8E%E9%94%81/</link><pubDate>Sat, 19 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/reentrantlock%E4%B8%8E%E9%94%81/</guid><description>&lt;p>锁分为Synchronized和锁Lock。&lt;/p>
&lt;h1 id="reentrantlock与锁">ReentrantLock与锁&lt;/h1>
&lt;p>ReentrantLock(可重入锁)与Synchronized(同步锁)的区别：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>可重入性：区别不大，都是通过计数器，当计数器下降为0时，锁释放。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>锁的实现：Synchronized依赖JVM，ReentrantLock基于JDK实现。(类似Synchronized是操作系统实现，ReentrantLock是敲代码实现),ReentrantLock可通过看源码明白实现，Synchronized依赖JVM就看不到实现原理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能的区别：优化之前Synchronized比ReentrantLock性能差很多，优化后Synchronized引入偏向锁、轻量级锁也就是自旋锁后，2者性能差不多了。差不多时，官方推荐Synchronized。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>功能的区别：Synchronized的使用方便简洁，隐式获取锁释放锁，ReentrantLock需要手动获取锁，释放锁，如果忘记容易出现死锁，所以最好再finally中释放锁。锁的颗粒度和灵活度很明显ReentrantLock优于Synchronized。&lt;/p>
&lt;p>ReentrantLock独有的功能：&lt;/p>
&lt;ol>
&lt;li>ReentrantLock可指定公平锁、非公平锁，而Synchronized只能时非公平锁。公平锁：先等待的先获取锁，反之亦然。&lt;/li>
&lt;li>提供了一个Condition类，可以分组唤醒需要唤醒的线程，Synchronized要么随机唤醒，要么全部唤醒。&lt;/li>
&lt;li>提供能够中断等待锁的线程的机制，lock.lockInterruptibly()，lockInterruptibly是一种自旋锁，通过循环来调用CAS来加锁，性能比较好，就是因为不会进入内核阻塞状态。&lt;/li>
&lt;/ol>
&lt;p>使用场景：必须实现上面3个功能时，就必须用了。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Java ScheduledThreadPool线程调度</title><link>https://willxwu.github.io/post/lock/scheduledthreadpool%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</link><pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/scheduledthreadpool%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/</guid><description>ScheduledThreadPool线程调度 package com.yanxizhu; import java.util.Random; import java.util.concurrent.Callable; import java.util.concurrent.Executors; import java.util.concurrent.Future; import java.util.concurrent.ScheduledExecutorService; import java.util.concurrent.TimeUnit; /* * 一、线程池：提供了一个线程队列，队列中保存着所有等待状态的线程。避免了创建与销毁额外开销，提高了响应的速度。 * * 二、线程池的体系结构： * java.util.concurrent.Executor : 负责线程的使用与调度的根接口 * |--**ExecutorService 子接口: 线程池的主要接口 * |--ThreadPoolExecutor 线程池的实现类 * |--ScheduledExecutorService 子接口：负责线程的调度 * |--ScheduledThreadPoolExecutor ：继承 ThreadPoolExecutor， 实现 ScheduledExecutorService * * 三、工具类 : Executors * ExecutorService newFixedThreadPool() : 创建固定大小的线程池 * ExecutorService newCachedThreadPool() : 缓存线程池，线程池的数量不固定，可以根据需求自动的更改数量。 * ExecutorService newSingleThreadExecutor() : 创建单个线程池。线程池中只有一个线程 * * ScheduledExecutorService newScheduledThreadPool() : 创建固定大小的线程，可以延迟或定时的执行任务。 */ public class TestScheduledThreadPool { public static void main(String[] args) throws Exception { ScheduledExecutorService pool = Executors.</description></item><item><title>Java Synchronized</title><link>https://willxwu.github.io/post/lock/synchronized/</link><pubDate>Thu, 17 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/synchronized/</guid><description>&lt;p>Atomic原子性提供了互斥访问。同一时刻只能由一个线程来操作。除了Atomic原子性，还有锁。&lt;/p>
&lt;h1 id="jdk提供的锁主要分2类">jdk提供的锁主要分2类&lt;/h1>
&lt;p>1、&lt;strong>Synchronized&lt;/strong>：一种依赖JVM去实现锁的关键字，&lt;strong>Synchronized&lt;/strong>，在这个对象作用的范围内，都是同一时刻，只能有一个线程去操作。注意是，&lt;strong>作用对象的作用范围内。&lt;/strong>&lt;/p>
&lt;p>2、另一种jdk代码层面的锁，jdk里面提供了一个Lock的接口，主要是依赖特殊的CPU指令，实现类中比较有代表性的是ReentrantLock。&lt;/p></description></item><item><title>原子性-Atomic类常见的使用</title><link>https://willxwu.github.io/post/lock/%E5%8E%9F%E5%AD%90%E6%80%A7-atomic%E7%B1%BB%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 16 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/%E5%8E%9F%E5%AD%90%E6%80%A7-atomic%E7%B1%BB%E5%B8%B8%E8%A7%81%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>1、(信号量)Semaphore+(闭锁)CountDownLatch+(常用源自类)AtomicInteger package com.yanxizhu.demo.concurrency.atomic; import com.yanxizhu.demo.concurrency.annotation.ThreadSafety; import lombok.extern.slf4j.Slf4j; import java.util.concurrent.CountDownLatch; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Semaphore; import java.util.concurrent.atomic.AtomicInteger; /** * @description: 线程安全 * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/4/19 20:05 * @version: 1.0 */ @Slf4j @ThreadSafety public class DemoSemaphoreAndCountDownLatchAndAtomic { //用户数量 private static final int clientsTotal = 5000; //并发数量 private static final int concurrencyTotal = 200; //累加总和 private static AtomicInteger count = new AtomicInteger(0); public static void main(String[] args) throws InterruptedException { ExecutorService executorService = Executors.</description></item><item><title>Java线程可见性</title><link>https://willxwu.github.io/post/thread/%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%9C%89%E5%BA%8F%E6%80%A7/</guid><description>&lt;h1 id="可见性">可见性&lt;/h1>
&lt;p>可见性：一个线程对主内存的修改可以及时的被其它线程观察到。&lt;/p>
&lt;p>&lt;strong>导致共享变量在线程间不可见的原因：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>线程交叉执行&lt;/li>
&lt;li>重排序结合线程交叉执行&lt;/li>
&lt;li>共享变量更新后的值没有在工作内存与主存间及时更新&lt;/li>
&lt;/ol></description></item><item><title>解决CAS的ABA问题</title><link>https://willxwu.github.io/post/lock/%E8%A7%A3%E5%86%B3cas%E7%9A%84aba%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/lock/%E8%A7%A3%E5%86%B3cas%E7%9A%84aba%E9%97%AE%E9%A2%98/</guid><description>CAS虽然高效的实现了原子性操作，但是也存在一些缺点，主要表现在以下三个方面。
什么是ABA问题 比如：
线程1从主存中读取值A，另一个线程2也从主存中读取值A，此时线程2将主存值修改成了B，然后线程2又将主存值修改成了A，这时候线程1进行CAS操作发现内存中仍然是A，然后线程1操作成功，这是不正确的。
如何解决ABA问题 通过AtomicStampedReference的compareAndSet方法进行处理，这里的compareAndSet比一般的多了一个stamp的比较。
源码如下：
public boolean compareAndSet(V expectedReference, V newReference, int expectedStamp, int newStamp) { Pair&amp;lt;V&amp;gt; current = pair; return expectedReference == current.reference &amp;amp;&amp;amp; expectedStamp == current.stamp &amp;amp;&amp;amp; ((newReference == current.reference &amp;amp;&amp;amp; newStamp == current.stamp) || casPair(current, Pair.of(newReference, newStamp))); } 多了一个stamp的比较，stamp是每次更新来维护的。</description></item><item><title>Java线程封闭</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD/</guid><description>&lt;h1 id="线程封闭">&lt;strong>线程封闭&lt;/strong>&lt;/h1>
&lt;p>当访问共享数据时，通常是要使用同步。如果要避免使用同步，就是不提供共享数据。如果仅在单线程中访问数据，就不需要同步，这种技术就叫做线程封闭，它是实现线程安全最简单的方式之一。当某个对象封闭在一个线程当中时将自动实现线程安全性，即使被封闭的对象本身它并不是安全的，实现线程主要有三种方式。&lt;/p>
&lt;p>实现线程封闭的三种方式：&lt;/p></description></item><item><title>Java线程不安全的类与写法</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%86%99%E6%B3%95/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E7%B1%BB%E4%B8%8E%E5%86%99%E6%B3%95/</guid><description>线程不安全的类与写法 线程不安全的类：类的对象可以同时被多个线程访问，比如抛出异常，逻辑错误。下面介绍一些常见的类。
StringBuilder StringBuilder线程不安全的类
代码示例
package com.yanxizhu.demo.concurrency.threadUnSafetyClass; import com.yanxizhu.demo.concurrency.annotation.UnThreadSafety; import lombok.extern.slf4j.Slf4j; import java.util.concurrent.CountDownLatch; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; import java.util.concurrent.Semaphore; /** * @description: 线程不安全的类：StringBuilder * @author: &amp;lt;a href=&amp;#34;mailto:batis@foxmail.com&amp;#34;&amp;gt;清风&amp;lt;/a&amp;gt; * @date: 2022/4/24 9:01 * @version: 1.0 */ @Slf4j @UnThreadSafety public class DemoStringBuilder { //用户数量 private static final int clientsTotal = 5000; //并发数量 private static final int concurrencyTotal = 200; //累加总和 private static StringBuilder stringBuilder = new StringBuilder(); public static void main(String[] args) throws InterruptedException { ExecutorService executorService = Executors.</description></item><item><title>Java线程安全-同步容器</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E5%90%8C%E6%AD%A5%E5%AE%B9%E5%99%A8/</guid><description>&lt;h1 id="线程安全-同步容器">线程安全-同步容器&lt;/h1>
&lt;h2 id="主要包括">主要包括&lt;/h2>
&lt;p>ArrayList -&amp;gt; Vector，Stack&lt;/p>
&lt;p>HashMap-&amp;gt;HashTable（key、value不能为null）
Collections.synchronizedXXX（List、Set、Map）&lt;/p>
&lt;p>都是使用Synchronized进行修饰的，性能不是特别好。可以使用并发容器代替。&lt;/p>
&lt;p>注意：同步容器也可能是线程步安全的。&lt;/p></description></item><item><title>Java线程安全-并发容器J.U.C</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8j.u.c/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8-%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8j.u.c/</guid><description>&lt;h1 id="线程安全-并发容器juc">线程安全-并发容器J.U.C&lt;/h1>
&lt;ul>
&lt;li>ArrayList -&amp;gt; CopyOnWriteArrayList&lt;/li>
&lt;li>HashSet、TreeSet -&amp;gt; CopyOnWriteArraySet 、ConcurrentSkipListSet&lt;/li>
&lt;li>HashMap、TreeMap -&amp;gt; ConcurrentHashMap 、ConcurrentSkipListMap&lt;/li>
&lt;/ul>
&lt;h1 id="copyonwritearraylist">CopyOnWriteArrayList&lt;/h1>
&lt;p>适合读多写少的场景。读的时候再原数组读不需要加锁，写的时候会copy一份会单独加锁。&lt;/p></description></item><item><title>Java线程4种创建方式</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B4%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B4%E7%A7%8D%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</guid><description>&lt;h1 id="异步与线程池">异步与线程池&lt;/h1>
&lt;h1 id="1初始化线程的4种方式">1、初始化线程的4种方式&lt;/h1>
&lt;p>1）、继承Thread
2）、实现Runnable接口
3）、实现Callable接口+FutureTask（可以拿到返回结果，可以处理异常）
4）、线程池&lt;/p>
&lt;p>方式1和方式2：主进程无法获取线程的运算结果。不适合当前场景。&lt;/p>
&lt;p>方式3：主进程可以获取线程的运算结果，但是不利于控制服务器中的线程资源。可以导致服务器资源耗尽。
方式4：通过如下两种方式初始化线程池&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>Executors&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">newFiexed&lt;/span> &lt;span style="color:#a6e22e">ThreadPool&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//或者
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> ThreadPoolExecutor&lt;span style="color:#f92672">(&lt;/span>corePoolSize&lt;span style="color:#f92672">,&lt;/span>maximumPoolSize&lt;span style="color:#f92672">,&lt;/span>keepAliveTime&lt;span style="color:#f92672">,&lt;/span>TimeUnit unit&lt;span style="color:#f92672">,&lt;/span> workQueue&lt;span style="color:#f92672">,&lt;/span>threadFactory&lt;span style="color:#f92672">,&lt;/span>handler&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java线程八锁</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%85%AB%E9%94%81/</link><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E5%85%AB%E9%94%81/</guid><description>线程八锁 package com.yanxizhu; /* * 题目：判断打印的 &amp;#34;one&amp;#34; or &amp;#34;two&amp;#34; ？ * * 1. 两个普通同步方法，两个线程，标准打印， 打印? //one two * 2. 新增 Thread.sleep() 给 getOne() ,打印? //one two * 3. 新增普通方法 getThree() , 打印? //three one two * 4. 两个普通同步方法，两个 Number 对象，打印? //two one * 5. 修改 getOne() 为静态同步方法，打印? //two one * 6. 修改两个方法均为静态同步方法，一个 Number 对象? //one two * 7. 一个静态同步方法，一个非静态同步方法，两个 Number 对象? //two one * 8. 两个静态同步方法，两个 Number 对象? //one two * * 线程八锁的关键： * ①非静态方法的锁默认为 this, 静态方法的锁为 对应的 Class 实例 * ②某一个时刻内，只能有一个线程持有锁，无论几个方法。 */ public class TestThread8Monitor { public static void main(String[] args) { Number number = new Number(); Number number2 = new Number(); new Thread(new Runnable() { @Override public void run() { number.</description></item><item><title>Java线程按序交替</title><link>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E6%8C%89%E5%BA%8F%E4%BA%A4%E6%9B%BF/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/thread/%E7%BA%BF%E7%A8%8B%E6%8C%89%E5%BA%8F%E4%BA%A4%E6%9B%BF/</guid><description>package com.yanxizhu; import java.util.concurrent.locks.Condition; import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; /** * @description: 线程按序交替 * @date: 2022/3/19 14:47 * @version: 1.0 */ public class PrintInfo { public static void main(String[] args) { print print = new print(); new Thread(new Runnable() { @Override public void run() { for(int i=1;i&amp;lt;5;i++){ try { print.printA(i); } catch (InterruptedException e) { e.printStackTrace(); } } } },&amp;#34;A&amp;#34;).start(); new Thread(new Runnable() { @Override public void run() { for(int i=1;i&amp;lt;5;i++){ try { print.</description></item><item><title>微服务项目搭建</title><link>https://willxwu.github.io/post/project/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/project/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</guid><description>&lt;h1 id="一创建仓库">一、创建仓库&lt;/h1>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/CDN@main/images/202203022023274.png" alt="">&lt;/p>
&lt;p>&lt;strong>注意：仓库名称、路径、选择语言、添加.gitignore、添加开源许可证、选择分支模型。&lt;/strong>&lt;/p></description></item><item><title>nexus私服搭建</title><link>https://willxwu.github.io/post/project/nexus%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/project/nexus%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/</guid><description>&lt;p>第一步骤：下载nexus私服软件nexus-2.12.0-01-bundle&lt;/p>
&lt;p>第二不：安装&lt;/p>
&lt;p>进入nexus解压目录进入到bin目录:&lt;/p>
&lt;p>1、安装:执行nexus.bat install&lt;/p>
&lt;p>2、启动:nexus.bat start&lt;/p>
&lt;p>第三步：查看访问路径&lt;/p>
&lt;p>进入config目录，打开nexus.properties即可看到端口号，项目命令nexus。&lt;/p>
&lt;p>第四步：浏览器打开http://127.0.0.1:8081/nexus/&lt;/p>
&lt;p>默认登录账号:admin/admin123&lt;/p></description></item><item><title>Java Map Ergodic</title><link>https://willxwu.github.io/post/javase/14_map-ergodic/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/14_map-ergodic/</guid><description>&lt;p>Map集合的2种循环方式。一种是通过map.entrySet()。&lt;/p>
&lt;p>另一种是map.keySet()。
所有的集合都可以通过迭代器Iterator，进行遍历。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.HashMap&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Iterator&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Map&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Map.Entry&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Set&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 重要
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 遍历map的两种方式map.entrySet() map.keySet()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MapDemo&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer &lt;span style="color:#f92672">,&lt;/span>String &lt;span style="color:#f92672">&amp;gt;&lt;/span> map &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> HashMap&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;111&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;2222&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//方式一 entrySet()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Set&lt;span style="color:#f92672">&amp;lt;&lt;/span>Map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> sets &lt;span style="color:#f92672">=&lt;/span> map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">entrySet&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取值1，通过for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">&amp;gt;&lt;/span> entry &lt;span style="color:#f92672">:&lt;/span> sets&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;ssss:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>entry&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getKey&lt;/span>&lt;span style="color:#f92672">()+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;value:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>entry&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取值2，通过iterator
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Iterator &lt;span style="color:#f92672">&amp;lt;&lt;/span>Map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">&amp;gt;&amp;gt;&lt;/span> itt &lt;span style="color:#f92672">=&lt;/span> sets&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">iterator&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(&lt;/span>itt&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">hasNext&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">Entry&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">,&lt;/span> String&lt;span style="color:#f92672">&amp;gt;&lt;/span> entrys &lt;span style="color:#f92672">=&lt;/span> itt&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>entrys&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getKey&lt;/span>&lt;span style="color:#f92672">()+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;----&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>entrys&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getValue&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">put&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#e6db74">&amp;#34;222&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//方式二 keySet()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Set&lt;span style="color:#f92672">&amp;lt;&lt;/span>Integer&lt;span style="color:#f92672">&amp;gt;&lt;/span> set &lt;span style="color:#f92672">=&lt;/span> map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">keySet&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Iterator it &lt;span style="color:#f92672">=&lt;/span> set&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">iterator&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(&lt;/span>it&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">hasNext&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Iterator=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>it&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;key:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>map&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">get&lt;/span>&lt;span style="color:#f92672">(&lt;/span>it&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>&lt;span style="color:#f92672">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Integer in &lt;span style="color:#f92672">:&lt;/span> set&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>in&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Scanner Random</title><link>https://willxwu.github.io/post/javase/13_java-scanner-random/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/13_java-scanner-random/</guid><description>&lt;p>Java的两个引用输入类型Scanner、Random类，Scanner用于接收键盘输入，Random用户产生随机数。引用类型也就是Sun公司为我们写好的类，我们直接使用就可以了。&lt;/p>
&lt;h3 id="1引用数据类型的使用">1、引用数据类型的使用&lt;/h3>
&lt;ol>
&lt;li>导入包：知道用的这个类，在jdk的那个目录那个文件下。&lt;/li>
&lt;li>创建对象：格式， 类 对象 = new 类型();&lt;/li>
&lt;li>如何使用: 对象.类的方法()&lt;/li>
&lt;/ol>
&lt;p>引用数据类型的使用与定义基本数据类型变量不同，引用数据类型的变量定义及赋值有一个相对固定的步骤或格式，如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>数据类型 变量名 = new 数据类型();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每种引用数据类型都有其方法，我们可以调用该类型实例的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>变量名.方法名();
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Socket TCP</title><link>https://willxwu.github.io/post/javase/12_java-socket-tcp/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/12_java-socket-tcp/</guid><description>&lt;p>通过Java Socket编程，实现多线程文件上传。主要涉及ServerScoket服务端、Socket客户端、IO流操作、多线线程。&lt;/p>
&lt;p>客户端：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.Update&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.File&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.FileInputStream&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.IOException&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.InputStream&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.OutputStream&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.net.Socket&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 利用TCP的Socket\ServerSocket客户端向服务器上传文件
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 客户端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UpClent&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> IOException&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Socket socket &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Socket&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;127.0.0.1&amp;#34;&lt;/span>&lt;span style="color:#f92672">,&lt;/span>&lt;span style="color:#ae81ff">8888&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> OutputStream out &lt;span style="color:#f92672">=&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getOutputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//读取本地文件，并通过out输出流，发送给服务端
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> File file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> File&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;J:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>File&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">separator&lt;/span>&lt;span style="color:#f92672">+&lt;/span>&lt;span style="color:#e6db74">&amp;#34;wxhandbook-master.zip&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> FileInputStream in &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> FileInputStream&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> data &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">1024&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> len &lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">((&lt;/span>len&lt;span style="color:#f92672">=&lt;/span>in&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">read&lt;/span>&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">))!=-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> out&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">write&lt;/span>&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> len&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">shutdownOutput&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取服务器返回信息
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> InputStream info &lt;span style="color:#f92672">=&lt;/span> socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getInputStream&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> infoSize&lt;span style="color:#f92672">=&lt;/span>info&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">read&lt;/span>&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">new&lt;/span> String&lt;span style="color:#f92672">(&lt;/span>data&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">,&lt;/span> infoSize&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> info&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Socket UDP</title><link>https://willxwu.github.io/post/javase/11_java-socket-udp/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/11_java-socket-udp/</guid><description>&lt;p>通过Socket网络编程，UDP实现简单聊天。主要涉及DatagramSocket进行数据传输、DatagramPacket进行数据包封装，2个类。&lt;/p>
&lt;p>发送端:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.chat&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.net.DatagramPacket&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.net.DatagramSocket&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.net.InetAddress&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 控制台输入；实现聊天。
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 发送方
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">UdpSend&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> Exception&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Scanner scan &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> InetAddress ia &lt;span style="color:#f92672">=&lt;/span> InetAddress&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getByName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;192.168.1.4&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatagramSocket socket &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DatagramSocket&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">true&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String chatInfo &lt;span style="color:#f92672">=&lt;/span> scan&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> info &lt;span style="color:#f92672">=&lt;/span> chatInfo&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getBytes&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DatagramPacket pack &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> DatagramPacket&lt;span style="color:#f92672">(&lt;/span>info&lt;span style="color:#f92672">,&lt;/span> info&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">,&lt;/span> ia&lt;span style="color:#f92672">,&lt;/span> &lt;span style="color:#ae81ff">6000&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> socket&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">send&lt;/span>&lt;span style="color:#f92672">(&lt;/span>pack&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>DBUtils</title><link>https://willxwu.github.io/post/javase/10_dbutils/</link><pubDate>Thu, 10 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/10_dbutils/</guid><description>&lt;p>通过读取properties获取链接数据库信息，利用apache开源数据库操作工具包DBUtils进行数据库CRUD操作。&lt;/p>
&lt;p>properties文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-properties" data-lang="properties">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">driverClass&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">com.mysql.jdbc.Driver&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">jdbc:mysql://localhost:3306/test&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">user&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">root&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">password&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">11111&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>DBCP</title><link>https://willxwu.github.io/post/javase/09_dbcp/</link><pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/09_dbcp/</guid><description>&lt;p>dbcp connection pool
使用dbcp连接池，进行数据库的CRUD，涉及jar包：commons-dbcp2-2.8.0.jar（连接池包）、commons-pool2-2.9.0.jar（dbcp依赖该包）、commons-logging-1.2.jar（接口日志包）、mysql-connector-java-5.1.37-bin.jar（数据库连接驱动）、commons-dbutils-1.7.jar（基本CRUD操作）&lt;/p>
&lt;p>DbcpUtils数据库连接池配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.dbcppool&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> org.apache.commons.dbcp2.BasicDataSource&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 利用DBCP链接数据库
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DbcpUtils&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">private&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> BasicDataSource dataSource &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> BasicDataSource&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//必配参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setDriverClassName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setUrl&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;jdbc:mysql://localhost:3306/test&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setUsername&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setPassword&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;11111&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//可配参数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setInitialSize&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">10&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setMaxIdle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">8&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> dataSource&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setMinIdle&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> BasicDataSource &lt;span style="color:#a6e22e">getConnecton&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> dataSource&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java JDBC</title><link>https://willxwu.github.io/post/javase/08_java-jdbc/</link><pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/08_java-jdbc/</guid><description>&lt;p>利用JAVA原生JDBC进行数据库的CRUD操作。简单记录一下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.jdbc&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.DriverManager&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.ResultSet&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.SQLException&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.util.Scanner&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.PreparedStatement&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.sql.Connection&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * jdbc使用
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyDriver&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#66d9ef">throws&lt;/span> ClassNotFoundException&lt;span style="color:#f92672">,&lt;/span> SQLException&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//1.注册驱动
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Class&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">forName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//2.获取数据库连接对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> String url &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;jdbc:mysql://localhost:3306/test&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String user &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;root&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String password &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;111111&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Connection conn &lt;span style="color:#f92672">=&lt;/span> DriverManager&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getConnection&lt;/span>&lt;span style="color:#f92672">(&lt;/span>url&lt;span style="color:#f92672">,&lt;/span> user&lt;span style="color:#f92672">,&lt;/span> password&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// System.out.println(conn);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//3.获取连接平台的执行对象
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Statement st = conn.createStatement();
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//4.执行sql,返回行数
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//executeUpdate():增删改
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//String sql = &amp;#34;insert into user(user_id,user_name,user_password) values(&amp;#39;1320442338427273213&amp;#39;,&amp;#39;zss&amp;#39;,&amp;#39;12&amp;#39;)&amp;#34;;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//int n = st.executeUpdate(sql);
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Scanner scan &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> Scanner&lt;span style="color:#f92672">(&lt;/span>System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">in&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String name &lt;span style="color:#f92672">=&lt;/span> scan&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextLine&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span> age &lt;span style="color:#f92672">=&lt;/span> scan&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">nextInt&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//为了防止sql注入攻击和提高效率，使用Statement的子类，进行预编译
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">//executeQuery（）:查询
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> String sql &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;select * from my_user where u_name=? and u_age=?&amp;#34;&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> PreparedStatement ps &lt;span style="color:#f92672">=&lt;/span> conn&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">prepareStatement&lt;/span>&lt;span style="color:#f92672">(&lt;/span>sql&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#f92672">,&lt;/span> name&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setObject&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#f92672">,&lt;/span> age&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>sql&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ResultSet rs &lt;span style="color:#f92672">=&lt;/span> ps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">executeQuery&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//5.处理结果
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">while&lt;/span>&lt;span style="color:#f92672">(&lt;/span>rs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>rs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;u_name&amp;#34;&lt;/span>&lt;span style="color:#f92672">)+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> rs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getString&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;u_age&amp;#34;&lt;/span>&lt;span style="color:#f92672">));&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//6.释放资源
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> rs&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ps&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> conn&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">close&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Reflection</title><link>https://willxwu.github.io/post/javase/07_java-reflection/</link><pubDate>Mon, 07 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/07_java-reflection/</guid><description>&lt;p>获取反射对象的3种方法。通过反射创建对象、通过反射获取有参、无参、公有、私有构造方法。通过反射获取公有、私有成员变量并修改之。通过反射获取成员方法，并调用。通过反射泛型擦除，存值。通过读取配置文件运行反射方法。&lt;/p></description></item><item><title>Java Thread</title><link>https://willxwu.github.io/post/javase/06_java-thread/</link><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/06_java-thread/</guid><description>&lt;p>进程：CPU为每个应用程序分配的独立空间，一个进程可能有多个线程。进程为线程中的摸个执行任务程序，多个进程之间可以进行共享数据。而JAVA的线程则是由JVM进程分配的，main方法所在线程，则成为主线程。&lt;/p>
&lt;h3 id="线程状态">〇、线程状态&lt;/h3>
&lt;p>正常情况线程执行步骤：新建-》运行-》死亡&lt;/p>
&lt;p>当CPU资源不够时，CUP分配给各个线程的资源可能不同(貌似有点像是线程在抢资源，实际是CPU分配资源给每个线程)。
因此就会出现线程的阻塞、休眠、等待3个状态。其中阻塞状态，当cpu资源够时，阻塞状态的线程可能恢复到运行状态，而休眠、等待的线程也可能进入运行状态。休眠、等待状态可能转换成阻塞状态，但是阻塞状态不会变成休眠、等待状态。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.1.7/images/uploads/2020/javase/upload_4b906c6a19ca62fceb56203e229f6ee2.png" alt="线程状态图.png">&lt;/p>
&lt;h3 id="一多线程的实现">一、多线程的实现&lt;/h3>
&lt;h5 id="0线程常用方法">0、线程常用方法&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.threads&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * 继承Thread创建线程，设置线程名称、获取线程名称
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ThreadDemo01&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> MyThreadsDemo mt &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> MyThreadsDemo&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mt&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">setName&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Hi&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mt&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">start&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取当前线程
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> Thread t &lt;span style="color:#f92672">=&lt;/span> Thread&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">currentThread&lt;/span>&lt;span style="color:#f92672">();&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>t&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>线程实现方式主测试类：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase.threads&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">MyThreadsDemo&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> Thread&lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#a6e22e">MyThreadsDemo&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">super&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;Google&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>&lt;span style="color:#f92672">()&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#66d9ef">int&lt;/span> i&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">;&lt;/span>i&lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">;&lt;/span>i&lt;span style="color:#f92672">++)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Thread&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">sleep&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>&lt;span style="color:#66d9ef">catch&lt;/span>&lt;span style="color:#f92672">(&lt;/span>Exception e&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>e&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getMessage&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java IO</title><link>https://willxwu.github.io/post/javase/05_java-io/</link><pubDate>Sat, 05 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/05_java-io/</guid><description>&lt;p>将自己看作为程序，将数据输出到文件中，称之为输出。
从文件读取数据到程序，称为输出。&lt;/p>
&lt;p>JAVA流操作主要分为字节流、字符流。&lt;/p>
&lt;p>字节流鼻祖：InputStream\OutpuStream&lt;br>
字符流鼻祖:Reader\Writer&lt;/p>
&lt;h3 id="file">File&lt;/h3>
&lt;h5 id="1file常用方法">1、File常用方法&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> learn.javase&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.io.File&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * File常用操作
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @author Jole
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">FileDemo01&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> File file &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> File&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;H://&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//此抽象路径名表示的文件或目录的名称；如果路径名的名称序列为空，则返回空字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getName&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回文件大小
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回绝对路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAbsolutePath&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//绝对路径名
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getAbsoluteFile&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//父目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">getParentFile&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否存在
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">exists&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//是否是目录
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">isDirectory&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//返回路径下的文件或文件夹
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">list&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String path &lt;span style="color:#f92672">:&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">list&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//获取路径
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>path&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//可用的文件系统根
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;listRoots:&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">listRoots&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span>&lt;span style="color:#f92672">(&lt;/span>File f &lt;span style="color:#f92672">:&lt;/span> file&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">listFiles&lt;/span>&lt;span style="color:#f92672">())&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;111&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>f&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>f&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">list&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>f&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">length&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;111&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>f&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">listRoots&lt;/span>&lt;span style="color:#f92672">());&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Java Exception</title><link>https://willxwu.github.io/post/javase/04_java-exception/</link><pubDate>Fri, 04 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/04_java-exception/</guid><description>&lt;h3 id="异常">异常&lt;/h3>
&lt;h5 id="throwable">Throwable&lt;/h5>
&lt;p>Throwable类是所有错误跟异常类的超类.&lt;/p>
&lt;h5 id="exception">Exception&lt;/h5>
&lt;p>Exception异常类及其子类都是继承自Throwable类，用来表示java中可能出现的异常，并且合理的处理这些异常。&lt;/p>
&lt;h5 id="runtimeexception">RuntimeException&lt;/h5>
&lt;p>RuntimeException类是运行异常类，继承自Exception类，它以及它的子类只能在运行过程中存在，当出现时，只能修改源代码，此异常无法处理。&lt;/p>
&lt;p>&lt;strong>特点：&lt;/strong>&lt;/p>
&lt;p>　　　方法中抛出运行时期异常,方法定义中无需throws声明,调用者也无需处理此异常&lt;/p>
&lt;p>　　　运行时期异常一旦发生,需要程序人员修改源代码&lt;/p>
&lt;h5 id="error">Error&lt;/h5>
&lt;p>Error类是与Exception的平级的类，用来表示Java中存在的严重错误，只能通过修改代码来解决问题。&lt;/p>
&lt;h5 id="区别">区别&lt;/h5>
&lt;p>Exception与Error区别：&lt;/p>
&lt;p>Exception是指程序在编译或者运行时出现的某种异常问题，我们可以对异常进行某种处理，如果不处理异常的话，程序将会停止运行。&lt;/p>
&lt;p>Error是指程序在运行时出现的严重问题，无法处理，程序将会停止运行，Error通常都是系统级别的问题，都是虚拟机jvm所在系统发生的，只能通过修改源代码解决问题。&lt;/p></description></item><item><title>Java Array</title><link>https://willxwu.github.io/post/javase/03_java-array/</link><pubDate>Thu, 03 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/03_java-array/</guid><description>&lt;p>JAVA数组重点掌握知识，以后肯定会用到的，可以了解一下底层原理。数组是指一组数据的集合，数组中的每个数据被称作元素。在数组中可以存放任意类型的元素，但同一个数组里存放的元素类型必须一致。&lt;/p>
&lt;h3 id="数组">数组&lt;/h3>
&lt;p>数组定义格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>数据类型[] 数组名(变量名) = new 数据类型[元素个数或数组长度];
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">ArrayDemo01&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> x &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#ae81ff">100&lt;/span>&lt;span style="color:#f92672">];&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：数组定长，一但定义长度为100，在使用时大小就是100了。不变量。&lt;/p>
&lt;p>&lt;strong>数组特点：定长、引用类型。&lt;/strong>&lt;/p>
&lt;h3 id="jvm">JVM&lt;/h3>
&lt;p>java程序运行时，操作系统会给jvm虚拟机分配一块内存。JVM又会将这块内存，进行划分管理。&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.1.7/images/uploads/2020/javase/shuzu1.png" alt="">&lt;/p>
&lt;p>&lt;strong>JVM内存划分&lt;/strong>：JVM对自己的内存进行了划分，分成5个区域。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>1、寄存器：内存和CPU之间。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>2、本地方法栈：JVM调用操作系统中的功能。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>3、方法和数据共享：运行时其class文件，进入的地方。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>4、方法栈：所有的方法运行的时候，进入的内存。
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>5、堆：存储的是容器和对象。
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>开发人员主要关心：方法和数据共享、方法栈、堆。&lt;/p>
&lt;h3 id="数组内存划分">数组内存划分&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.1.7/images/uploads/2020/javase/shuzu2.png" alt="">&lt;/p>
&lt;ol>
&lt;li>首先，运行class文件，所以先进入方法区。&lt;/li>
&lt;li>运行main方法，在方法栈中运行，但是main用不了那么多，所以方法栈中会分配一块给main方法是用。&lt;/li>
&lt;li>执行数组，一个容器，所以JVM在堆内存，开空间，存储数组容器。&lt;/li>
&lt;li>JVM会将该地址，给定义的数组变量arr（相当于arr引用了这个地址），所以数组是引用类型。&lt;/li>
&lt;li>每次运行，JVM分配的地址是不同的。&lt;/li>
&lt;li>当main方法运行完了，arr变量就没了，然后new int[3]也就没了 ，JVM垃圾回收机制，会自动帮我们回收，不用我们去处理了。&lt;/li>
&lt;/ol>
&lt;p>堆空间太大，怎么找到这个容器呢，所以每个数组，在内存中，都有自己的内存地址，也就是数组元素的首地址，第一个数据的地址。&lt;/p>
&lt;p>&lt;strong>注意：arr引用类型，保存的数据，实际上是内存中的地址。&lt;/strong>&lt;/p></description></item><item><title>Java Basics Two</title><link>https://willxwu.github.io/post/javase/02_java-basics-two/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/02_java-basics-two/</guid><description>&lt;p>JAVA流程控制语句JAVA中非常重要的基础知识点务必完全理解掌握，总结记录一下之前学习笔记。JAVA流程控制语句是编程的基础知识，主要是为了更好的组织代码的执行流程，下面将详细介绍java流程控制语句。&lt;/p>
&lt;h3 id="一选择结构if">一、选择结构if&lt;/h3>
&lt;p>if条件语句分为三种格式。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>if语句&lt;/p>
&lt;p>&lt;strong>如果满足某种条件就执行。&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/willxwu/cdn@1.1.7/images/uploads/2020/javase/liucheng1.png" alt="">&lt;/p>
&lt;p>if语句格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-txt" data-lang="txt">&lt;span style="display:flex;">&lt;span>if（条件）{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 语句的执行体
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>条件：结果必须是布尔类型 1==1 true || false
执行体：当id条件为true的时候，执行大括号中的语句，否则什么都不做。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * if语句例子
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">IfDemo&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">public&lt;/span> &lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>&lt;span style="color:#f92672">(&lt;/span>String&lt;span style="color:#f92672">[]&lt;/span> args&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// TODO Auto-generated method stub
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> i &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span>&lt;span style="color:#f92672">(&lt;/span>i&lt;span style="color:#f92672">==&lt;/span>&lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;if中的条件是true&amp;#34;&lt;/span>&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> i&lt;span style="color:#f92672">++;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> System&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">out&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">println&lt;/span>&lt;span style="color:#f92672">(&lt;/span>&lt;span style="color:#e6db74">&amp;#34;i=&amp;#34;&lt;/span>&lt;span style="color:#f92672">+&lt;/span>i&lt;span style="color:#f92672">);&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意：if()括号后面没有分号&amp;quot;;&amp;quot;&lt;/strong>&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Java Basics One</title><link>https://willxwu.github.io/post/javase/01_java-basics-one-/</link><pubDate>Tue, 01 Feb 2022 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/javase/01_java-basics-one-/</guid><description>&lt;p>总结一下JAVA基础知识如：注释、关键字、标识符、数据类型、变量、数据类型转换等基础语法。初学者可参考看看。&lt;/p>
&lt;h3 id="1程序注释">1、程序注释&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>单行注释：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">//xxxxxx
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>多行注释：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* xxxxxx */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>文档注释：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/** xxxxxx */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h3 id="2关键字">2、关键字&lt;/h3>
&lt;p>关键字：是被Java语言赋予特殊含义，具有专门用途的单词。所有的Java关键词，都是小写。关键词比较多，不用刻意去背，以后用多了自己就记住了。&lt;/p>
&lt;h3 id="3标识符">3、标识符&lt;/h3>
&lt;p>Java中除了关键字以外基本上都是标识符。我们自己定义的词，比如自己定义的HelloWorld。&lt;/p>
&lt;p>标志符命名规则：&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-dos" data-lang="dos">标志符组成：字母、数字、下划线、美元符号
字母：a~z、A~Z
数字：0-9
下划线：_
美元符号：$
&lt;/code>&lt;/pre>&lt;p>&lt;strong>注意：不能数字开头，不能是关键字，严格区分大小写，不限制长度起名时，尽量达到见名知意。&lt;/strong>&lt;/p></description></item><item><title>在线网站</title><link>https://willxwu.github.io/post/fun/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/fun/</guid><description>在线网站 一、数据结构 数据结构动态图 https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
二、绘图 1、Processon on https://www.processon.com/diagrams
2、diagrams https://app.diagrams.net/
三、RabbitMQ RabbitMQ路由 http://tryrabbitmq.com/
四、算法 1、raft算法 http://thesecretlivesofdata.com/raft/</description></item><item><title>Html</title><link>https://willxwu.github.io/post/html/html/</link><pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/html/html/</guid><description>&lt;h2 id="1html基本格式">1、HTML基本格式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;HTML入门&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;Hello World&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>html：根标签，只有一个（网页所有内容都应该写在根标签里面）&lt;/p>
&lt;p>head：子标签，用来设置头部内容&lt;/p>
&lt;p>body：子标签，网页主体,所有要显示的内容放这里面&lt;/p>
&lt;p>title：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>网页的标题标签，也就是网页显示名字。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>搜索引擎检索页面时，会首先检索titlte中的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>元素：一个完整的标签&amp;lt;&amp;gt;&amp;lt;/&amp;gt;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>标签&amp;lt;&amp;gt;&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title/><link>https://willxwu.github.io/post/life/2023%E5%9B%BD%E5%BA%86%E5%B7%9D%E8%A5%BF%E8%87%AA%E9%A9%BE%E6%B8%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/life/2023%E5%9B%BD%E5%BA%86%E5%B7%9D%E8%A5%BF%E8%87%AA%E9%A9%BE%E6%B8%B8/</guid><description>2023国庆川西自驾游 国庆在家待了2天，自驾游川西3天，提前2天回来。整个行程3天，时间比较紧，全程700公里左右，主要景点：红海子、斯丁措、鱼子西、新都桥、折多山。
自驾车型：城市SUV，1.4T排量。
自驾前准备：
0、安全：检车辆车胎气压、油、玻璃水、机油等情况。
1、药品：防高反药、氧气筒，一些退烧药、感冒药、葡萄糖、碘伏等药品。
2、衣服：冬季羽绒服、保暖裤、防风外套、短袖T恤额、长袖秋衣、牛仔裤、运动鞋2双。
3、棉絮、厚被子、雨伞、遮阳帽、防嗮袖。
4、方便面、矿泉水、水果、零食、红牛、八宝粥。
5、工具：水果刀、湿巾纸、干纸巾、透明胶、剪刀、灭火器、帐篷、超大保温杯。
上面有些东西不是必须的，只是防止为了突发情况时使用，比如半夜在高速堵车、或者高速上车外了，或者车着火了等极端情况。
人员：计划自己和老爸2人自驾的，因为妈身体不太好，也不想去那么远的地方，老婆要带儿子回娘家玩，由于担心开车太累或者出现紧急情况所以叫上了亲姐，结果侄儿也要去，所以一路上4个人，能开车的就我和姐。
线路规划：
计划路线：成都环球上高速-&amp;gt;京昆高速-&amp;gt;雅叶高速-&amp;gt;康定
实际路线：成都环球上高速-&amp;gt;京昆高速-&amp;gt;雅叶高速-&amp;gt;泸定县
本来计划先到达康定住一晚，第二天开始游玩。但是用于第3天中午吃了午饭才从成都出发，6个小时才能到达康，预估到不了康定，所以第一天先到泸定县住了一晚，晚上逛了一下泸定县，至此第一天就结束了，第一天影响比较深的就是下高速后进泸定县的路比较陡，城市很难见到，然后就是所谓的勇士路，很堵，停车场爆满，直接开发泸定县城附近在找到合适停车地方。
第二天一大早，到泸定县吃了早餐，逛了泸定桥、大渡河、泸定纪念公园就直接出发康定红海子，期间途径康定县城堵车严重，之后翻过折多山(堵得要命)。在上折多山途中停车弄了一碗泡面当作午餐、吃了一些水果。然后一路拍照，之后逛了红海子、斯丁措、鱼子西、新都桥，经过康定机场。空气、天气很好，蓝天白云、就是太堵了。第二天时间比较紧，加上姐高反比较严重，所以一直催着到低海拔的新都桥镇去休息。我和老爸高反还不是特别严重。上面几个地方拍照完后，下午直接奔新都桥，也是一路堵，下午半天差不多就一直堵在车上，就这样第二天就匆匆忙忙的完了。晚上到达新都桥找好住宿后，休息一会在新都桥镇上吃了晚上，就早早的休息了。
第三天吃完早饭，一早去了新都桥，结果和想象的景色不太一样，拍了一些照片。然后看到附近的贡嘎山观景台，去爬了一会实在爬不动，加上还要开车就爬了一点点。接着买了一些牛肉120元/每斤。接着就往回走了，本来计划是还要到塔公草原、墨石公园玩的，但是姐高反加姐只有3天假期所以就放弃了。下午返回途径318国道，回途中印象最深的就是回来的318国道开车比较有意思，陡峭、弯急，回途经过折多山也是堵的要命。
去和回的高速上基本不堵车，车速保持在110~125左右，开车印象最深的就是二郎山附近的几个隧道全长20公里左右，去基本是上坡，回的时候基本保持80码的速度，全是下坡，基本不怎么耗油。3天全是我一个人开，膝盖都酸了，翻越折多山时叫姐开，她不敢开，最后还是自己来，3天全部行车700公里左右。来途径成都浦江服务区、雅安天全服务区、泸定服务区，回去途中在雅安天全服务区、浦江服务区休息了一会。回家途中天全服务区侄儿开门不小心将旁边的马自达车门碰了一个小吭，陪了200元。幸好是个马子达，就当吸取教训吧。
晚上达到姐家，爸和姐去超市买菜炒了一份回锅肉、买了一瓶大可乐，吃完饭，去了附近姐经常自助洗车的洗车店4个人一起把车洗了，晚上晚上开车回家。
感受:3天时间比较紧，加上高反，各景点没有好好玩，各个地方的乡镇没有好好逛逛、好吃的也没怎么吃到。感觉像是去拍了照就走了，没什么留下也没带走什么，老爸、老姐一直在喊太累，可能是晚上没修改好。最大的好处就是开车技术应该有了一定提升。在姐高反严重，都要打120时，感受最深的就是，身体健康才是本钱，回去还是要坚持运动，保持一项个人喜欢的运动，保持好的生活习惯。晚上急急忙忙的记录了一下，就到这吧，儿子媳妇都睡了，我也像睡了。</description></item><item><title/><link>https://willxwu.github.io/post/life/%E8%BF%91%E5%86%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://willxwu.github.io/post/life/%E8%BF%91%E5%86%B5/</guid><description>近况 其实一直想写一些关于生活方面的文章，但是由于担心隐私泄露以及文笔不好，表达能力不好，就搁置了。
最近突然觉得还是应该记录一些生活，有时有很多想写的，但是组织语言又不好，估计只能写一小段，就不好意思写了。
先分享一首刚刚听见的歌曲，感觉此刻听着还不错。
今晚带儿子游泳，回家已经9点了，感觉时间比较晚了，因为回来还要刷牙喝奶，然后才上传睡觉，但是媳妇还是要给儿子复习一下在培训机构学习的英语课程，不然估计下周又忘了。
最近一直没怎么学习技术方面的东西，一是下班回家后不想动，二是最近想运动一下，原因是感觉有白头发了，加上以前一直晚睡，养成了不好的习惯。今晚媳妇和儿子睡了，才有自己时间听听歌，看看新闻，才静下心来写这篇文章。
也不知道写些什么，就说一下这种关于运动的事情吧。
周一下班骑自行车回家，从公司到小区门口6.05公里，用时23分钟，平均速度15.52km/h.
周二晚上19:30吃了晚饭，带着儿子去游泳馆游到20:30回家，接着玩了会手机23:15睡觉。
周三今晚19:10出发去游泳馆，20:20冲洗骑车回家，到家21:00，接口给儿子冲奶，儿子喝完奶媳妇帮儿子刷牙。21:20媳妇在床上给儿子复习英语，然后每晚必备的睡前故事。大概21:40睡觉，感觉时间还是比较晚了。
明天周四不去了，一是时间有点紧，二是刚上一年级，才开学几天，还是要以学校学习为主。计划明晚让儿子早点睡，老师提倡的是20：30准备睡觉。
附上几张儿子开学的照片记念一下儿子开学当天。
感觉上面写的都是一些口水话，自认为没有任何文笔，记得初中时语文，英文差的不是一点点。今晚就写到这吧，不管有没有人看，就当个人垃圾桶吧。
本来想放几张儿子一年级开学照片，但是水果机的.HEIC格式图片windows居然不能打开，那就先搞个解码器，等可以预览了在放吧。找到一张大运会期间的照片。</description></item></channel></rss>